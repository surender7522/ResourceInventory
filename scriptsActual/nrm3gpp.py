# generated by datamodel-codegen:
#   filename:  TS28541_SliceNrm.yaml
#   timestamp: 2024-01-11T14:05:29+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import BaseModel, Extra, Field, confloat, conint, constr
from pydantic import validator, ValidationError

class Float(BaseModel):
    __root__: float


class MobilityLevel(Enum):
    STATIONARY = 'STATIONARY'
    NOMADIC = 'NOMADIC'
    RESTRICTED_MOBILITY = 'RESTRICTED_MOBILITY'
    FULL_MOBILITY = 'FULL_MOBILITY'


class SynAvailability(Enum):
    NOT_SUPPORTED = 'NOT_SUPPORTED'
    BETWEEN_BS_AND_UE = 'BETWEEN_BS_AND_UE'
    BETWEEN_BS_AND_UE_AND_UE_AND_UE = 'BETWEEN_BS_AND_UE_AND_UE_AND_UE'


class PositioningAvailabilityEnum(Enum):
    CIDE_CID = 'CIDE_CID'
    OTDOA = 'OTDOA'
    RF_FINGERPRINTING = 'RF_FINGERPRINTING'
    AECID = 'AECID'
    HYBRID_POSITIONING = 'HYBRID_POSITIONING'
    NET_RTK = 'NET_RTK'


class PositioningAvailability(BaseModel):
    __root__: List[PositioningAvailabilityEnum]


class PredictionFrequency(Enum):
    PERSEC = 'PERSEC'
    PERMIN = 'PERMIN'
    PERHOUR = 'PERHOUR'


class SharingLevel(Enum):
    SHARED = 'SHARED'
    NON_SHARED = 'NON_SHARED'


class NetworkSliceSharingIndicator(Enum):
    SHARED = 'SHARED'
    NON_SHARED = 'NON_SHARED'


class SliceSimultaneousUse(BaseModel):
    __root__: conint(ge=0, le=4)


class Category(Enum):
    CHARACTER = 'CHARACTER'
    SCALABILITY = 'SCALABILITY'


class TaggingEnum(Enum):
    PERFORMANCE = 'PERFORMANCE'
    FUNCTION = 'FUNCTION'
    OPERATION = 'OPERATION'


class Tagging(BaseModel):
    __root__: List[TaggingEnum]


class Exposure(Enum):
    API = 'API'
    KPI = 'KPI'


class ServAttrCom(BaseModel):
    category: Optional[Category] = None
    tagging: Optional[Tagging] = None
    exposure: Optional[Exposure] = None


class Support(Enum):
    NOT_SUPPORTED = 'NOT_SUPPORTED'
    SUPPORTED = 'SUPPORTED'


class DelayTolerance(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    support: Optional[Support] = None


class NonIPSupport(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    support: Optional[Support] = None


class DeterministicComm(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    availability: Optional[Support] = None
    periodicityList: Optional[List[int]] = None


class XLThpt(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    guaThpt: Optional[Float] = None
    maxThpt: Optional[Float] = None


class MaxPktSize(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    maxsize: Optional[int] = None


class MaxNumberofPDUSessions(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    nOofPDUSessions: Optional[int] = None


class KPIMonitoring(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    kPIList: Optional[List[str]] = None


class NBIoT(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    support: Optional[Support] = None


class RadioSpectrum(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    nROperatingBands: Optional[List[str]] = None


class Synchronicity(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    availability: Optional[SynAvailability] = None
    accuracy: Optional[Float] = None


class Positioning(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    availability: Optional[PositioningAvailability] = None
    predictionFrequency: Optional[PredictionFrequency] = None
    accuracy: Optional[Float] = None


class UserMgmtOpen(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    support: Optional[Support] = None


class V2XCommModels(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    v2XMode: Optional[Support] = None


class TermDensity(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    density: Optional[int] = None


class NsInfo(BaseModel):
    nsInstanceId: Optional[str] = None
    nsName: Optional[str] = None
    description: Optional[str] = None


class KpiType(Enum):
    NUMOFBITS = 'NUMOFBITS'
    NUMOFBITS_RANBASED = 'NUMOFBITS_RANBASED'


class EmbbEEPerfReq(BaseModel):
    kpiType: Optional[KpiType] = None
    req: Optional[float] = None


class KpiType1(Enum):
    INVOFLATENCY = 'INVOFLATENCY'
    NUMOFBITS_MULTIPLIED_INVOFLATENCY = 'NUMOFBITS_MULTIPLIED_INVOFLATENCY'


class UrllcEEPerfReq(BaseModel):
    kpiType: Optional[KpiType1] = None
    req: Optional[float] = None


class KpiType2(Enum):
    MAXREGSUBS = 'MAXREGSUBS'
    MEANACTIVEUES = 'MEANACTIVEUES'


class MIoTEEPerfReq(BaseModel):
    kpiType: Optional[KpiType2] = None
    req: Optional[float] = None


class EEPerfReq(BaseModel):
    __root__: Union[EmbbEEPerfReq, UrllcEEPerfReq, MIoTEEPerfReq]


class EnergyEfficiency(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    performance: Optional[EEPerfReq] = None


class NSSAASupport(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    support: Optional[Support] = None


class SecFunc(BaseModel):
    secFunId: Optional[str] = None
    secFunType: Optional[str] = None
    secRules: Optional[List[str]] = None


class N6Protection(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    secFuncList: Optional[List[SecFunc]] = None


class DataNetwork(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    dnnList: Optional[List[str]] = None


class DataAccessUsed(Enum):
    DIRECT_INTERNET_ACCESS = 'DIRECT_INTERNET_ACCESS'
    TERM_PVT_NETWORK = 'TERM_PVT_NETWORK'
    LOCAL_TRAFFIC = 'LOCAL_TRAFFIC'


class DataAccess(BaseModel):
    dataNetworkName: Optional[str] = None
    dataAccessUsed: Optional[DataAccessUsed] = None


class TunellingMechanismUsed(Enum):
    L2TP_TUNNEL = 'L2TP_TUNNEL'
    GRE_TUNNEL = 'GRE_TUNNEL'
    VPN_TUNNEL = 'VPN_TUNNEL'
    LABEL_BASED_ROUTING = 'LABEL_BASED_ROUTING'
    field_802_1Q_VLAN = '802.1Q_VLAN'
    SRV6 = 'SRV6'
    OTHER = 'OTHER'


class TunnellingMechanism(BaseModel):
    dataNetworkName: Optional[str] = None
    tunellingMechanismUsed: Optional[TunellingMechanismUsed] = None


class LocalBreakoutAllowed(Enum):
    True_ = True
    False_ = False


class LboAllowed(BaseModel):
    dataNetworkName: Optional[str] = None
    localBreakoutAllowed: Optional[LocalBreakoutAllowed] = None


class DataNetworkAccess(BaseModel):
    servAttrCom: Optional[ServAttrCom] = None
    dataAccessList: Optional[List[DataAccess]] = None
    tunnellingMechanismList: Optional[List[TunnellingMechanism]] = None
    localBreakoutAllowedList: Optional[List[LboAllowed]] = None


class Mcc(BaseModel):
    __root__: constr(regex=r'^[0-9]{3}$')


class DateTime(BaseModel):
    __root__: datetime


class FullTime(BaseModel):
    __root__: str = Field(..., description='format (e.g., full-time) is from RFC 3339')


class DateMonth(BaseModel):
    __root__: str


class DateMonthDay(BaseModel):
    __root__: str


class DayInYear(BaseModel):
    month: Optional[DateMonth] = None
    monthDay: Optional[DateMonthDay] = None


class Latitude(BaseModel):
    __root__: confloat(ge=-90.0, le=90.0)


class Longitude(BaseModel):
    __root__: confloat(ge=-180.0, le=180.0)


class Dn(BaseModel):
    __root__: str


class DnList(BaseModel):
    __root__: List[Dn]


class Mnc(BaseModel):
    __root__: constr(regex=r'^[0-9]{2,3}$')


class Nid(BaseModel):
    __root__: constr(regex=r'^[A-Fa-f0-9]{11}$')


class PlmnId(BaseModel):
    mcc: Optional[Mcc] = None
    mnc: Optional[Mnc] = None


class Tac(BaseModel):
    __root__: constr(regex=r'(^[A-Fa-f0-9]{4}$)|(^[A-Fa-f0-9]{6}$)')


class UtraCellId(BaseModel):
    __root__: int


class EutraCellId(BaseModel):
    __root__: constr(regex=r'^[A-Fa-f0-9]{7}$')


class NrCellId(BaseModel):
    __root__: constr(regex=r'^[A-Fa-f0-9]{9}$')


class TimeWindow1(BaseModel):
    startTime: Optional[DateTime] = None
    endTime: Optional[DateTime] = None


class TimeWindow2(BaseModel):
    startTime: Optional[DateTime] = None


class TimeWindow3(BaseModel):
    endTime: Optional[DateTime] = None


class TimeWindow(BaseModel):
    __root__: Union[TimeWindow1, TimeWindow2, TimeWindow3]


class GeoCoordinate(BaseModel):
    latitude: Optional[Latitude] = None
    longitude: Optional[Longitude] = None
    altitude: Optional[Float] = None


class ConvexGeoPolygon(BaseModel):
    __root__: List[GeoCoordinate] = Field()
    @validator('__root__')
    def validate_min_items___root__(cls, value):
        min_items_required = 3
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value


class GeoArea(BaseModel):
    convexGeoPolygon: Optional[ConvexGeoPolygon] = None


class GeoAreaToCellMapping(BaseModel):
    geoArea: Optional[GeoArea] = None
    associationThreshold: Optional[int] = None


class Fqdn(BaseModel):
    __root__: str


class Ipv4Addr(BaseModel):
    __root__: constr(
        regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
    ) = Field(..., example='198.51.100.1')


class Ipv6Addr(BaseModel):
    pass


class Ipv6Prefix(BaseModel):
    pass


class IpAddr(BaseModel):
    __root__: Union[Ipv4Addr, Ipv6Addr, Ipv6Prefix]


class HostAddr(BaseModel):
    __root__: Union[Ipv4Addr, Ipv6Addr, Fqdn]


class Host(BaseModel):
    __root__: Union[IpAddr, Fqdn]


class Uri(BaseModel):
    __root__: str


class TimeInterval(BaseModel):
    intervalStart: Optional[FullTime] = None
    intervalEnd: Optional[FullTime] = None


class AdministrativeState(Enum):
    LOCKED = 'LOCKED'
    UNLOCKED = 'UNLOCKED'


class OperationalState(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class UsageState(Enum):
    IDEL = 'IDEL'
    ACTIVE = 'ACTIVE'
    BUSY = 'BUSY'


class AvailabilityStatus(Enum):
    IN_TEST = 'IN_TEST'
    FAILED = 'FAILED'
    POWER_OFF = 'POWER_OFF'
    OFF_LINE = 'OFF_LINE'
    OFF_DUTY = 'OFF_DUTY'
    DEPENDENCY = 'DEPENDENCY'
    DEGRADED = 'DEGRADED'
    NOT_INSTALLED = 'NOT_INSTALLED'
    LOG_FULL = 'LOG_FULL'


class AttributeNameValuePairSet(BaseModel):
    __root__: Optional[Dict[str, Any]] = None


class AttributeValueChangeSet(BaseModel):
    __root__: List[AttributeNameValuePairSet] = Field(
        ...,
        description='The first array item contains the attribute name value pairs with the new values, and the second array item the attribute name value pairs with the optional old values.',
        max_items=2,
        min_items=1,
    )


class Filter(BaseModel):
    __root__: str = Field(
        ..., description='The filter format shall be compliant to XPath 1.0.'
    )


class SystemDN(BaseModel):
    __root__: str


class NotificationId(BaseModel):
    __root__: int


class AlarmNotificationTypes(Enum):
    notifyNewAlarm = 'notifyNewAlarm'
    notifyChangedAlarm = 'notifyChangedAlarm'
    notifyChangedAlarmGeneral = 'notifyChangedAlarmGeneral'
    notifyAckStateChanged = 'notifyAckStateChanged'
    notifyCorrelatedNotificationChanged = 'notifyCorrelatedNotificationChanged'
    notifyComments = 'notifyComments'
    notifyClearedAlarm = 'notifyClearedAlarm'
    notifyAlarmListRebuilt = 'notifyAlarmListRebuilt'
    notifyPotentialFaultyAlarmList = 'notifyPotentialFaultyAlarmList'


class AlarmId(BaseModel):
    __root__: str


class AlarmType(Enum):
    COMMUNICATIONS_ALARM = 'COMMUNICATIONS_ALARM'
    QUALITY_OF_SERVICE_ALARM = 'QUALITY_OF_SERVICE_ALARM'
    PROCESSING_ERROR_ALARM = 'PROCESSING_ERROR_ALARM'
    EQUIPMENT_ALARM = 'EQUIPMENT_ALARM'
    ENVIRONMENTAL_ALARM = 'ENVIRONMENTAL_ALARM'
    INTEGRITY_VIOLATION = 'INTEGRITY_VIOLATION'
    OPERATIONAL_VIOLATION = 'OPERATIONAL_VIOLATION'
    PHYSICAL_VIOLATION = 'PHYSICAL_VIOLATION'
    SECURITY_SERVICE_OR_MECHANISM_VIOLATION = 'SECURITY_SERVICE_OR_MECHANISM_VIOLATION'
    TIME_DOMAIN_VIOLATION = 'TIME_DOMAIN_VIOLATION'


class ProbableCause1(Enum):
    PROBABLE_CAUSE_001 = 'PROBABLE_CAUSE_001'
    PROBABLE_CAUSE_002 = 'PROBABLE_CAUSE_002'
    PROBABLE_CAUSE_003 = 'PROBABLE_CAUSE_003'
    PROBABLE_CAUSE_004 = 'PROBABLE_CAUSE_004'
    PROBABLE_CAUSE_005 = 'PROBABLE_CAUSE_005'


class ProbableCause(BaseModel):
    __root__: Union[Union[ProbableCause1, str], int] = Field(
        ...,
        description='The value of the probable cause may be a specific standardized string, or any vendor provided string. Probable cause strings are not standardized in the present document. They may be added in a future version. Up to then the mapping of the generic probable cause strings "PROBABLE_CAUSE_001" to "PROBABLE_CAUSE_005" is vendor specific. The value of the probable cause may also be an integer. The mapping of integer values to probable causes is vendor specific.',
    )


class SpecificProblem(BaseModel):
    __root__: Union[str, int]


class PerceivedSeverity(Enum):
    INDETERMINATE = 'INDETERMINATE'
    CRITICAL = 'CRITICAL'
    MAJOR = 'MAJOR'
    MINOR = 'MINOR'
    WARNING = 'WARNING'
    CLEARED = 'CLEARED'


class TrendIndication(Enum):
    MORE_SEVERE = 'MORE_SEVERE'
    NO_CHANGE = 'NO_CHANGE'
    LESS_SEVERE = 'LESS_SEVERE'


class ThresholdHysteresis(BaseModel):
    high: Union[int, Float]
    low: Optional[Float] = None


class ThresholdLevelInd1(BaseModel):
    up: Optional[ThresholdHysteresis] = None


class ThresholdLevelInd2(BaseModel):
    down: Optional[ThresholdHysteresis] = None


class ThresholdLevelInd(BaseModel):
    __root__: Union[ThresholdLevelInd1, ThresholdLevelInd2]


class ThresholdInfo(BaseModel):
    observedMeasurement: str
    observedValue: float
    thresholdLevel: Optional[ThresholdLevelInd] = None
    armTime: Optional[DateTime] = None


class CorrelatedNotification(BaseModel):
    sourceObjectInstance: Dn
    notificationIds: List[NotificationId]


class CorrelatedNotifications(BaseModel):
    __root__: List[CorrelatedNotification]


class AckState(Enum):
    ACKNOWLEDGED = 'ACKNOWLEDGED'
    UNACKNOWLEDGED = 'UNACKNOWLEDGED'


class AlarmRecord(BaseModel):
    objectInstance: Optional[Dn] = None
    notificationId: Optional[NotificationId] = None
    alarmRaisedTime: Optional[DateTime] = None
    alarmChangedTime: Optional[DateTime] = None
    alarmClearedTime: Optional[DateTime] = None
    alarmType: Optional[AlarmType] = None
    probableCause: Optional[ProbableCause] = None
    specificProblem: Optional[SpecificProblem] = None
    perceivedSeverity: Optional[PerceivedSeverity] = None
    backedUpStatus: Optional[bool] = None
    backUpObject: Optional[Dn] = None
    trendIndication: Optional[TrendIndication] = None
    thresholdinfo: Optional[ThresholdInfo] = None
    correlatedNotifications: Optional[CorrelatedNotifications] = None
    stateChangeDefinition: Optional[AttributeValueChangeSet] = None
    monitoredAttributes: Optional[AttributeNameValuePairSet] = None
    proposedRepairActions: Optional[str] = None
    additionalText: Optional[str] = None
    additionalInformation: Optional[AttributeNameValuePairSet] = None
    rootCauseIndicator: Optional[bool] = None
    ackTime: Optional[DateTime] = None
    ackUserId: Optional[str] = None
    ackSystemId: Optional[str] = None
    ackState: Optional[AckState] = None
    clearUserId: Optional[str] = None
    clearSystemId: Optional[str] = None
    serviceUser: Optional[str] = None
    serviceProvider: Optional[str] = None
    securityAlarmDetector: Optional[str] = None


class AlarmListAlignmentRequirement(Enum):
    ALIGNMENT_REQUIRED = 'ALIGNMENT_REQUIRED'
    ALIGNMENT_NOT_REQUIRED = 'ALIGNMENT_NOT_REQUIRED'


class Error(BaseModel):
    errorInfo: Optional[str] = None


class ErrorResponse(BaseModel):
    error: Optional[Error] = None


class AlarmAckState(Enum):
    ALL_ALARMS = 'ALL_ALARMS'
    ALL_ACTIVE_ALARMS = 'ALL_ACTIVE_ALARMS'
    ALL_ACTIVE_AND_ACKNOWLEDGED_ALARMS = 'ALL_ACTIVE_AND_ACKNOWLEDGED_ALARMS'
    ALL_ACTIVE_AND_UNACKNOWLEDGED_ALARMS = 'ALL_ACTIVE_AND_UNACKNOWLEDGED_ALARMS'
    ALL_CLEARED_AND_UNACKNOWLEDGED_ALARMS = 'ALL_CLEARED_AND_UNACKNOWLEDGED_ALARMS'
    ALL_UNACKNOWLEDGED_ALARMS = 'ALL_UNACKNOWLEDGED_ALARMS'


class MergePatchAcknowledgeAlarm(BaseModel):
    ackUserId: str
    ackSystemId: Optional[str] = None
    ackState: AckState


class PerceivedSeverity1(Enum):
    CLEARED = 'CLEARED'


class MergePatchClearAlarm(BaseModel):
    clearUserId: str
    clearSystemId: Optional[str] = None
    perceivedSeverity: PerceivedSeverity1


class FailedAlarm(BaseModel):
    alarmId: AlarmId
    failureReason: str


class AlarmCount(BaseModel):
    criticalCount: int
    majorCount: int
    minorCount: int
    warningCount: int
    indeterminateCount: int
    clearedCount: int


class Comment(BaseModel):
    commentTime: Optional[DateTime] = None
    commentUserId: Optional[str] = None
    commentSystemId: Optional[str] = None
    commentText: Optional[str] = None


class Comments(BaseModel):
    __root__: Optional[Dict[str, Comment]] = None


class Subscription(BaseModel):
    consumerReference: Optional[Uri] = None
    timeTick: Optional[int] = None
    filter: Optional[Filter] = None


class CmNotificationTypes(Enum):
    notifyMOICreation = 'notifyMOICreation'
    notifyMOIDeletion = 'notifyMOIDeletion'
    notifyMOIAttributeValueChanges = 'notifyMOIAttributeValueChanges'
    notifyMOIChanges = 'notifyMOIChanges'


class SourceIndicator(Enum):
    RESOURCE_OPERATION = 'RESOURCE_OPERATION'
    MANAGEMENT_OPERATION = 'MANAGEMENT_OPERATION'
    SON_OPERATION = 'SON_OPERATION'
    UNKNOWN = 'UNKNOWN'


class ScopeType(Enum):
    BASE_ONLY = 'BASE_ONLY'
    BASE_NTH_LEVEL = 'BASE_NTH_LEVEL'
    BASE_SUBTREE = 'BASE_SUBTREE'
    BASE_ALL = 'BASE_ALL'


class Operation(Enum):
    add = 'add'
    remove = 'remove'
    replace = 'replace'


class Insert(Enum):
    before = 'before'
    after = 'after'


class PatchOperation(Enum):
    add = 'add'
    replace = 'replace'
    remove = 'remove'
    copy = 'copy'
    move = 'move'
    test = 'test'


class Resource1(BaseModel):
    id: str
    objectClass: Optional[str] = None
    objectInstance: Optional[Dn] = None
    attributes: Optional[Dict[str, Any]] = None


class RegistrationState(Enum):
    REGISTERED = 'REGISTERED'
    DEREGISTERED = 'DEREGISTERED'


class VnfParameter(BaseModel):
    vnfInstanceId: Optional[str] = None
    vnfdId: Optional[str] = None
    flavourId: Optional[str] = None
    autoScalable: Optional[bool] = None


class PeeParameter(BaseModel):
    siteIdentification: Optional[str] = None
    siteDescription: Optional[str] = None
    siteLatitude: Optional[Latitude] = None
    siteLongitude: Optional[Longitude] = None
    siteAltitude: Optional[float] = None
    equipmentType: Optional[str] = None
    environmentType: Optional[str] = None
    powerInterface: Optional[str] = None


class ThresholdDirection(Enum):
    UP = 'UP'
    DOWN = 'DOWN'
    UP_AND_DOWN = 'UP_AND_DOWN'


class ThresholdInfo1(BaseModel):
    performanceMetrics: Optional[List[str]] = None
    thresholdDirection: Optional[ThresholdDirection] = None
    thresholdValue: Optional[Union[int, Float]] = None
    hysteresis: Optional[Union[conint(ge=0), confloat(ge=0.0)]] = None


class NFType(Enum):
    NRF = 'NRF'
    UDM = 'UDM'
    AMF = 'AMF'
    SMF = 'SMF'
    AUSF = 'AUSF'
    NEF = 'NEF'
    PCF = 'PCF'
    SMSF = 'SMSF'
    NSSF = 'NSSF'
    UDR = 'UDR'
    LMF = 'LMF'
    GMLC = 'GMLC'
    field_5G_EIR = '5G_EIR'
    SEPP = 'SEPP'
    UPF = 'UPF'
    N3IWF = 'N3IWF'
    AF = 'AF'
    UDSF = 'UDSF'
    DN = 'DN'
    BSF = 'BSF'
    CHF = 'CHF'
    NWDAF = 'NWDAF'
    PCSCF = 'PCSCF'
    CBCF = 'CBCF'
    HSS = 'HSS'
    UCMF = 'UCMF'
    SOR_AF = 'SOR_AF'
    SPAF = 'SPAF'
    MME = 'MME'
    SCSAS = 'SCSAS'
    SCEF = 'SCEF'
    SCP = 'SCP'
    NSSAAF = 'NSSAAF'
    ICSCF = 'ICSCF'
    SCSCF = 'SCSCF'
    DRA = 'DRA'
    IMS_AS = 'IMS_AS'
    AANF = 'AANF'
    field_5G_DDNMF = '5G_DDNMF'
    NSACF = 'NSACF'
    MFAF = 'MFAF'
    EASDF = 'EASDF'
    DCCF = 'DCCF'
    MB_SMF = 'MB_SMF'
    TSCTSF = 'TSCTSF'
    ADRF = 'ADRF'
    GBA_BSF = 'GBA_BSF'
    CEF = 'CEF'
    MB_UPF = 'MB_UPF'
    NSWOF = 'NSWOF'
    PKMF = 'PKMF'
    MNPF = 'MNPF'
    SMS_GMSC = 'SMS_GMSC'
    SMS_IWMSC = 'SMS_IWMSC'
    MBSF = 'MBSF'
    MBSTF = 'MBSTF'
    PANF = 'PANF'
    TNGF = 'TNGF'
    W_AGF = 'W_AGF'
    TWIF = 'TWIF'
    TSN_AF = 'TSN_AF'


class OperationSemantics(Enum):
    REQUEST_RESPONSE = 'REQUEST_RESPONSE'
    SUBSCRIBE_NOTIFY = 'SUBSCRIBE_NOTIFY'


class SAP(BaseModel):
    host: Optional[HostAddr] = None
    port: Optional[int] = None


class NFServiceType(Enum):
    Namf_Communication = 'Namf_Communication'
    Namf_EventExposure = 'Namf_EventExposure'
    Namf_MT = 'Namf_MT'
    Namf_Location = 'Namf_Location'
    Nsmf_PDUSession = 'Nsmf_PDUSession'
    Nsmf_EventExposure = 'Nsmf_EventExposure'
    Others = 'Others'


class TransportProtocol1(Enum):
    TCP = 'TCP'


class TransportProtocol(BaseModel):
    __root__: Union[TransportProtocol1, str]


class ReportingMethod(Enum):
    FILE_BASED_LOC_SET_BY_PRODUCER = 'FILE_BASED_LOC_SET_BY_PRODUCER'
    FILE_BASED_LOC_SET_BY_CONSUMER = 'FILE_BASED_LOC_SET_BY_CONSUMER'
    STREAM_BASED = 'STREAM_BASED'


class SupportedPerfMetricGroup(BaseModel):
    performanceMetrics: Optional[List[str]] = None
    granularityPeriods: Optional[List[conint(ge=1)]] = None
    reportingMethods: Optional[List[ReportingMethod]] = None
    reportingPeriods: Optional[List[conint(ge=1)]] = None


class ReportingCtrl1(BaseModel):
    fileReportingPeriod: Optional[int] = None


class ReportingCtrl2(BaseModel):
    fileReportingPeriod: Optional[int] = None
    fileLocation: Optional[Uri] = None


class ReportingCtrl3(BaseModel):
    streamTarget: Optional[Uri] = None


class ReportingCtrl(BaseModel):
    __root__: Union[ReportingCtrl1, ReportingCtrl2, ReportingCtrl3]


class ScopeType1(Enum):
    BASE_ONLY = 'BASE_ONLY'
    BASE_ALL = 'BASE_ALL'
    BASE_NTH_LEVEL = 'BASE_NTH_LEVEL'
    BASE_SUBTREE = 'BASE_SUBTREE'


class Scope(BaseModel):
    scopeType: Optional[ScopeType1] = None
    scopeLevel: Optional[int] = None


class Status(Enum):
    NOT_STARTED = 'NOT_STARTED'
    RUNNING = 'RUNNING'
    FINSHED = 'FINSHED'
    FAILED = 'FAILED'
    PARTIALLY_FAILED = 'PARTIALLY_FAILED'
    CANCELLING = 'CANCELLING'
    CANCELLED = 'CANCELLED'


class ProcessMonitor(BaseModel):
    jobId: Optional[str] = None
    status: Optional[Status] = None
    progressPercentage: Optional[conint(ge=0, le=100)] = None
    progressStateInfo: Optional[str] = None
    resultStateInfo: Optional[str] = None
    startTime: Optional[DateTime] = None
    endTime: Optional[DateTime] = None
    timer: Optional[int] = None


class Status1(Enum):
    NOT_STARTED = 'NOT_STARTED'
    RUNNING = 'RUNNING'
    FINSHED = 'FINSHED'
    FAILED = 'FAILED'
    CANCELLING = 'CANCELLING'
    CANCELLED = 'CANCELLED'


class ResultStateInfoEnum(Enum):
    UNKNOWN = 'UNKNOWN'
    NO_STORAGE = 'NO_STORAGE'
    LOW_MEMROY = 'LOW_MEMROY'
    NO_CONNECTION_TO_REMOTE_SERVER = 'NO_CONNECTION_TO_REMOTE_SERVER'
    FILE_NOT_AVAILABLE = 'FILE_NOT_AVAILABLE'
    DNS_CANNOT_BE_RESOLVED = 'DNS_CANNOT_BE_RESOLVED'
    TIMER_EXPIRED = 'TIMER_EXPIRED'
    OTHER = 'OTHER'


class ResultStateInfo(BaseModel):
    __root__: Optional[ResultStateInfoEnum] = None


class FileDownloadJobProcessMonitor(BaseModel):
    jobId: Optional[str] = None
    status: Optional[Status1] = None
    progressPercentage: Optional[conint(ge=0, le=100)] = None
    progressStateInfo: Optional[str] = None
    resultStateInfo: Optional[Union[ResultStateInfo, str]] = None
    startTime: Optional[DateTime] = None
    endTime: Optional[DateTime] = None
    timer: Optional[int] = None


class IpAddr1(BaseModel):
    __root__: Union[Ipv4Addr, Ipv6Addr]


class ManagementDatum(Enum):
    COVERAGE = 'COVERAGE'
    CAPACITY = 'CAPACITY'
    ENERGY_EFFICIENCY = 'ENERGY_EFFICIENCY'
    MOBILITY = 'MOBILITY'
    ACCESSIBILITY = 'ACCESSIBILITY'


class ManagementData(BaseModel):
    __root__: Union[List[ManagementDatum], List[str]]


class NetworkDomain(Enum):
    CN = 'CN'
    RAN = 'RAN'


class CpUpType(Enum):
    CP = 'CP'
    UP = 'UP'


class SchedulingTime1(BaseModel):
    timeIntervals: Optional[List[TimeInterval]] = None


class DaysOfWeekEnum(Enum):
    MONDAY = 'MONDAY'
    TUESDAY = 'TUESDAY'
    WEDNESDAY = 'WEDNESDAY'
    THURSDAY = 'THURSDAY'
    FRIDAY = 'FRIDAY'
    SATURDAY = 'SATURDAY'
    SUNDAY = 'SUNDAY'


class SchedulingTime2(BaseModel):
    timeIntervals: Optional[List[TimeInterval]] = None
    daysOfWeek: Optional[List[DaysOfWeekEnum]] = None


class SchedulingTime3(BaseModel):
    timeIntervals: Optional[List[TimeInterval]] = None
    daysOfMonth: Optional[List[conint(ge=0, le=31)]] = None


class SchedulingTime(BaseModel):
    __root__: Union[TimeWindow, SchedulingTime1, SchedulingTime2, SchedulingTime3]


class NpnIdType(BaseModel):
    plmnId: Optional[PlmnId] = None
    cAGIdList: Optional[List[str]] = None
    nIDList: Optional[List[Nid]] = None


class SubNetworkAttr(BaseModel):
    dnPrefix: Optional[str] = None
    userLabel: Optional[str] = None
    userDefinedNetworkType: Optional[str] = None
    setOfMcc: Optional[List[Mcc]] = None
    priorityLabel: Optional[int] = None
    supportedPerfMetricGroups: Optional[List[SupportedPerfMetricGroup]] = None
    supportedTraceMetrics: Optional[List[str]] = None


class ManagedElementAttr(BaseModel):
    dnPrefix: Optional[str] = None
    managedElementTypeList: Optional[List[str]] = None
    userLabel: Optional[str] = None
    locationName: Optional[str] = None
    managedBy: Optional[DnList] = None
    vendorName: Optional[str] = None
    userDefinedState: Optional[str] = None
    swVersion: Optional[str] = None
    priorityLabel: Optional[int] = None
    supportedPerfMetricGroups: Optional[List[SupportedPerfMetricGroup]] = None
    supportedTraceMetrics: Optional[List[str]] = None


class JobTypeType(Enum):
    IMMEDIATE_MDT_ONLY = 'IMMEDIATE_MDT_ONLY'
    LOGGED_MDT_ONLY = 'LOGGED_MDT_ONLY'
    TRACE_ONLY = 'TRACE_ONLY'
    IMMEDIATE_MDT_AND_TRACE = 'IMMEDIATE_MDT AND TRACE'
    RLF_REPORT_ONLY = 'RLF_REPORT_ONLY'
    RCEF_REPORT_ONLY = 'RCEF_REPORT_ONLY'
    LOGGED_MBSFN_MDT = 'LOGGED_MBSFN_MDT'


class MSCServerInterface(Enum):
    A = 'A'
    Iu_CS = 'Iu-CS'
    Mc = 'Mc'
    MAP_G = 'MAP-G'
    MAP_B = 'MAP-B'
    MAP_E = 'MAP-E'
    MAP_F = 'MAP-F'
    MAP_D = 'MAP-D'
    MAP_C = 'MAP-C'
    CAP = 'CAP'


class MGWInterface(Enum):
    Mc = 'Mc'
    Nb_UP = 'Nb-UP'
    Iu_UP = 'Iu-UP'


class RNCInterface(Enum):
    Iu_CS = 'Iu-CS'
    Iu_PS = 'Iu-PS'
    Iur = 'Iur'
    Iub = 'Iub'
    Uu = 'Uu'


class SGSNInterface(Enum):
    Gb = 'Gb'
    Iu_PS = 'Iu-PS'
    Gn = 'Gn'
    MAP_Gr = 'MAP-Gr'
    MAP_Gd = 'MAP-Gd'
    MAP_Gf = 'MAP-Gf'
    Ge = 'Ge'
    Gs = 'Gs'
    S6d = 'S6d'
    S4 = 'S4'
    S3 = 'S3'
    S13 = 'S13'


class GGSNInterface(Enum):
    Gn = 'Gn'
    Gi = 'Gi'
    Gmb = 'Gmb'


class SCSCFInterface(Enum):
    Mw = 'Mw'
    Mg = 'Mg'
    Mr = 'Mr'
    Mi = 'Mi'


class PCSCFInterface(Enum):
    Gm = 'Gm'
    Mw = 'Mw'


class ICSCFInterface(Enum):
    Cx = 'Cx'
    Dx = 'Dx'
    Mg = 'Mg'
    Mw = 'Mw'


class MRFCInterface(Enum):
    Mp = 'Mp'
    Mr = 'Mr'


class MGCFInterface(Enum):
    Mg = 'Mg'
    Mj = 'Mj'
    Mn = 'Mn'


class IBCFInterface(Enum):
    Ix = 'Ix'
    Mx = 'Mx'


class ECSCFInterface(Enum):
    Mw = 'Mw'
    Ml = 'Ml'
    Mm = 'Mm'
    Mi_Mg = 'Mi/Mg'


class BGCFInterface(Enum):
    Mi = 'Mi'
    Mj = 'Mj'
    Mk = 'Mk'


class ASInterface(Enum):
    Dh = 'Dh'
    Sh = 'Sh'
    ISC = 'ISC'
    Ut = 'Ut'


class HSSInterface(Enum):
    MAP_C = 'MAP-C'
    MAP_D = 'MAP-D'
    Gc = 'Gc'
    Gr = 'Gr'
    Cx = 'Cx'
    S6d = 'S6d'
    S6a = 'S6a'
    Sh = 'Sh'
    N70 = 'N70'
    N71 = 'N71'
    NU1 = 'NU1'


class EIRInterface(Enum):
    MAP_F = 'MAP-F'
    S13 = 'S13'
    MAP_Gf = 'MAP-Gf'


class BMSCInterface(Enum):
    Gmb = 'Gmb'


class MMEInterface(Enum):
    S1_MME = 'S1-MME'
    S3 = 'S3'
    S6a = 'S6a'
    S10 = 'S10'
    S11 = 'S11'
    S13 = 'S13'


class SGWInterface(Enum):
    S4 = 'S4'
    S5 = 'S5'
    S8 = 'S8'
    S11 = 'S11'
    Gxc = 'Gxc'


class PDNGWInterface(Enum):
    S2a = 'S2a'
    S2b = 'S2b'
    S2c = 'S2c'
    S5 = 'S5'
    S6b = 'S6b'
    Gx = 'Gx'
    S8 = 'S8'
    SGi = 'SGi'


class ENBInterface(Enum):
    S1_MME = 'S1-MME'
    X2 = 'X2'


class EnGNBInterface(Enum):
    S1_MME = 'S1-MME'
    X2 = 'X2'
    Uu = 'Uu'
    F1_C = 'F1-C'
    E1 = 'E1'


class AMFInterface(Enum):
    N1 = 'N1'
    N2 = 'N2'
    N8 = 'N8'
    N11 = 'N11'
    N12 = 'N12'
    N14 = 'N14'
    N15 = 'N15'
    N20 = 'N20'
    N22 = 'N22'
    N26 = 'N26'


class AUSFInterface(Enum):
    N12 = 'N12'
    N13 = 'N13'


class NEFInterface(Enum):
    N29 = 'N29'
    N30 = 'N30'
    N33 = 'N33'


class NRFInterface(Enum):
    N27 = 'N27'


class NSSFInterface(Enum):
    N22 = 'N22'
    N31 = 'N31'


class PCFInterface(Enum):
    N5 = 'N5'
    N7 = 'N7'
    N15 = 'N15'


class SMFInterface(Enum):
    N4 = 'N4'
    N7 = 'N7'
    N10 = 'N10'
    N11 = 'N11'
    S5_C = 'S5-C'


class SMSFInterface(Enum):
    N20 = 'N20'
    N21 = 'N21'


class UDMInterface(Enum):
    N8 = 'N8'
    N10 = 'N10'
    N13 = 'N13'
    N21 = 'N21'
    NU1 = 'NU1'


class UPFInterface(Enum):
    N4 = 'N4'


class NgENBInterface(Enum):
    NG_C = 'NG-C'
    Xn_C = 'Xn-C'
    Uu = 'Uu'


class GNBCUCPInterface(Enum):
    NG_C = 'NG-C'
    Xn_C = 'Xn-C'
    Uu = 'Uu'
    F1_C = 'F1-C'
    E1 = 'E1'
    X2_C = 'X2-C'


class GNBCUUPInterface(Enum):
    E1 = 'E1'


class GNBDUInterface(Enum):
    F1_C = 'F1-C'


class ListOfInterfacesType(BaseModel):
    MSCServerInterfaces: Optional[List[MSCServerInterface]] = None
    MGWInterfaces: Optional[List[MGWInterface]] = None
    RNCInterfaces: Optional[List[RNCInterface]] = None
    SGSNInterfaces: Optional[List[SGSNInterface]] = None
    GGSNInterfaces: Optional[List[GGSNInterface]] = None
    S_CSCFInterfaces: Optional[List[SCSCFInterface]] = Field(
        None, alias='S-CSCFInterfaces'
    )
    P_CSCFInterfaces: Optional[List[PCSCFInterface]] = Field(
        None, alias='P-CSCFInterfaces'
    )
    I_CSCFInterfaces: Optional[List[ICSCFInterface]] = Field(
        None, alias='I-CSCFInterfaces'
    )
    MRFCInterfaces: Optional[List[MRFCInterface]] = None
    MGCFInterfaces: Optional[List[MGCFInterface]] = None
    IBCFInterfaces: Optional[List[IBCFInterface]] = None
    E_CSCFInterfaces: Optional[List[ECSCFInterface]] = Field(
        None, alias='E-CSCFInterfaces'
    )
    BGCFInterfaces: Optional[List[BGCFInterface]] = None
    ASInterfaces: Optional[List[ASInterface]] = None
    HSSInterfaces: Optional[List[HSSInterface]] = None
    EIRInterfaces: Optional[List[EIRInterface]] = None
    BM_SCInterfaces: Optional[List[BMSCInterface]] = Field(
        None, alias='BM-SCInterfaces'
    )
    MMEInterfaces: Optional[List[MMEInterface]] = None
    SGWInterfaces: Optional[List[SGWInterface]] = None
    PDN_GWInterfaces: Optional[List[PDNGWInterface]] = None
    eNBInterfaces: Optional[List[ENBInterface]] = None
    en_gNBInterfaces: Optional[List[EnGNBInterface]] = Field(
        None, alias='en-gNBInterfaces'
    )
    AMFInterfaces: Optional[List[AMFInterface]] = None
    AUSFInterfaces: Optional[List[AUSFInterface]] = None
    NEFInterfaces: Optional[List[NEFInterface]] = None
    NRFInterfaces: Optional[List[NRFInterface]] = None
    NSSFInterfaces: Optional[List[NSSFInterface]] = None
    PCFInterfaces: Optional[List[PCFInterface]] = None
    SMFInterfaces: Optional[List[SMFInterface]] = None
    SMSFInterfaces: Optional[List[SMSFInterface]] = None
    UDMInterfaces: Optional[List[UDMInterface]] = None
    UPFInterfaces: Optional[List[UPFInterface]] = None
    ng_eNBInterfaces: Optional[List[NgENBInterface]] = Field(
        None, alias='ng-eNBInterfaces'
    )
    gNB_CU_CPInterfaces: Optional[List[GNBCUCPInterface]] = Field(
        None, alias='gNB-CU-CPInterfaces'
    )
    gNB_CU_UPInterfaces: Optional[List[GNBCUUPInterface]] = Field(
        None, alias='gNB-CU-UPInterfaces'
    )
    gNB_DUInterfaces: Optional[List[GNBDUInterface]] = Field(
        None, alias='gNB-DUInterfaces'
    )


class ListOfNeTypesTypeEnum(Enum):
    MSC_SERVER = 'MSC_SERVER'
    SGSN = 'SGSN'
    MGW = 'MGW'
    GGSN = 'GGSN'
    RNC = 'RNC'
    BM_SC = 'BM_SC'
    MME = 'MME'
    SGW = 'SGW'
    PGW = 'PGW'
    ENB = 'ENB'
    EN_GNB = 'EN_GNB'
    GNB_CU_CP = 'GNB_CU_CP'
    GNB_CU_UP = 'GNB_CU_UP'
    GNB_DU = 'GNB_DU'
    AMF = 'AMF'
    PCF = 'PCF'
    SMF = 'SMF'
    UPF = 'UPF'
    AUSF = 'AUSF'
    SMSF = 'SMSF'
    HSS = 'HSS'
    UDM = 'UDM'


class ListOfNeTypesType(BaseModel):
    __root__: List[ListOfNeTypesTypeEnum] = Field(
        ...,
        description='The Network Element types where Trace Session activation is needed. See 3GPP TS 32.422 clause 5.4 for additional details.',
    )


class PlmnTargetType(BaseModel):
    mcc: Mcc
    mnc: Mnc


class TraceDepthType(Enum):
    MINIMUM = 'MINIMUM'
    MEDIUM = 'MEDIUM'
    MAXIMUM = 'MAXIMUM'
    VENDORMINIMUM = 'VENDORMINIMUM'
    VENDORMEDIUM = 'VENDORMEDIUM'
    VENDORMAXIMUM = 'VENDORMAXIMUM'


class TraceReferenceType(BaseModel):
    mcc: Mcc
    mnc: Mnc
    traceId: str


class TraceReportingFormatType(Enum):
    FILE_BASED = 'FILE-BASED'
    STREAMING = 'STREAMING'


class TargetIdType(Enum):
    IMSI = 'IMSI'
    IMEI = 'IMEI'
    IMEISV = 'IMEISV'
    PUBLIC_ID = 'PUBLIC_ID'
    UTRAN_CELL = 'UTRAN_CELL'
    E_UTRAN_CELL = 'E-UTRAN_CELL'
    NG_RAN_CELL = 'NG-RAN_CELL'
    eNB = 'eNB'
    RNC = 'RNC'
    gNB = 'gNB'
    SUPI = 'SUPI'


class TraceTargetType(BaseModel):
    TargetIdType: TargetIdType
    TargetIdValue: str


class MSCSERVEREnum(Enum):
    MO_MT_CALLS = 'MO_MT_CALLS'
    MO_MT_SMS = 'MO_MT_SMS'
    LU_IMSIattach_IMSIdetach = 'LU_IMSIattach_IMSIdetach'
    HANDOVER = 'HANDOVER'
    SS = 'SS'


class SGSNEnum(Enum):
    PDPcontext = 'PDPcontext'
    MO_MT_SMS = 'MO_MT_SMS'
    RAU_GPRSattach_GPRSdetach = 'RAU_GPRSattach_GPRSdetach'
    MBMScontext = 'MBMScontext'


class MGWEnum(Enum):
    CONTEXT = 'CONTEXT'


class GGSNEnum(Enum):
    PDPcontext = 'PDPcontext'
    MBMScontext = 'MBMScontext'


class IM(Enum):
    SIPsession_StandaloneTransaction = 'SIPsession_StandaloneTransaction'


class BMSCEnum(Enum):
    MBMSactivation = 'MBMSactivation'


class MMEEnum(Enum):
    UEinitiatedPDNconnectivityRequest = 'UEinitiatedPDNconnectivityRequest'
    ServiceRequest = 'ServiceRequest'
    InitialAttach_TAU_Detach = 'InitialAttach_TAU_Detach'
    UEinitiatedPDNdisconnection = 'UEinitiatedPDNdisconnection'
    BearerActivationModificationDeletion = 'BearerActivationModificationDeletion'
    Handover = 'Handover'


class SGWEnum(Enum):
    PDNconnectionCreation = 'PDNconnectionCreation'
    PDNconnectionTermination = 'PDNconnectionTermination'
    BearerActivationModificationDeletion = 'BearerActivationModificationDeletion'


class PGWEnum(Enum):
    PDNconnectionCreation = 'PDNconnectionCreation'
    PDNconnectionTermination = 'PDNconnectionTermination'
    BearerActivationModificationDeletion = 'BearerActivationModificationDeletion'


class AMFEnum(Enum):
    Registration = 'Registration'
    ServiceRequest = 'ServiceRequest'
    Handover = 'Handover'
    UEderegistration = 'UEderegistration'
    NetworkDeregistration = 'NetworkDeregistration'
    UEMobilityFromEPC = 'UEMobilityFromEPC'
    UEMobilityToEPC = 'UEMobilityToEPC'


class SMFEnum(Enum):
    PDUsessionEstablishment = 'PDUsessionEstablishment'
    PDUsessionModification = 'PDUsessionModification'
    PDUsessionRelease = 'PDUsessionRelease'
    PDUsessionUPactivationDeactivation = 'PDUsessionUPactivationDeactivation'
    MobilityBtw3gppAndN3gppTo5GC = 'MobilityBtw3gppAndN3gppTo5GC'
    MobilityFromEpc = 'MobilityFromEpc'


class PCFEnum(Enum):
    AMpolicy = 'AMpolicy'
    SMpolicy = 'SMpolicy'
    Authorization = 'Authorization'
    BDTpolicy = 'BDTpolicy'


class UPFEnum(Enum):
    N4Session = 'N4Session'


class AUSFEnum(Enum):
    UEauthentication = 'UEauthentication'


class NEFEnum(Enum):
    EventExposure = 'EventExposure'
    PFDmanagement = 'PFDmanagement'
    ParameterProvision = 'ParameterProvision'
    Trigger = 'Trigger'


class NRFEnum(Enum):
    NFmanagement = 'NFmanagement'
    NFdiscovery = 'NFdiscovery'


class NSSFEnum(Enum):
    NSSelection = 'NSSelection'
    NSSAI = 'NSSAI'


class SMSFEnum(Enum):
    SMservice = 'SMservice'


class UDMEnum(Enum):
    UEcontext = 'UEcontext'
    SubscriberData = 'SubscriberData'
    UEauthentication = 'UEauthentication'
    EventExposure = 'EventExposure'


class TriggeringEventsType(BaseModel):
    MSC_SERVER: Optional[List[MSCSERVEREnum]] = None
    SGSN: Optional[List[SGSNEnum]] = None
    MGW: Optional[List[MGWEnum]] = None
    GGSN: Optional[List[GGSNEnum]] = None
    IMS: Optional[List[IM]] = None
    BM_SC: Optional[List[BMSCEnum]] = None
    MME: Optional[List[MMEEnum]] = None
    SGW: Optional[List[SGWEnum]] = None
    PGW: Optional[List[PGWEnum]] = None
    AMF: Optional[List[AMFEnum]] = None
    SMF: Optional[List[SMFEnum]] = None
    PCF: Optional[List[PCFEnum]] = None
    UPF: Optional[List[UPFEnum]] = None
    AUSF: Optional[List[AUSFEnum]] = None
    NEF: Optional[List[NEFEnum]] = None
    NRF: Optional[List[NRFEnum]] = None
    NSSF: Optional[List[NSSFEnum]] = None
    SMSF: Optional[List[SMSFEnum]] = None
    UDM: Optional[List[UDMEnum]] = None


class AnonymizationOfMdtDataType(Enum):
    NO_IDENTITY = 'NO_IDENTITY'
    TAC_OF_IMEI = 'TAC_OF_IMEI'


class BeamLevelMeasurementType(BaseModel):
    __root__: bool = Field(
        ...,
        description='Determines whether beam level measurements shall be included in case of immediate MDT M1 measurement in NR. For additional details see 3GPP TS 32.422 clause 5.10.40.',
    )


class CollectionPeriodRrmLteType(Enum):
    field_100ms = '100ms'
    field_1000ms = '1000ms'
    field_1024ms = '1024ms'
    field_1280ms = '1280ms'
    field_2048ms = '2048ms'
    field_2560ms = '2560ms'
    field_5120ms = '5120ms'
    field_10000ms = '10000ms'
    field_10240ms = '10240ms'
    field_60000ms = '60000ms'


class CollectionPeriodM6LteType(Enum):
    field_1024ms = '1024ms'
    field_2048ms = '2048ms'
    field_5120ms = '5120ms'
    field_10240ms = '10240ms'


class CollectionPeriodM7LteType(BaseModel):
    __root__: conint(ge=1, le=60) = Field(
        ..., description='See details in 3GPP TS 32.422 clause 5.10.33.'
    )


class CollectionPeriodRrmUmtsType(Enum):
    field_100ms = '100ms'
    field_250ms = '250ms'
    field_500ms = '500ms'
    field_1000ms = '1000ms'
    field_2000ms = '2000ms'
    field_3000ms = '3000ms'
    field_4000ms = '4000ms'
    field_6000ms = '6000ms'


class CollectionPeriodRrmNrType(Enum):
    field_1024ms = '1024ms'
    field_2048ms = '2048ms'
    field_5120ms = '5120ms'
    field_10240ms = '10240ms'
    field_60000ms = '60000ms'


class CollectionPeriodM6NrType(Enum):
    field_120ms = '120ms'
    field_240ms = '240ms'
    field_480ms = '480ms'
    field_640ms = '640ms'
    field_1024ms = '1024ms'
    field_2048ms = '2048ms'
    field_5120ms = '5120ms'
    field_10240ms = '10240ms'
    field_20480ms = '20480ms'
    field_40960ms = '40960ms'
    field_1min = '1min'
    field_6min = '6min'
    field_12min = '12min'
    field_30min = '30min'


class CollectionPeriodM7NrType(BaseModel):
    __root__: conint(ge=1, le=60) = Field(
        ..., description='See details in 3GPP TS 32.422 clause 5.10.35.'
    )


class EventListForEventTriggeredMeasurementType(Enum):
    OUT_OF_COVERAGE = 'OUT_OF_COVERAGE'
    A2_EVENT = 'A2_EVENT'


class EventThreshold1F(BaseModel):
    CPICH_RSCP: Optional[conint(ge=-120, le=25)] = None
    CPICH_EcNo: Optional[conint(ge=-24, le=0)] = None
    PathLoss: Optional[conint(ge=30, le=165)] = None


class EventThresholdType(BaseModel):
    EventThresholdRSRP: Optional[
        Union[conint(ge=0, le=97), conint(ge=0, le=127)]
    ] = None
    EventThresholdRSRQ: Optional[
        Union[conint(ge=0, le=34), conint(ge=0, le=127)]
    ] = None
    EventThreshold1F: Optional[EventThreshold1F] = None
    EventThreshold1I: Optional[conint(ge=-120, le=25)] = None


class UMT(Enum):
    M1 = 'M1'
    M2 = 'M2'
    M3 = 'M3'
    M4 = 'M4'
    M5 = 'M5'
    M6_DL = 'M6_DL'
    M6_UL = 'M6_UL'
    M7_DL = 'M7_DL'
    M7_UL = 'M7_UL'


class LTEEnum(Enum):
    M1 = 'M1'
    M2 = 'M2'
    M3 = 'M3'
    M4 = 'M4'
    M5 = 'M5'
    M1_EVENT_TRIGGERED = 'M1_EVENT_TRIGGERED'
    M6 = 'M6'
    M7 = 'M7'
    M8 = 'M8'
    M9 = 'M9'


class NREnum(Enum):
    M1 = 'M1'
    M2 = 'M2'
    M3 = 'M3'
    M4 = 'M4'
    M5 = 'M5'
    M6 = 'M6'
    M7 = 'M7'
    M1_EVENT_TRIGGERED = 'M1_EVENT_TRIGGERED'
    M8 = 'M8'
    M9 = 'M9'


class ListOfMeasurementsType(BaseModel):
    UMTS: Optional[List[UMT]] = None
    LTE: Optional[List[LTEEnum]] = None
    NR: Optional[List[NREnum]] = None


class LoggingDurationType(Enum):
    field_600s = '600s'
    field_1200s = '1200s'
    field_2400s = '2400s'
    field_3600s = '3600s'
    field_5400s = '5400s'
    field_7200s = '7200s'


class UMT1(Enum):
    field_1_28s = '1.28s'
    field_2_56s = '2.56s'
    field_5_12s = '5.12s'
    field_10_24s = '10.24s'
    field_20_48s = '20.48s'
    field_30_72s = '30.72s'
    field_40_96s = '40.96s'
    field_61_44s = '61.44s'


class LTEEnum1(Enum):
    field_1_28s = '1.28s'
    field_2_56s = '2.56s'
    field_5_12s = '5.12s'
    field_10_24s = '10.24s'
    field_20_48s = '20.48s'
    field_30_72s = '30.72s'
    field_40_96s = '40.96s'
    field_61_44s = '61.44s'


class NREnum1(Enum):
    field_0_32s = '0.32s'
    field_0_64s = '0.64s'
    field_1_28s = '1.28s'
    field_2_56s = '2.56s'
    field_5_12s = '5.12s'
    field_10_24s = '10.24s'
    field_20_48s = '20.48s'
    field_30_72s = '30.72s'
    field_40_96s = '40.96s'
    field_61_44s = '61.44s'
    INFINITY = 'INFINITY'


class LoggingIntervalType(BaseModel):
    UMTS: Optional[List[UMT1]] = None
    LTE: Optional[List[LTEEnum1]] = None
    NR: Optional[List[NREnum1]] = None


class EventThresholdL1Type(BaseModel):
    RSRP: Optional[conint(ge=0, le=127)] = None
    RSRQ: Optional[conint(ge=0, le=127)] = None


class HysteresisL1Type(BaseModel):
    __root__: conint(ge=0, le=30) = Field(
        ..., description='See details in 3GPP TS 32.422 clause 5.10.Y.'
    )


class TimeToTriggerL1Type(Enum):
    field_0ms = '0ms'
    field_40ms = '40ms'
    field_64ms = '64ms'
    field_80ms = '80ms'
    field_100ms = '100ms'
    field_128ms = '128ms'
    field_160ms = '160ms'
    field_256ms = '256ms'
    field_320ms = '320ms'
    field_480ms = '480ms'
    field_512ms = '512ms'
    field_640ms = '640ms'
    field_1024ms = '1024ms'
    field_1280ms = '1280ms'
    field_2560ms = '2560ms'
    field_5120ms = '5120ms'


class MeasurementPeriodLteType(Enum):
    field_1024ms = '1024ms'
    field_2048ms = '2048ms'
    field_5120ms = '5120ms'
    field_10240ms = '10240ms'
    field_1min = '1min'


class MeasurementPeriodUmtsType(Enum):
    field_1000ms = '1000ms'
    field_2000ms = '2000ms'
    field_3000ms = '3000ms'
    field_4000ms = '4000ms'
    field_6000ms = '6000ms'
    field_8000ms = '8000ms'
    field_12000ms = '12000ms'
    field_16000ms = '16000ms'
    field_20000ms = '20000ms'
    field_24000ms = '24000ms'
    field_28000ms = '28000ms'
    field_32000ms = '32000ms'
    field_64000ms = '64000ms'


class MeasurementQuantityType(Enum):
    CPICH_EcNo = 'CPICH_EcNo'
    CPICH_RSCP = 'CPICH_RSCP'
    PathLoss = 'PathLoss'


class EventThresholdUphUmtsType(BaseModel):
    __root__: conint(ge=0, le=31) = Field(
        ..., description='See details in 3GPP TS 32.422 clause 5.10.A.'
    )


class PlmnListTypeItem(BaseModel):
    mcc: Mcc
    mnc: Mnc


class PlmnListType(BaseModel):
    __root__: List[PlmnListTypeItem] = Field(
        ..., description='See details in 3GPP TS 32.422 clause 5.10.24.', max_items=16
    )


class PositioningMethodType(Enum):
    GNSS = 'GNSS'
    E_CELL_ID = 'E-CELL_ID'


class ReportAmountType(Enum):
    field_1 = 1
    field_2 = 2
    field_4 = 4
    field_8 = 8
    field_16 = 16
    field_32 = 32
    field_64 = 64
    INFINITY = 'INFINITY'


class ReportAmountM1LTEType(Enum):
    field_1 = 1
    field_2 = 2
    field_4 = 4
    field_8 = 8
    field_16 = 16
    field_32 = 32
    field_64 = 64
    INFINITY = 'INFINITY'


class ReportAmountM4LTEType(Enum):
    field_1 = 1
    field_2 = 2
    field_4 = 4
    field_8 = 8
    field_16 = 16
    field_32 = 32
    field_64 = 64
    INFINITY = 'INFINITY'


class ReportAmountM5LTEType(Enum):
    field_1 = 1
    field_2 = 2
    field_4 = 4
    field_8 = 8
    field_16 = 16
    field_32 = 32
    field_64 = 64
    INFINITY = 'INFINITY'


class ReportAmountM6LTEType(Enum):
    field_1 = 1
    field_2 = 2
    field_4 = 4
    field_8 = 8
    field_16 = 16
    field_32 = 32
    field_64 = 64
    INFINITY = 'INFINITY'


class ReportAmountM7LTEType(Enum):
    field_1 = 1
    field_2 = 2
    field_4 = 4
    field_8 = 8
    field_16 = 16
    field_32 = 32
    field_64 = 64
    INFINITY = 'INFINITY'


class ReportAmountM1NRType(Enum):
    field_1 = 1
    field_2 = 2
    field_4 = 4
    field_8 = 8
    field_16 = 16
    field_32 = 32
    field_64 = 64
    INFINITY = 'INFINITY'


class ReportAmountM4NRType(Enum):
    field_1 = 1
    field_2 = 2
    field_4 = 4
    field_8 = 8
    field_16 = 16
    field_32 = 32
    field_64 = 64
    INFINITY = 'INFINITY'


class ReportAmountM5NRType(Enum):
    field_1 = 1
    field_2 = 2
    field_4 = 4
    field_8 = 8
    field_16 = 16
    field_32 = 32
    field_64 = 64
    INFINITY = 'INFINITY'


class ReportAmountM6NRType(Enum):
    field_1 = 1
    field_2 = 2
    field_4 = 4
    field_8 = 8
    field_16 = 16
    field_32 = 32
    field_64 = 64
    INFINITY = 'INFINITY'


class ReportAmountM7NRType(Enum):
    field_1 = 1
    field_2 = 2
    field_4 = 4
    field_8 = 8
    field_16 = 16
    field_32 = 32
    field_64 = 64
    INFINITY = 'INFINITY'


class ReportingTriggerTypeEnum(Enum):
    PERIODICAL = 'PERIODICAL'
    A2_FOR_LTE_NR = 'A2_FOR_LTE_NR'
    field_1F_FOR_UMTS = '1F_FOR_UMTS'
    field_1I_FOR_UMTS_MCPS_TDD = '1I_FOR_UMTS_MCPS_TDD'
    A2_TRIGGERED_PERIODIC_FOR_LTE_NR = 'A2_TRIGGERED_PERIODIC_FOR_LTE_NR'
    ALL_CONFIGURED_RRM_FOR_LTE_NR = 'ALL_CONFIGURED_RRM_FOR_LTE_NR'
    ALL_CONFIGURED_RRM_FOR_UMTS = 'ALL_CONFIGURED_RRM_FOR_UMTS'


class ReportingTriggerType(BaseModel):
    __root__: List[ReportingTriggerTypeEnum] = Field(
        ..., description='See details in 3GPP TS 32.422 clause 5.10.4.'
    )


class UMT2(Enum):
    field_250ms = '250ms'
    field_500ms = '500ms'
    field_1000ms = '1000ms'
    field_2000ms = '2000ms'
    field_3000ms = '3000ms'
    field_4000ms = '4000ms'
    field_6000ms = '6000ms'
    field_8000ms = '8000ms'
    field_12000ms = '12000ms'
    field_16000ms = '16000ms'
    field_20000ms = '20000ms'
    field_24000ms = '24000ms'
    field_28000ms = '28000ms'
    field_32000ms = '32000ms'
    field_64000ms = '64000ms'


class LTEEnum2(Enum):
    field_120ms = '120ms'
    field_240ms = '240ms'
    field_480ms = '480ms'
    field_640ms = '640ms'
    field_1024ms = '1024ms'
    field_2048ms = '2048ms'
    field_5120ms = '5120ms'
    field_10240ms = '10240ms'
    field_60000ms = '60000ms'
    field_360000ms = '360000ms'
    field_720000ms = '720000ms'
    field_1800000ms = '1800000ms'
    field_3600000ms = '3600000ms'


class NREnum2(Enum):
    field_120ms = '120ms'
    field_240ms = '240ms'
    field_480ms = '480ms'
    field_640ms = '640ms'
    field_1024ms = '1024ms'
    field_2048ms = '2048ms'
    field_5120ms = '5120ms'
    field_10240ms = '10240ms'
    field_20480ms = '20480ms'
    field_40960ms = '40960ms'
    field_60000ms = '60000ms'
    field_360000ms = '360000ms'
    field_720000ms = '720000ms'
    field_1800000ms = '1800000ms'


class ReportIntervalType(BaseModel):
    UMTS: Optional[List[UMT2]] = None
    LTE: Optional[List[LTEEnum2]] = None
    NR: Optional[List[NREnum2]] = None


class ReportTypeType(Enum):
    PERIODICAL = 'PERIODICAL'
    EVENT_TRIGGERED = 'EVENT_TRIGGERED'


class SensorInformationTypeEnum(Enum):
    BAROMETRIC_PRESSURE = 'BAROMETRIC_PRESSURE'
    UE_SPEED = 'UE_SPEED'
    UE_ORIENTATION = 'UE_ORIENTATION'


class SensorInformationType(BaseModel):
    __root__: List[SensorInformationTypeEnum] = Field(
        ..., description='See details in 3GPP TS 32.422 clause 5.10.29.'
    )


class TraceCollectionEntityIdType(BaseModel):
    __root__: int = Field(
        ...,
        description='See details in 3GPP TS 32.422 clause 5.10.11. Only TCE Id value may be sent over the air to the UE being configured for Logged MDT.',
    )


class ExcessPacketDelayThresholdValue(Enum):
    field_0_25MS = '0.25MS'
    field_0_5MS = '0.5MS'
    field_1MS = '1MS'
    field_2MS = '2MS'
    field_4MS = '4MS'
    field_5MS = '5MS'
    field_10MS = '10MS'
    field_20MS = '20MS'
    field_30MS = '30MS'
    field_40MS = '40MS'
    field_50MS = '50MS'
    field_60MS = '60MS'
    field_70MS = '70MS'
    field_80MS = '80MS'
    field_90MS = '90MS'
    field_100MS = '100MS'
    field_150MS = '150MS'
    field_300MS = '300MS'
    field_500MS = '500MS'


class ExcessPacketDelayThresholdType(BaseModel):
    fiveQIValue: Optional[int] = None
    excessPacketDelayThresholdValue: Optional[ExcessPacketDelayThresholdValue] = None


class ExcessPacketDelayThresholdsType(BaseModel):
    __root__: List[ExcessPacketDelayThresholdType] = Field(
        ...,
        description='Array of type excessPacketDelayThreshold-Type.',
        max_items=255,
        min_items=0,
    )


class TraceConfigType(BaseModel):
    listOfInterfaces: Optional[ListOfInterfacesType] = None
    listOfNeTypes: Optional[ListOfNeTypesType] = None
    traceDepth: Optional[TraceDepthType] = None
    triggeringEvents: Optional[TriggeringEventsType] = None


class ImmediateMDTConfigType(BaseModel):
    listOfMeasurements: Optional[ListOfMeasurementsType] = None
    reportingTrigger: Optional[ReportingTriggerType] = None
    reportAmount: Optional[ReportAmountType] = None
    reportAmountM1LTE: Optional[ReportAmountM1LTEType] = None
    reportAmountM4LTE: Optional[ReportAmountM4LTEType] = None
    reportAmountM5LTE: Optional[ReportAmountM5LTEType] = None
    reportAmountM6LTE: Optional[ReportAmountM6LTEType] = None
    reportAmountM7LTE: Optional[ReportAmountM7LTEType] = None
    reportAmountM1NR: Optional[ReportAmountM1NRType] = None
    reportAmountM4NR: Optional[ReportAmountM4NRType] = None
    reportAmountM5NR: Optional[ReportAmountM5NRType] = None
    reportAmountM6NR: Optional[ReportAmountM6NRType] = None
    reportAmountM7NR: Optional[ReportAmountM7NRType] = None
    reportInterval: Optional[ReportIntervalType] = None
    eventThreshold: Optional[EventThresholdType] = None
    collectionPeriodRrmLte: Optional[CollectionPeriodRrmLteType] = None
    collectionPeriodM6Lte: Optional[CollectionPeriodM6LteType] = None
    collectionPeriodM7Lte: Optional[CollectionPeriodM7LteType] = None
    collectionPeriodRrmUmts: Optional[CollectionPeriodRrmUmtsType] = None
    collectionPeriodRrmNr: Optional[CollectionPeriodRrmNrType] = None
    collectionPeriodM6Nr: Optional[CollectionPeriodM6NrType] = None
    collectionPeriodM7Nr: Optional[CollectionPeriodM7NrType] = None
    eventThresholdUphUmts: Optional[EventThresholdUphUmtsType] = None
    measurementPeriodUmts: Optional[MeasurementPeriodUmtsType] = None
    measurementPeriodLte: Optional[MeasurementPeriodLteType] = None
    measurementQuantity: Optional[MeasurementQuantityType] = None
    beamLevelMeasurement: Optional[BeamLevelMeasurementType] = None
    positioningMethod: Optional[PositioningMethodType] = None
    excessPacketDelayThresholds: Optional[ExcessPacketDelayThresholdsType] = None


class Tai(BaseModel):
    mcc: Optional[Mcc] = None
    mnc: Optional[Mnc] = None
    tac: Optional[Tac] = None


class FreqInfo(BaseModel):
    arfcn: Optional[int] = None
    freqBands: Optional[List[int]] = None


class MbsfnArea(BaseModel):
    mbsfnAreaId: Optional[conint(ge=1)] = None
    earfcn: Optional[conint(ge=1)] = None


class ManagedFunctionAttr(BaseModel):
    userLabel: Optional[str] = None
    vnfParametersList: Optional[List[VnfParameter]] = None
    peeParametersList: Optional[List[PeeParameter]] = None
    priorityLabel: Optional[int] = None
    supportedPerfMetricGroups: Optional[List[SupportedPerfMetricGroup]] = None
    supportedTraceMetrics: Optional[List[str]] = None


class EPRPAttr(BaseModel):
    userLabel: Optional[str] = None
    farEndEntity: Optional[str] = None
    supportedPerfMetricGroups: Optional[List[SupportedPerfMetricGroup]] = None


class Attributes(BaseModel):
    vsDataType: Optional[str] = None
    vsDataFormatVersion: Optional[str] = None
    vsData: Optional[Any] = None


class Attributes2(BaseModel):
    userLabel: Optional[str] = None
    managedElements: Optional[DnList] = None
    vendorName: Optional[str] = None
    userDefinedState: Optional[str] = None
    locationName: Optional[str] = None
    swVersion: Optional[str] = None


class Attributes3(BaseModel):
    systemDN: Optional[Dn] = None


class Attributes4(BaseModel):
    dnPrefix: Optional[str] = None


class Attributes5(BaseModel):
    administrativeState: Optional[AdministrativeState] = None
    operationalState: Optional[OperationalState] = None
    jobId: Optional[str] = None
    performanceMetrics: Optional[List[str]] = None
    granularityPeriod: Optional[conint(ge=1)] = None
    objectInstances: Optional[DnList] = None
    rootObjectInstances: Optional[DnList] = None
    conditionMonitorRef: Optional[Dn] = None
    schedulerRef: Optional[Dn] = None
    reportingCtrl: Optional[ReportingCtrl] = None


class Attributes6(BaseModel):
    administrativeState: Optional[AdministrativeState] = None
    operationalState: Optional[OperationalState] = None
    thresholdInfoList: Optional[List[ThresholdInfo1]] = None
    monitorGranularityPeriod: Optional[conint(ge=1)] = None
    objectInstances: Optional[DnList] = None
    rootObjectInstances: Optional[DnList] = None


class Attributes8(BaseModel):
    heartbeatNtfPeriod: Optional[conint(ge=0)] = None
    triggerHeartbeatNtf: Optional[bool] = None


class DataScope(Enum):
    SNSSAI = 'SNSSAI'
    field_5QI = '5QI'
    PLMN = 'PLMN'


class Attributes10(BaseModel):
    administrativeState: Optional[AdministrativeState] = None
    operationalState: Optional[OperationalState] = None
    numOfAlarmRecords: Optional[int] = None
    lastModification: Optional[DateTime] = None
    alarmRecords: Optional[Dict[str, AlarmRecord]] = Field(
        None,
        description='This resource represents a map of alarm records. The alarmIds are used as keys in the map.',
    )


class CancelJob(Enum):
    True_ = True
    False_ = False


class Attributes11(BaseModel):
    fileLocation: Optional[str] = None
    notificationRecipientAddress: Optional[Uri] = None
    cancelJob: Optional[CancelJob] = None
    jobMonitor: Optional[FileDownloadJobProcessMonitor] = None


class FileDataType(Enum):
    PERFORMANCE = 'PERFORMANCE'
    TRACE = 'TRACE'
    ANALYTICS = 'ANALYTICS'
    PROPRIETARY = 'PROPRIETARY'


class Attributes13(BaseModel):
    fileLocation: Optional[Uri] = None
    fileCompression: Optional[str] = None
    fileSize: Optional[int] = None
    fileDataType: Optional[FileDataType] = None
    fileFormat: Optional[str] = None
    fileReadyTime: Optional[DateTime] = None
    fileExpirationTime: Optional[DateTime] = None
    fileContent: Optional[str] = None
    jobRef: Optional[Dn] = None
    jobId: Optional[str] = None


class MnsType(Enum):
    ProvMnS = 'ProvMnS'
    FaultSupervisionMnS = 'FaultSupervisionMnS'
    StreamingDataReportingMnS = 'StreamingDataReportingMnS'
    FileDataReportingMnS = 'FileDataReportingMnS'


class Attributes14(BaseModel):
    schedulingTimes: Optional[List[SchedulingTime]] = Field(None, min_items=1)
    schedulerStatus: Optional[bool] = None


class Attributes15(BaseModel):
    condition: Optional[str] = None
    conditionStatus: Optional[bool] = None


class NotificationProtocol(Enum):
    HTTP = 'HTTP'
    HTTP_VES_ENCAPS = 'HTTP_VES_ENCAPS'


class ServiceType(Enum):
    DASH = 'DASH'
    MTSI = 'MTSI'
    VR = 'VR'


class AvailableRANqoEMetric(Enum):
    APPLAYERBUFFERLEVELLIST = 'APPLAYERBUFFERLEVELLIST'
    PLAYOUTDELAYFORMEDIA_STARTUP = 'PLAYOUTDELAYFORMEDIA_STARTUP'


class GnbId(BaseModel):
    __root__: conint(ge=0, le=4294967295)


class GnbIdLength(BaseModel):
    __root__: conint(ge=22, le=32)


class GnbName(BaseModel):
    __root__: constr(max_length=150)


class GnbDuId(BaseModel):
    __root__: conint(ge=0, le=68719476735)


class GnbCuUpId(BaseModel):
    __root__: conint(ge=0, le=68719476735)


class Sst(BaseModel):
    __root__: conint(ge=0, le=255)


class PlmnIdList(BaseModel):
    __root__: List[PlmnId]


class CagId(BaseModel):
    __root__: str


class Nid1(BaseModel):
    __root__: str


class NpnIdentity1(BaseModel):
    plmnId: PlmnId
    cagidList: List[CagId] = Field()
    @validator('cagidList')
    def validate_min_items_cagidList(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value
    @validator('cagidList')
    def validate_max_items_cagidList(cls, value):
        max_items_required = 12
        if len(value) > max_items_required:
            raise ValidationError(f'Minimum {max_items_required} items required in my_list')
        return value
    nidList: Optional[List[Nid1]] = Field(None, max_items=12, min_items=1)


class NpnIdentity2(BaseModel):
    plmnId: PlmnId
    cagidList: Optional[List[CagId]] = Field(None, max_items=12, min_items=1)
    nidList: List[Nid1] = Field()
    @validator('nidList')
    def validate_min_items_nidList(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value
    @validator('nidList')
    def validate_max_items_nidList(cls, value):
        max_items_required = 12
        if len(value) > max_items_required:
            raise ValidationError(f'Minimum {max_items_required} items required in my_list')
        return value


class NpnIdentity(BaseModel):
    __root__: Union[NpnIdentity1, NpnIdentity2]


class NpnIdentityList(BaseModel):
    __root__: List[NpnIdentity]


class GGnbId(BaseModel):
    __root__: constr(
        regex=r'^[0-9]{3}[0-9]{2,3}-(22|23|24|25|26|27|28|29|30|31|32)-[0-9]{1,10}'
    )


class GEnbId(BaseModel):
    __root__: constr(regex=r'^[0-9]{3}[0-9]{2,3}-(18|20|21|22)-[0-9]{1,7}')


class GGnbIdList(BaseModel):
    __root__: List[GGnbId]


class GEnbIdList(BaseModel):
    __root__: List[GEnbId]


class NrPci(BaseModel):
    __root__: conint(le=503)


class NrTac(BaseModel):
    __root__: Tac


class NrTacList(BaseModel):
    __root__: List[Tac]


class IntraRatEsActivationOriginalCellLoadParameters(BaseModel):
    loadThreshold: Optional[int] = None
    timeDuration: Optional[int] = None


class IntraRatEsActivationCandidateCellsLoadParameters(BaseModel):
    loadThreshold: Optional[int] = None
    timeDuration: Optional[int] = None


class IntraRatEsDeactivationCandidateCellsLoadParameters(BaseModel):
    loadThreshold: Optional[int] = None
    timeDuration: Optional[int] = None


class EsNotAllowedTimePeriod(BaseModel):
    startTimeandendTime: Optional[str] = None
    periodOfDay: Optional[str] = None
    daysOfWeekList: Optional[str] = None
    listoftimeperiods: Optional[str] = None


class InterRatEsActivationOriginalCellParameters(BaseModel):
    loadThreshold: Optional[int] = None
    timeDuration: Optional[int] = None


class InterRatEsActivationCandidateCellParameters(BaseModel):
    loadThreshold: Optional[int] = None
    timeDuration: Optional[int] = None


class InterRatEsDeactivationCandidateCellParameters(BaseModel):
    loadThreshold: Optional[int] = None
    timeDuration: Optional[int] = None


class UeAccProbabilityDist(BaseModel):
    targetProbability: Optional[int] = None
    numberofpreamblessent: Optional[int] = None


class UeAccDelayProbabilityDist(BaseModel):
    targetProbability: Optional[int] = None
    accessdelay: Optional[int] = None


class NRPciList(BaseModel):
    __root__: List[NrPci] = Field()
    @validator('__root__')
    def validate_min_items___root__(cls, value):
        min_items_required = 0
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value
    @validator('__root__')
    def validate_max_items___root__(cls, value):
        max_items_required = 1007
        if len(value) > max_items_required:
            raise ValidationError(f'Minimum {max_items_required} items required in my_list')
        return value


class CSonPciList(BaseModel):
    __root__: List[NrPci] = Field()
    @validator('__root__')
    def validate_min_items___root__(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value
    @validator('__root__')
    def validate_max_items___root__(cls, value):
        max_items_required = 100
        if len(value) > max_items_required:
            raise ValidationError(f'Minimum {max_items_required} items required in my_list')
        return value


class MaximumDeviationHoTrigger(BaseModel):
    __root__: conint(ge=-20, le=20)


class MaximumDeviationHoTriggerLow(BaseModel):
    __root__: conint(ge=-20, le=20)


class MaximumDeviationHoTriggerHigh(BaseModel):
    __root__: conint(ge=-20, le=20)


class MinimumTimeBetweenHoTriggerChange(BaseModel):
    __root__: conint(ge=0, le=604800)


class TstoreUEcntxt(BaseModel):
    __root__: conint(ge=0, le=1023)


class CellState(Enum):
    IDLE = 'IDLE'
    INACTIVE = 'INACTIVE'
    ACTIVE = 'ACTIVE'


class CyclicPrefix(Enum):
    field_15 = '15'
    field_30 = '30'
    field_60 = '60'
    field_120 = '120'


class TxDirection(Enum):
    DL = 'DL'
    UL = 'UL'
    DL_AND_UL = 'DL_AND_UL'


class BwpContext(Enum):
    DL = 'DL'
    UL = 'UL'
    SUL = 'SUL'


class IsInitialBwp(Enum):
    INITIAL = 'INITIAL'
    OTHER = 'OTHER'
    SUL = 'SUL'


class IsESCoveredBy(Enum):
    False_ = False
    PARTIAL = 'PARTIAL'
    FULL = 'FULL'


class AddressWithVlan(BaseModel):
    ipv4Address: Optional[Ipv4Addr] = None
    ipv6Address: Optional[Ipv6Addr] = None
    vlanId: Optional[conint(ge=0, le=4096)] = None


class LocalAddress(BaseModel):
    addressWithVlan: Optional[AddressWithVlan] = None
    port: Optional[conint(ge=0, le=65535)] = None


class RemoteAddress(BaseModel):
    ipv4Address: Optional[Ipv4Addr] = None
    ipv6Address: Optional[Ipv6Addr] = None


class CellIndividualOffset(BaseModel):
    rsrpOffsetSSB: Optional[int] = None
    rsrqOffsetSSB: Optional[int] = None
    sinrOffsetSSB: Optional[int] = None
    rsrpOffsetCSI_RS: Optional[int] = Field(None, alias='rsrpOffsetCSI-RS')
    rsrqOffsetCSI_RS: Optional[int] = Field(None, alias='rsrqOffsetCSI-RS')
    sinrOffsetCSI_RS: Optional[int] = Field(None, alias='sinrOffsetCSI-RS')


class QOffsetRange(Enum):
    integer__24 = -24
    integer__22 = -22
    integer__20 = -20
    integer__18 = -18
    integer__16 = -16
    integer__14 = -14
    integer__12 = -12
    integer__10 = -10
    integer__8 = -8
    integer__6 = -6
    integer__5 = -5
    integer__4 = -4
    integer__3 = -3
    integer__2 = -2
    integer__1 = -1
    integer_0 = 0
    integer_24 = 24
    integer_22 = 22
    integer_20 = 20
    integer_18 = 18
    integer_16 = 16
    integer_14 = 14
    integer_12 = 12
    integer_10 = 10
    integer_8 = 8
    integer_6 = 6
    integer_5 = 5
    integer_4 = 4
    integer_3 = 3
    integer_2 = 2
    integer_1 = 1


class QOffsetRangeList(BaseModel):
    rsrpOffsetSSB: Optional[QOffsetRange] = None
    rsrqOffsetSSB: Optional[QOffsetRange] = None
    sinrOffsetSSB: Optional[QOffsetRange] = None
    rsrpOffsetCSI_RS: Optional[QOffsetRange] = Field(None, alias='rsrpOffsetCSI-RS')
    rsrqOffsetCSI_RS: Optional[QOffsetRange] = Field(None, alias='rsrqOffsetCSI-RS')
    sinrOffsetCSI_RS: Optional[QOffsetRange] = Field(None, alias='sinrOffsetCSI-RS')


class QOffsetFreq(BaseModel):
    __root__: float


class TReselectionNRSf(Enum):
    integer_25 = 25
    integer_50 = 50
    integer_75 = 75
    integer_100 = 100


class SsbPeriodicity(Enum):
    integer_5 = 5
    integer_10 = 10
    integer_20 = 20
    integer_40 = 40
    integer_80 = 80
    integer_160 = 160


class SsbDuration(Enum):
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5


class SsbSubCarrierSpacing(Enum):
    integer_15 = 15
    integer_30 = 30
    integer_120 = 120
    integer_240 = 240


class CoverageShape(BaseModel):
    __root__: conint(le=65535)


class DigitalTilt(BaseModel):
    __root__: conint(ge=-900, le=900)


class DigitalAzimuth(BaseModel):
    __root__: conint(ge=-1800, le=1800)


class RSSetId(BaseModel):
    __root__: conint(le=4194303)


class RSSetType(Enum):
    RS1 = 'RS1'
    RS2 = 'RS2'


class FrequencyDomainPara(BaseModel):
    rimRSSubcarrierSpacing: Optional[int] = None
    rIMRSBandwidth: Optional[int] = None
    nrofGlobalRIMRSFrequencyCandidates: Optional[int] = None
    rimRSCommonCarrierReferencePoint: Optional[int] = None
    rimRSStartingFrequencyOffsetIdList: Optional[List[int]] = None


class EnableEnoughNotEnoughIndication(Enum):
    ENABLE = 'ENABLE'
    DISABLE = 'DISABLE'


class SequenceDomainPara(BaseModel):
    nrofRIMRSSequenceCandidatesofRS1: Optional[int] = None
    rimRSScrambleIdListofRS1: Optional[List[int]] = None
    nrofRIMRSSequenceCandidatesofRS2: Optional[int] = None
    rimRSScrambleIdListofRS2: Optional[List[int]] = None
    enableEnoughNotEnoughIndication: Optional[EnableEnoughNotEnoughIndication] = None
    RIMRSScrambleTimerMultiplier: Optional[int] = None
    RIMRSScrambleTimerOffset: Optional[int] = None


class DlULSwitchingPeriod1(Enum):
    MS0P5 = 'MS0P5'
    MS0P625 = 'MS0P625'
    MS1 = 'MS1'
    MS1P25 = 'MS1P25'
    MS2 = 'MS2'
    MS2P5 = 'MS2P5'
    MS3 = 'MS3'
    MS4 = 'MS4'
    MS5 = 'MS5'
    MS10 = 'MS10'
    MS20 = 'MS20'


class DlULSwitchingPeriod2(Enum):
    MS0P5 = 'MS0P5'
    MS0P625 = 'MS0P625'
    MS1 = 'MS1'
    MS1P25 = 'MS1P25'
    MS2 = 'MS2'
    MS2P5 = 'MS2P5'
    MS3 = 'MS3'
    MS4 = 'MS4'
    MS5 = 'MS5'
    MS10 = 'MS10'
    MS20 = 'MS20'


class EnablenearfarIndicationRS1(Enum):
    ENABLE = 'ENABLE'
    DISABLE = 'DISABLE'


class EnablenearfarIndicationRS2(Enum):
    ENABLE = 'ENABLE'
    DISABLE = 'DISABLE'


class TimeDomainPara(BaseModel):
    dlULSwitchingPeriod1: Optional[DlULSwitchingPeriod1] = None
    symbolOffsetOfReferencePoint1: Optional[int] = None
    dlULSwitchingPeriod2: Optional[DlULSwitchingPeriod2] = None
    symbolOffsetOfReferencePoint2: Optional[int] = None
    totalnrofSetIdofRS1: Optional[int] = None
    totalnrofSetIdofRS2: Optional[int] = None
    nrofConsecutiveRIMRS1: Optional[int] = None
    nrofConsecutiveRIMRS2: Optional[int] = None
    consecutiveRIMRS1List: Optional[List[int]] = None
    consecutiveRIMRS2List: Optional[List[int]] = None
    enablenearfarIndicationRS1: Optional[EnablenearfarIndicationRS1] = None
    enablenearfarIndicationRS2: Optional[EnablenearfarIndicationRS2] = None


class FunctionalityOfRIMRS(Enum):
    RS1 = 'RS1'
    RS2 = 'RS2'
    RS1_FOR_ENOUGH_MITIGATION = 'RS1_FOR_ENOUGH_MITIGATION'
    RS1_FOR_NOT_ENOUGH_MITIGATION = 'RS1_FOR_NOT_ENOUGH_MITIGATION'


class RimRSReportInfo(BaseModel):
    detectedSetID: Optional[int] = None
    propagationDelay: Optional[int] = None
    functionalityOfRIMRS: Optional[FunctionalityOfRIMRS] = None


class ReportIndicator(Enum):
    ENABLE = 'ENABLE'
    DISABLE = 'DISABLE'


class RimRSReportConf(BaseModel):
    reportIndicator: Optional[ReportIndicator] = None
    reportInterval: Optional[int] = None
    nrofRIMRSReportInfo: Optional[int] = None
    maxPropagationDelay: Optional[int] = None
    rimRSReportInfoList: Optional[List[RimRSReportInfo]] = None


class TceMappingInfo(BaseModel):
    TceIPAddress: Optional[Union[Ipv4Addr, Ipv6Addr]] = None
    TceID: Optional[int] = None
    PlmnTarget: Optional[PlmnId] = None


class TceMappingInfoList(BaseModel):
    __root__: List[TceMappingInfo]


class ResourceType(Enum):
    PRB = 'PRB'
    PRB_UL = 'PRB_UL'
    PRB_DL = 'PRB_DL'
    RRC_CONNECTED_USERS = 'RRC_CONNECTED_USERS'
    DRB = 'DRB'


class ParameterRange(BaseModel):
    maxValue: Optional[int] = None
    minValue: Optional[int] = None


class NTNTAClist(BaseModel):
    __root__: List[NrTac]


class PositionVelocity(BaseModel):
    positionX: Optional[conint(ge=0, le=604800)] = None
    positionY: Optional[conint(ge=0, le=604800)] = None
    positionZ: Optional[conint(ge=0, le=604800)] = None
    velocityVX: Optional[conint(ge=-131072, le=131071)] = None
    velocityVY: Optional[conint(ge=-131072, le=131071)] = None
    velocityVZ: Optional[conint(ge=-131072, le=131071)] = None


class Orbital(BaseModel):
    semiMajorAxis: Optional[conint(ge=0, le=8589934591)] = None
    eccentricity: Optional[conint(ge=-524288, le=524287)] = None
    periapsis: Optional[conint(ge=0, le=16777215)] = None
    longitude: Optional[conint(ge=0, le=2097151)] = None
    inclination: Optional[conint(ge=-524288, le=524287)] = None
    meanAnomaly: Optional[conint(ge=0, le=16777215)] = None


class AmfRegionId(BaseModel):
    __root__: conint(le=255) = Field(
        ..., description='AmfRegionId is defined in TS 23.003'
    )


class AmfSetId(BaseModel):
    __root__: str = Field(..., description='AmfSetId is defined in TS 23.003')


class AmfPointer(BaseModel):
    __root__: conint(le=63) = Field(
        ..., description='AmfPointer is defined in TS 23.003'
    )


class IpEndPoint(BaseModel):
    ipv4Address: Optional[Ipv4Addr] = None
    ipv6Address: Optional[Ipv6Addr] = None
    ipv6Prefix: Optional[Ipv6Prefix] = None
    transport: Optional[TransportProtocol] = None
    port: Optional[int] = None


class NFStatus(Enum):
    REGISTERED = 'REGISTERED'
    SUSPENDED = 'SUSPENDED'


class CNSIId(BaseModel):
    __root__: str = Field(
        ..., description='CNSI Id is defined in TS 29.531, only for Core Network'
    )


class EnergySavingControl(Enum):
    TO_BE_ENERGYSAVING = 'TO_BE_ENERGYSAVING'
    TO_BE_NOT_ENERGYSAVING = 'TO_BE_NOT_ENERGYSAVING'


class EnergySavingState(Enum):
    IS_NOT_ENERGYSAVING = 'IS_NOT_ENERGYSAVING'
    IS_ENERGYSAVING = 'IS_ENERGYSAVING'


class TACList(BaseModel):
    __root__: List[Tac]


class WeightFactor(BaseModel):
    __root__: int


class VendorId(BaseModel):
    __root__: constr(regex=r'^[0-9]{6}$') = Field(
        ...,
        description='Vendor ID of the NF Service instance (Private Enterprise Number assigned by IANA)',
    )


class RoutingIndicator(BaseModel):
    __root__: constr(regex=r'^[0-9]{1,4}$')


class SupportedDataSet(Enum):
    SUBSCRIPTION = 'SUBSCRIPTION'
    POLICY = 'POLICY'
    EXPOSURE = 'EXPOSURE'
    APPLICATION = 'APPLICATION'
    A_PFD = 'A_PFD'
    A_AFTI = 'A_AFTI'
    A_IPTV = 'A_IPTV'
    A_BDT = 'A_BDT'
    A_SPD = 'A_SPD'
    A_EASD = 'A_EASD'
    A_AMI = 'A_AMI'
    P_UE = 'P_UE'
    P_SCD = 'P_SCD'
    P_BDT = 'P_BDT'
    P_PLMNUE = 'P_PLMNUE'
    P_NSSCD = 'P_NSSCD'


class NotificationType1(Enum):
    N1_MESSAGES = 'N1_MESSAGES'
    N2_INFORMATION = 'N2_INFORMATION'
    LOCATION_NOTIFICATION = 'LOCATION_NOTIFICATION'
    DATA_REMOVAL_NOTIFICATION = 'DATA_REMOVAL_NOTIFICATION'
    DATA_CHANGE_NOTIFICATION = 'DATA_CHANGE_NOTIFICATION'
    LOCATION_UPDATE_NOTIFICATION = 'LOCATION_UPDATE_NOTIFICATION'
    NSSAA_REAUTH_NOTIFICATION = 'NSSAA_REAUTH_NOTIFICATION'
    NSSAA_REVOC_NOTIFICATION = 'NSSAA_REVOC_NOTIFICATION'


class DefaultNotificationSubscription(BaseModel):
    notificationType: Optional[NotificationType1] = None
    callbackURI: Optional[str] = None
    n1MessageClass: Optional[bool] = None
    n2InformationClass: Optional[bool] = None
    versions: Optional[str] = None
    binding: Optional[str] = None


class SEPPType(Enum):
    CSEPP = 'CSEPP'
    PSEPP = 'PSEPP'


class SupportedFunc(BaseModel):
    function: Optional[str] = None
    policy: Optional[str] = None


class SupportedFuncList(BaseModel):
    __root__: List[SupportedFunc]


class CommModelType(Enum):
    DIRECT_COMMUNICATION_WO_NRF = 'DIRECT_COMMUNICATION_WO_NRF'
    DIRECT_COMMUNICATION_WITH_NRF = 'DIRECT_COMMUNICATION_WITH_NRF'
    INDIRECT_COMMUNICATION_WO_DEDICATED_DISCOVERY = (
        'INDIRECT_COMMUNICATION_WO_DEDICATED_DISCOVERY'
    )
    INDIRECT_COMMUNICATION_WITH_DEDICATED_DISCOVERY = (
        'INDIRECT_COMMUNICATION_WITH_DEDICATED_DISCOVERY'
    )


class CommModel(BaseModel):
    groupId: Optional[int] = None
    commModelType: Optional[CommModelType] = None
    targetNFServiceList: Optional[DnList] = None
    commModelConfiguration: Optional[str] = None


class CommModelList(BaseModel):
    __root__: List[CommModel]


class CapabilityList(BaseModel):
    __root__: List[str]


class FiveQiDscpMapping(BaseModel):
    fiveQIValues: Optional[List[int]] = None
    dscp: Optional[int] = None


class PacketErrorRate(BaseModel):
    scalar: Optional[int] = None
    exponent: Optional[int] = None


class GtpUPathDelayThresholdsType(BaseModel):
    n3AveragePacketDelayThreshold: Optional[int] = None
    n3MinPacketDelayThreshold: Optional[int] = None
    n3MaxPacketDelayThreshold: Optional[int] = None
    n9AveragePacketDelayThreshold: Optional[int] = None
    n9MinPacketDelayThreshold: Optional[int] = None
    n9MaxPacketDelayThreshold: Optional[int] = None


class QFPacketDelayThresholdsType(BaseModel):
    thresholdDl: Optional[int] = None
    thresholdUl: Optional[int] = None
    thresholdRtt: Optional[int] = None


class BitRateRm(BaseModel):
    __root__: Optional[constr(regex=r'^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$')] = None


class Binary(BaseModel):
    __root__: bytes


class BinaryRm(BaseModel):
    __root__: Optional[bytes] = None


class Bytes(BaseModel):
    __root__: str


class BytesRm(BaseModel):
    __root__: Optional[str] = None


class Date(BaseModel):
    __root__: date


class DateRm(BaseModel):
    __root__: Optional[date] = None


class DateTimeRm(BaseModel):
    __root__: Optional[datetime] = None


class DiameterIdentity(BaseModel):
    __root__: constr(regex=r'^([A-Za-z0-9]+([-A-Za-z0-9]+)\.)+[a-z]{2,}$')


class DiameterIdentityRm(BaseModel):
    __root__: Optional[
        constr(regex=r'^([A-Za-z0-9]+([-A-Za-z0-9]+)\.)+[a-z]{2,}$')
    ] = None


class Double(BaseModel):
    __root__: float


class DoubleRm(BaseModel):
    __root__: Optional[float] = None


class DurationSec(BaseModel):
    __root__: int


class DurationSecRm(BaseModel):
    __root__: Optional[int] = None


class FloatRm(BaseModel):
    __root__: Optional[float] = None


class Int32(BaseModel):
    __root__: int


class Int32Rm(BaseModel):
    __root__: Optional[int] = None


class Int64(BaseModel):
    __root__: int


class Int64Rm(BaseModel):
    __root__: Optional[int] = None


class Ipv4AddrRm(BaseModel):
    __root__: Optional[
        constr(
            regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
        )
    ] = Field(None, example='198.51.100.1')


class Ipv4AddrMask(BaseModel):
    __root__: constr(
        regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
    ) = Field(..., example='198.51.0.0/16')


class Ipv4AddrMaskRm(BaseModel):
    __root__: Optional[
        constr(
            regex=r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
        )
    ] = Field(None, example='198.51.0.0/16')


class Ipv6AddrRm(BaseModel):
    pass


class Ipv6PrefixRm(BaseModel):
    pass


class MacAddr48(BaseModel):
    __root__: constr(regex=r'^([0-9a-fA-F]{2})((-[0-9a-fA-F]{2}){5})$')


class MacAddr48Rm(BaseModel):
    __root__: Optional[constr(regex=r'^([0-9a-fA-F]{2})((-[0-9a-fA-F]{2}){5})$')] = None


class SupportedFeatures(BaseModel):
    __root__: constr(regex=r'^[A-Fa-f0-9]*$')


class Uinteger(BaseModel):
    __root__: conint(ge=0)


class UintegerRm(BaseModel):
    __root__: Optional[conint(ge=0)] = None


class Uint16(BaseModel):
    __root__: conint(ge=0, le=65535)


class Uint16Rm(BaseModel):
    __root__: Optional[conint(ge=0, le=65535)] = None


class Uint32(BaseModel):
    __root__: conint(ge=0, le=4294967295)


class Uint32Rm(BaseModel):
    __root__: Optional[conint(ge=0, le=4294967295)] = None


class Uint64(BaseModel):
    __root__: conint(ge=0, le=18446744073709551615)


class Uint64Rm(BaseModel):
    __root__: Optional[conint(ge=0, le=18446744073709551615)] = None


class UriRm(BaseModel):
    __root__: Optional[str] = None


class VarUeId(BaseModel):
    __root__: constr(
        regex=r'^(imsi-[0-9]{5,15}|nai-.+|msisdn-[0-9]{5,15}|extid-[^@]+@[^@]+|gci-.+|gli-.+|.+)$'
    )


class VarUeIdRm(BaseModel):
    __root__: Optional[
        constr(
            regex=r'^(imsi-[0-9]{5,15}|nai-.+|msisdn-[0-9]{5,15}|extid-[^@]+@[^@]+|gci-.+|gli-.+|.+)$'
        )
    ] = None


class TimeZone(BaseModel):
    __root__: str


class TimeZoneRm(BaseModel):
    __root__: Optional[str] = None


class StnSr(BaseModel):
    __root__: str


class StnSrRm(BaseModel):
    __root__: Optional[str] = None


class CMsisdn(BaseModel):
    __root__: constr(regex=r'^[0-9]{5,15}$')


class CMsisdnRm(BaseModel):
    __root__: Optional[constr(regex=r'^[0-9]{5,15}$')] = None


class DayOfWeek(BaseModel):
    __root__: conint(ge=1, le=7) = Field(
        ...,
        description='integer between and including 1 and 7 denoting a weekday. 1 shall indicate Monday, and the subsequent weekdays shall be indicated with the next higher numbers. 7 shall indicate Sunday.',
    )


class TimeOfDay(BaseModel):
    __root__: str = Field(
        ...,
        description='String with format partial-time or full-time as defined in clause 5.6 of IETF RFC 3339. Examples, 20:15:00, 20:15:00-08:00 (for 8 hours behind UTC).',
    )


class EmptyObject(BaseModel):
    pass

    class Config:
        extra = Extra.forbid


class Fqdn1(BaseModel):
    __root__: constr(
        regex=r'^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$',
        min_length=4,
        max_length=253,
    ) = Field(..., description='Fully Qualified Domain Name')


class PatchOperation2(Enum):
    add = 'add'
    copy = 'copy'
    move = 'move'
    remove = 'remove'
    replace = 'replace'
    test = 'test'


class PatchOperation1(BaseModel):
    __root__: Union[PatchOperation2, str]


class UriScheme1(Enum):
    http = 'http'
    https = 'https'


class UriScheme(BaseModel):
    __root__: Union[UriScheme1, str]


class ChangeType1(Enum):
    ADD = 'ADD'
    MOVE = 'MOVE'
    REMOVE = 'REMOVE'
    REPLACE = 'REPLACE'


class ChangeType(BaseModel):
    __root__: Union[ChangeType1, str]


class HttpMethod1(Enum):
    GET = 'GET'
    POST = 'POST'
    PUT = 'PUT'
    DELETE = 'DELETE'
    PATCH = 'PATCH'
    OPTIONS = 'OPTIONS'
    HEAD = 'HEAD'
    CONNECT = 'CONNECT'
    TRACE = 'TRACE'


class HttpMethod(BaseModel):
    __root__: Union[HttpMethod1, str]


class NullValue(Enum):
    NoneType_None = None


class Link(BaseModel):
    href: Optional[Uri] = None


class LinkRm(BaseModel):
    href: Optional[Uri] = None


class PatchItem(BaseModel):
    op: PatchOperation1
    path: str
    from_: Optional[str] = Field(None, alias='from')
    value: Optional[Any] = None


class LinksValueSchema(BaseModel):
    __root__: Union[List[Link], Link]


class SelfLink(BaseModel):
    self: Link


class InvalidParam(BaseModel):
    param: str
    reason: Optional[str] = None


class ChangeItem(BaseModel):
    op: ChangeType
    path: str
    from_: Optional[str] = Field(None, alias='from')
    origValue: Optional[Any] = None
    newValue: Optional[Any] = None


class NotifyItem(BaseModel):
    resourceId: Uri
    changes: List[ChangeItem] = Field()
    @validator('changes')
    def validate_min_items_changes(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value


class Atom(BaseModel):
    attr: str
    value: Any
    negative: Optional[bool] = None


class ReportItem(BaseModel):
    path: str


class Property(BaseModel):
    name: str
    required: Optional[bool] = None
    regex: Optional[str] = None
    value: Optional[str] = None


class RedirectResponse(BaseModel):
    cause: Optional[str] = None
    targetScp: Optional[Uri] = None
    targetSepp: Optional[Uri] = None


class Dnn(BaseModel):
    __root__: str


class DnnRm(BaseModel):
    __root__: Optional[str] = None


class WildcardDnn(BaseModel):
    __root__: constr(regex=r'^[*]$')


class WildcardDnnRm(BaseModel):
    __root__: Optional[constr(regex=r'^[*]$')] = None


class Gpsi(BaseModel):
    __root__: constr(regex=r'^(msisdn-[0-9]{5,15}|extid-[^@]+@[^@]+|.+)$')


class GpsiRm(BaseModel):
    __root__: Optional[
        constr(regex=r'^(msisdn-[0-9]{5,15}|extid-[^@]+@[^@]+|.+)$')
    ] = None


class GroupId(BaseModel):
    __root__: constr(
        regex=r'^[A-Fa-f0-9]{8}-[0-9]{3}-[0-9]{2,3}-([A-Fa-f0-9][A-Fa-f0-9]){1,10}$'
    )


class GroupIdRm(BaseModel):
    __root__: Optional[
        constr(
            regex=r'^[A-Fa-f0-9]{8}-[0-9]{3}-[0-9]{2,3}-([A-Fa-f0-9][A-Fa-f0-9]){1,10}$'
        )
    ] = None


class ExternalGroupId(BaseModel):
    __root__: constr(regex=r'^extgroupid-[^@]+@[^@]+$')


class ExternalGroupIdRm(BaseModel):
    __root__: Optional[constr(regex=r'^extgroupid-[^@]+@[^@]+$')] = None


class Pei(BaseModel):
    __root__: constr(
        regex=r'^(imei-[0-9]{15}|imeisv-[0-9]{16}|mac((-[0-9a-fA-F]{2}){6})(-untrusted)?|eui((-[0-9a-fA-F]{2}){8})|.+)$'
    )


class PeiRm(BaseModel):
    __root__: Optional[
        constr(
            regex=r'^(imei-[0-9]{15}|imeisv-[0-9]{16}|mac((-[0-9a-fA-F]{2}){6})(-untrusted)?|eui((-[0-9a-fA-F]{2}){8})|.+)$'
        )
    ] = None


class Supi(BaseModel):
    __root__: constr(regex=r'^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$')


class SupiRm(BaseModel):
    __root__: Optional[
        constr(regex=r'^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$')
    ] = None


class NfInstanceId(BaseModel):
    __root__: UUID


class AmfId(BaseModel):
    __root__: constr(regex=r'^[A-Fa-f0-9]{6}$')


class AmfRegionId1(BaseModel):
    __root__: constr(regex=r'^[A-Fa-f0-9]{2}$')


class AmfSetId1(BaseModel):
    __root__: constr(regex=r'^[0-3][A-Fa-f0-9]{2}$')


class RfspIndex(BaseModel):
    __root__: conint(ge=1, le=256)


class RfspIndexRm(BaseModel):
    __root__: Optional[conint(ge=1, le=256)] = None


class NfGroupId(BaseModel):
    __root__: str


class MtcProviderInformation(BaseModel):
    __root__: str


class CagId1(BaseModel):
    __root__: constr(regex=r'^[A-Fa-f0-9]{8}$')


class SupiOrSuci(BaseModel):
    __root__: constr(
        regex=r'^(imsi-[0-9]{5,15}|nai-.+|gli-.+|gci-.+|suci-(0-[0-9]{3}-[0-9]{2,3}|[1-7]-.+)-[0-9]{1,4}-(0-0-.+|[a-fA-F1-9]-([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])-[a-fA-F0-9]+)|.+)$'
    )


class ApplicationId(BaseModel):
    __root__: str


class ApplicationIdRm(BaseModel):
    __root__: Optional[str] = None


class PduSessionId(BaseModel):
    __root__: conint(ge=0, le=255)


class MccModel(BaseModel):
    __root__: constr(regex=r'^\d{3}$')


class MccRm(BaseModel):
    __root__: Optional[constr(regex=r'^\d{3}$')] = None


class MncModel(BaseModel):
    __root__: constr(regex=r'^\d{2,3}$')


class MncRm(BaseModel):
    __root__: Optional[constr(regex=r'^\d{2,3}$')] = None


class TacRm(BaseModel):
    __root__: Optional[constr(regex=r'(^[A-Fa-f0-9]{4}$)|(^[A-Fa-f0-9]{6}$)')] = None


class EutraCellIdRm(BaseModel):
    __root__: Optional[constr(regex=r'^[A-Fa-f0-9]{7}$')] = None


class NrCellIdRm(BaseModel):
    __root__: Optional[constr(regex=r'^[A-Fa-f0-9]{9}$')] = None


class Dnai(BaseModel):
    __root__: str


class DnaiRm(BaseModel):
    __root__: Optional[str] = None


class Field5GMmCause(BaseModel):
    __root__: Uinteger


class AmfName(BaseModel):
    __root__: str


class AreaCode(BaseModel):
    __root__: str


class AreaCodeRm(BaseModel):
    __root__: Optional[str] = None


class N3IwfId(BaseModel):
    __root__: constr(regex=r'^[A-Fa-f0-9]+$')


class WAgfId(BaseModel):
    __root__: constr(regex=r'^[A-Fa-f0-9]+$')


class TngfId(BaseModel):
    __root__: constr(regex=r'^[A-Fa-f0-9]+$')


class NgeNbId(BaseModel):
    __root__: constr(
        regex=r'^(MacroNGeNB-[A-Fa-f0-9]{5}|LMacroNGeNB-[A-Fa-f0-9]{6}|SMacroNGeNB-[A-Fa-f0-9]{5})$'
    )


class Nid2(BaseModel):
    __root__: constr(regex=r'^[A-Fa-f0-9]{11}$')


class NidRm(BaseModel):
    __root__: Optional[constr(regex=r'^[A-Fa-f0-9]{11}$')] = None


class NfSetId(BaseModel):
    __root__: str


class NfServiceSetId(BaseModel):
    __root__: str


class PlmnAssiUeRadioCapId(BaseModel):
    __root__: Bytes


class ManAssiUeRadioCapId(BaseModel):
    __root__: Bytes


class TypeAllocationCode(BaseModel):
    __root__: constr(regex=r'^[0-9]{8}$')


class HfcNId(BaseModel):
    __root__: constr(max_length=6)


class HfcNIdRm(BaseModel):
    __root__: Optional[constr(max_length=6)] = None


class ENbId(BaseModel):
    __root__: constr(
        regex=r'^(MacroeNB-[A-Fa-f0-9]{5}|LMacroeNB-[A-Fa-f0-9]{6}|SMacroeNB-[A-Fa-f0-9]{5}|HomeeNB-[A-Fa-f0-9]{7})$'
    )


class Gli(BaseModel):
    __root__: Bytes


class Gci(BaseModel):
    __root__: str


class AccessType(Enum):
    field_3GPP_ACCESS = '3GPP_ACCESS'
    NON_3GPP_ACCESS = 'NON_3GPP_ACCESS'


class AccessTypeRm(BaseModel):
    __root__: Union[AccessType, NullValue]


class RatType1(Enum):
    NR = 'NR'
    EUTRA = 'EUTRA'
    WLAN = 'WLAN'
    VIRTUAL = 'VIRTUAL'
    NBIOT = 'NBIOT'
    WIRELINE = 'WIRELINE'
    WIRELINE_CABLE = 'WIRELINE_CABLE'
    WIRELINE_BBF = 'WIRELINE_BBF'
    LTE_M = 'LTE-M'
    NR_U = 'NR_U'
    EUTRA_U = 'EUTRA_U'
    TRUSTED_N3GA = 'TRUSTED_N3GA'
    TRUSTED_WLAN = 'TRUSTED_WLAN'
    UTRA = 'UTRA'
    GERA = 'GERA'


class RatType(BaseModel):
    __root__: Union[RatType1, str]


class RatTypeRm(BaseModel):
    __root__: Union[RatType, NullValue]


class PduSessionType1(Enum):
    IPV4 = 'IPV4'
    IPV6 = 'IPV6'
    IPV4V6 = 'IPV4V6'
    UNSTRUCTURED = 'UNSTRUCTURED'
    ETHERNET = 'ETHERNET'


class PduSessionType(BaseModel):
    __root__: Union[PduSessionType1, str]


class PduSessionTypeRm(BaseModel):
    __root__: Union[PduSessionType, NullValue]


class UpIntegrity1(Enum):
    REQUIRED = 'REQUIRED'
    PREFERRED = 'PREFERRED'
    NOT_NEEDED = 'NOT_NEEDED'


class UpIntegrity(BaseModel):
    __root__: Union[UpIntegrity1, str]


class UpIntegrityRm(BaseModel):
    __root__: Union[UpIntegrity, NullValue]


class UpConfidentiality1(Enum):
    REQUIRED = 'REQUIRED'
    PREFERRED = 'PREFERRED'
    NOT_NEEDED = 'NOT_NEEDED'


class UpConfidentiality(BaseModel):
    __root__: Union[UpConfidentiality1, str]


class UpConfidentialityRm(BaseModel):
    __root__: Union[UpConfidentiality, NullValue]


class SscMode1(Enum):
    SSC_MODE_1 = 'SSC_MODE_1'
    SSC_MODE_2 = 'SSC_MODE_2'
    SSC_MODE_3 = 'SSC_MODE_3'


class SscMode(BaseModel):
    __root__: Union[SscMode1, str]


class SscModeRm(BaseModel):
    __root__: Union[SscMode, NullValue]


class DnaiChangeType1(Enum):
    EARLY = 'EARLY'
    EARLY_LATE = 'EARLY_LATE'
    LATE = 'LATE'


class DnaiChangeType(BaseModel):
    __root__: Union[DnaiChangeType1, str] = Field(
        ...,
        description='Possible values are - EARLY: Early notification of UP path reconfiguration. - EARLY_LATE: Early and late notification of UP path reconfiguration. This value shall only be present in the subscription to the DNAI change event. - LATE: Late notification of UP path reconfiguration.\n',
    )


class DnaiChangeTypeRm(BaseModel):
    __root__: Union[DnaiChangeType, NullValue]


class RestrictionType1(Enum):
    ALLOWED_AREAS = 'ALLOWED_AREAS'
    NOT_ALLOWED_AREAS = 'NOT_ALLOWED_AREAS'


class RestrictionType(BaseModel):
    __root__: Union[RestrictionType1, str]


class RestrictionTypeRm(BaseModel):
    __root__: Union[RestrictionType, NullValue]


class CoreNetworkType1(Enum):
    field_5GC = '5GC'
    EPC = 'EPC'


class CoreNetworkType(BaseModel):
    __root__: Union[CoreNetworkType1, str]


class CoreNetworkTypeRm(BaseModel):
    __root__: Union[CoreNetworkType, NullValue]


class PresenceState1(Enum):
    IN_AREA = 'IN_AREA'
    OUT_OF_AREA = 'OUT_OF_AREA'
    UNKNOWN = 'UNKNOWN'
    INACTIVE = 'INACTIVE'


class PresenceState(BaseModel):
    __root__: Union[PresenceState1, str]


class StationaryIndication1(Enum):
    STATIONARY = 'STATIONARY'
    MOBILE = 'MOBILE'


class StationaryIndication(BaseModel):
    __root__: Union[StationaryIndication1, str] = Field(
        ...,
        description='Possible values are - STATIONARY: Identifies the UE is stationary - MOBILE: Identifies the UE is mobile\n',
    )


class StationaryIndicationRm(BaseModel):
    __root__: Union[StationaryIndication, NullValue]


class ScheduledCommunicationType1(Enum):
    DOWNLINK_ONLY = 'DOWNLINK_ONLY'
    UPLINK_ONLY = 'UPLINK_ONLY'
    BIDIRECTIONAL = 'BIDIRECTIONAL'


class ScheduledCommunicationType(BaseModel):
    __root__: Union[ScheduledCommunicationType1, str]


class ScheduledCommunicationTypeRm(BaseModel):
    __root__: Union[ScheduledCommunicationType, NullValue]


class TrafficProfile1(Enum):
    SINGLE_TRANS_UL = 'SINGLE_TRANS_UL'
    SINGLE_TRANS_DL = 'SINGLE_TRANS_DL'
    DUAL_TRANS_UL_FIRST = 'DUAL_TRANS_UL_FIRST'
    DUAL_TRANS_DL_FIRST = 'DUAL_TRANS_DL_FIRST'
    MULTI_TRANS = 'MULTI_TRANS'


class TrafficProfile(BaseModel):
    __root__: Union[TrafficProfile1, str] = Field(
        ...,
        description='Possible values are - SINGLE_TRANS_UL: Uplink single packet transmission. - SINGLE_TRANS_DL: Downlink single packet transmission. - DUAL_TRANS_UL_FIRST: Dual packet transmission, firstly uplink packet transmission with subsequent downlink packet transmission. - DUAL_TRANS_DL_FIRST: Dual packet transmission, firstly downlink packet transmission with subsequent uplink packet transmission.\n',
    )


class TrafficProfileRm(BaseModel):
    __root__: Union[TrafficProfile, NullValue]


class LcsServiceAuth1(Enum):
    LOCATION_ALLOWED_WITH_NOTIFICATION = 'LOCATION_ALLOWED_WITH_NOTIFICATION'
    LOCATION_ALLOWED_WITHOUT_NOTIFICATION = 'LOCATION_ALLOWED_WITHOUT_NOTIFICATION'
    LOCATION_ALLOWED_WITHOUT_RESPONSE = 'LOCATION_ALLOWED_WITHOUT_RESPONSE'
    LOCATION_RESTRICTED_WITHOUT_RESPONSE = 'LOCATION_RESTRICTED_WITHOUT_RESPONSE'
    NOTIFICATION_ONLY = 'NOTIFICATION_ONLY'
    NOTIFICATION_AND_VERIFICATION_ONLY = 'NOTIFICATION_AND_VERIFICATION_ONLY'


class LcsServiceAuth(BaseModel):
    __root__: Union[LcsServiceAuth1, str] = Field(
        ...,
        description='Possible values are - "LOCATION_ALLOWED_WITH_NOTIFICATION": Location allowed with notification - "LOCATION_ALLOWED_WITHOUT_NOTIFICATION": Location allowed without notification - "LOCATION_ALLOWED_WITHOUT_RESPONSE": Location with notification and privacy verification; location allowed if no response - "LOCATION_RESTRICTED_WITHOUT_RESPONSE": Location with notification and privacy verification; location restricted if no response - "NOTIFICATION_ONLY": Notification only - "NOTIFICATION_AND_VERIFICATION_ONLY": Notification and privacy verification only\n',
    )


class UeAuth1(Enum):
    AUTHORIZED = 'AUTHORIZED'
    NOT_AUTHORIZED = 'NOT_AUTHORIZED'


class UeAuth(BaseModel):
    __root__: Union[UeAuth1, str]


class DlDataDeliveryStatus1(Enum):
    BUFFERED = 'BUFFERED'
    TRANSMITTED = 'TRANSMITTED'
    DISCARDED = 'DISCARDED'


class DlDataDeliveryStatus(BaseModel):
    __root__: Union[DlDataDeliveryStatus1, str] = Field(
        ...,
        description='Possible values are - BUFFERED: The first downlink data is buffered with extended buffering matching the source of the downlink traffic. - TRANSMITTED: The first downlink data matching the source of the downlink traffic is transmitted after previous buffering or discarding of corresponding packet(s) because the UE of the PDU Session becomes ACTIVE, and buffered data can be delivered to UE. - DISCARDED: The first downlink data matching the source of the downlink traffic is discarded because the Extended Buffering time, as determined by the SMF, expires or the amount of downlink data to be buffered is exceeded.\n',
    )


class DlDataDeliveryStatusRm(BaseModel):
    __root__: Union[DlDataDeliveryStatus, NullValue]


class AuthStatus1(Enum):
    EAP_SUCCESS = 'EAP_SUCCESS'
    EAP_FAILURE = 'EAP_FAILURE'
    PENDING = 'PENDING'


class AuthStatus(BaseModel):
    __root__: Union[AuthStatus1, str] = Field(
        ...,
        description='Possible values are - "EAP_SUCCESS": The NSSAA status is EAP-Success. - "EAP_FAILURE": The NSSAA status is EAP-Failure. - "PENDING": The NSSAA status is Pending.\n',
    )


class TransportProtocol3(Enum):
    UDP = 'UDP'
    TCP = 'TCP'


class TransportProtocol2(BaseModel):
    __root__: Union[TransportProtocol3, str] = Field(
        ...,
        description='Possible values are - UDP: User Datagram Protocol. - TCP: Transmission Control Protocol.\n',
    )


class Snssai1(BaseModel):
    sst: conint(ge=0, le=255)
    sd: Optional[constr(regex=r'^[A-Fa-f0-9]{6}$')] = None


class PlmnId1(BaseModel):
    mcc: MccModel
    mnc: MncModel


class PlmnIdRm(BaseModel):
    __root__: Union[PlmnId1, NullValue]


class Tai1(BaseModel):
    plmnId: PlmnId1
    tac: Tac
    nid: Optional[Nid2] = None


class TaiRm(BaseModel):
    __root__: Union[Tai1, NullValue]


class Ecgi(BaseModel):
    plmnId: PlmnId1
    eutraCellId: EutraCellId
    nid: Optional[Nid2] = None


class EcgiRm(BaseModel):
    __root__: Union[Ecgi, NullValue]


class Ncgi(BaseModel):
    plmnId: PlmnId1
    nrCellId: NrCellId
    nid: Optional[Nid2] = None


class NcgiRm(BaseModel):
    __root__: Union[Ncgi, NullValue]


class UpSecurity(BaseModel):
    upIntegr: UpIntegrity
    upConfid: UpConfidentiality


class UpSecurityRm(BaseModel):
    __root__: Union[UpSecurity, NullValue]


class NgApCause(BaseModel):
    group: Uinteger
    value: Uinteger


class RefToBinaryData(BaseModel):
    contentId: str


class RefToBinaryDataRm(BaseModel):
    __root__: Union[RefToBinaryData, NullValue]


class RouteInformation(BaseModel):
    ipv4Addr: Optional[Ipv4Addr] = None
    ipv6Addr: Optional[Ipv6Addr] = None
    portNumber: Uinteger


class Area1(BaseModel):
    tacs: List[Tac] = Field()
    @validator('tacs')
    def validate_min_items_tacs(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value
    areaCode: Optional[AreaCode] = None


class Area2(BaseModel):
    tacs: Optional[List[Tac]] = Field(None, min_items=1)
    areaCode: AreaCode


class Area(BaseModel):
    __root__: Union[Area1, Area2]


class ServiceAreaRestriction(BaseModel):
    restrictionType: Optional[RestrictionType] = None
    areas: Optional[List[Area]] = None
    maxNumOfTAs: Optional[Uinteger] = None
    maxNumOfTAsForNotAllowedAreas: Optional[Uinteger] = None


class WirelineArea(BaseModel):
    globalLineIds: Optional[List[Gli]] = Field(None, min_items=1)
    hfcNIds: Optional[List[HfcNId]] = Field(None, min_items=1)
    areaCodeB: Optional[AreaCode] = None
    areaCodeC: Optional[AreaCode] = None


class WirelineServiceAreaRestriction(BaseModel):
    restrictionType: Optional[RestrictionType] = None
    areas: Optional[List[WirelineArea]] = None


class GNbId(BaseModel):
    bitLength: conint(ge=22, le=32)
    gNBValue: constr(regex=r'^[A-Fa-f0-9]{6,8}$')


class AtsssCapability(BaseModel):
    atsssLL: Optional[bool] = False
    mptcp: Optional[bool] = False
    rttWithoutPmf: Optional[bool] = False


class PlmnIdNid(BaseModel):
    mcc: MccModel
    mnc: MncModel
    nid: Optional[Nid2] = None


class SmallDataRateStatus(BaseModel):
    remainPacketsUl: Optional[conint(ge=0)] = None
    remainPacketsDl: Optional[conint(ge=0)] = None
    validityTime: Optional[DateTime] = None
    remainExReportsUl: Optional[conint(ge=0)] = None
    remainExReportsDl: Optional[conint(ge=0)] = None


class ApnRateStatus(BaseModel):
    remainPacketsUl: Optional[conint(ge=0)] = None
    remainPacketsDl: Optional[conint(ge=0)] = None
    validityTime: Optional[DateTime] = None
    remainExReportsUl: Optional[conint(ge=0)] = None
    remainExReportsDl: Optional[conint(ge=0)] = None


class HfcNodeId(BaseModel):
    hfcNId: HfcNId


class HfcNodeIdRm(BaseModel):
    __root__: Union[HfcNodeId, NullValue]


class ScheduledCommunicationTime(BaseModel):
    daysOfWeek: Optional[List[DayOfWeek]] = Field(
        None,
        description='Identifies the day(s) of the week. If absent, it indicates every day of the week.',
        max_items=6,
        min_items=1,
    )
    timeOfDayStart: Optional[TimeOfDay] = None
    timeOfDayEnd: Optional[TimeOfDay] = None


class ScheduledCommunicationTimeRm(BaseModel):
    __root__: Union[ScheduledCommunicationTime, NullValue]


class BatteryIndication(BaseModel):
    batteryInd: Optional[bool] = None
    replaceableInd: Optional[bool] = None
    rechargeableInd: Optional[bool] = None


class BatteryIndicationRm(BaseModel):
    __root__: Union[BatteryIndication, NullValue]


class AcsInfo(BaseModel):
    acsUrl: Optional[Uri] = None
    acsIpv4Addr: Optional[Ipv4Addr] = None
    acsIpv6Addr: Optional[Ipv6Addr] = None


class AcsInfoRm(BaseModel):
    __root__: Union[AcsInfo, NullValue]


class NrV2xAuth(BaseModel):
    vehicleUeAuth: Optional[UeAuth] = None
    pedestrianUeAuth: Optional[UeAuth] = None


class LteV2xAuth(BaseModel):
    vehicleUeAuth: Optional[UeAuth] = None
    pedestrianUeAuth: Optional[UeAuth] = None


class CellGlobalId(BaseModel):
    plmnId: PlmnId1
    lac: constr(regex=r'^[A-Fa-f0-9]{4}$')
    cellId: constr(regex=r'^[A-Fa-f0-9]{4}$')


class ServiceAreaId(BaseModel):
    plmnId: PlmnId1
    lac: constr(regex=r'^[A-Fa-f0-9]{4}$')
    sac: constr(regex=r'^[A-Fa-f0-9]{4}$')


class LocationAreaId(BaseModel):
    plmnId: PlmnId1
    lac: constr(regex=r'^[A-Fa-f0-9]{4}$')


class RoutingAreaId(BaseModel):
    plmnId: PlmnId1
    lac: constr(regex=r'^[A-Fa-f0-9]{4}$')
    rac: constr(regex=r'^[A-Fa-f0-9]{2}$')


class DddTrafficDescriptor(BaseModel):
    ipv4Addr: Optional[Ipv4Addr] = None
    ipv6Addr: Optional[Ipv6Addr] = None
    portNumber: Optional[Uinteger] = None
    macAddr: Optional[MacAddr48] = None


class MoExpDataCounter(BaseModel):
    counter: int
    timeStamp: Optional[DateTime] = None


class NssaaStatus(BaseModel):
    snssai: Snssai1
    status: AuthStatus


class NssaaStatusRm(BaseModel):
    __root__: Union[NssaaStatus, NullValue]


class TnapId(BaseModel):
    ssId: Optional[str] = None
    bssId: Optional[str] = None
    civicAddress: Optional[Bytes] = None


class TnapIdRm(BaseModel):
    __root__: Union[TnapId, NullValue]


class TwapId(BaseModel):
    ssId: str
    bssId: Optional[str] = None
    civicAddress: Optional[Bytes] = None


class TwapIdRm(BaseModel):
    __root__: Union[TwapId, NullValue]


class LineType1(Enum):
    DSL = 'DSL'
    PON = 'PON'


class LineType(BaseModel):
    __root__: Union[LineType1, str] = Field(
        ...,
        description='Possible values are - DSL: Identifies a DSL line - PON: Identifies a PON line\n',
    )


class LineTypeRm(BaseModel):
    __root__: Union[LineType, NullValue]


class WildcardSd(Enum):
    boolean_True = True


class SdRange(BaseModel):
    start: Optional[constr(regex=r'^[A-Fa-f0-9]{6}$')] = None
    end: Optional[constr(regex=r'^[A-Fa-f0-9]{6}$')] = None


class Qfi(BaseModel):
    __root__: conint(ge=0, le=63)


class QfiRm(BaseModel):
    __root__: Optional[conint(ge=0, le=63)] = None


class Field5Qi(BaseModel):
    __root__: conint(ge=0, le=255)


class Field5QiRm(BaseModel):
    __root__: Optional[conint(ge=0, le=255)] = None


class BitRate(BaseModel):
    __root__: constr(regex=r'^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$')


class ArpPriorityLevelRm(BaseModel):
    __root__: Optional[conint(ge=1, le=15)] = None


class ArpPriorityLevel(BaseModel):
    __root__: Optional[conint(ge=1, le=15)] = Field(
        None, description='nullable true shall not be used for this attribute'
    )


class Field5QiPriorityLevel(BaseModel):
    __root__: conint(ge=1, le=127)


class Field5QiPriorityLevelRm(BaseModel):
    __root__: Optional[conint(ge=1, le=127)] = None


class PacketDelBudget(BaseModel):
    __root__: conint(ge=1)


class PacketDelBudgetRm(BaseModel):
    __root__: Optional[conint(ge=1)] = None


class PacketErrRate(BaseModel):
    __root__: constr(regex=r'^([0-9]E-[0-9])$')


class PacketErrRateRm(BaseModel):
    __root__: Optional[constr(regex=r'^([0-9]E-[0-9])$')] = None


class PacketLossRate(BaseModel):
    __root__: conint(ge=0, le=1000)


class PacketLossRateRm(BaseModel):
    __root__: Optional[conint(ge=0, le=1000)] = None


class AverWindow(BaseModel):
    __root__: conint(ge=1, le=4095)


class AverWindowRm(BaseModel):
    __root__: Optional[conint(ge=1, le=4095)] = 2000


class MaxDataBurstVol(BaseModel):
    __root__: conint(ge=1, le=4095)


class MaxDataBurstVolRm(BaseModel):
    __root__: Optional[conint(ge=1, le=4095)] = None


class SamplingRatio(BaseModel):
    __root__: conint(ge=1, le=100)


class SamplingRatioRm(BaseModel):
    __root__: Optional[conint(ge=1, le=100)] = None


class RgWirelineCharacteristics(BaseModel):
    __root__: Bytes


class RgWirelineCharacteristicsRm(BaseModel):
    __root__: Union[RgWirelineCharacteristics, NullValue]


class ExtMaxDataBurstVol(BaseModel):
    __root__: conint(ge=4096, le=2000000)


class ExtMaxDataBurstVolRm(BaseModel):
    __root__: Optional[conint(ge=4096, le=2000000)] = None


class ExtPacketDelBudget(BaseModel):
    __root__: conint(ge=1)


class ExtPacketDelBudgetRm(BaseModel):
    __root__: Optional[conint(ge=1)] = None


class PreemptionCapability1(Enum):
    NOT_PREEMPT = 'NOT_PREEMPT'
    MAY_PREEMPT = 'MAY_PREEMPT'


class PreemptionCapability(BaseModel):
    __root__: Union[PreemptionCapability1, str]


class PreemptionCapabilityRm(BaseModel):
    __root__: Union[PreemptionCapability, NullValue]


class PreemptionVulnerability1(Enum):
    NOT_PREEMPTABLE = 'NOT_PREEMPTABLE'
    PREEMPTABLE = 'PREEMPTABLE'


class PreemptionVulnerability(BaseModel):
    __root__: Union[PreemptionVulnerability1, str]


class PreemptionVulnerabilityRm(BaseModel):
    __root__: Union[PreemptionVulnerability, NullValue]


class ReflectiveQoSAttribute1(Enum):
    RQOS = 'RQOS'
    NO_RQOS = 'NO_RQOS'


class ReflectiveQoSAttribute(BaseModel):
    __root__: Union[ReflectiveQoSAttribute1, str]


class ReflectiveQoSAttributeRm(BaseModel):
    __root__: Union[ReflectiveQoSAttribute, NullValue]


class NotificationControl1(Enum):
    REQUESTED = 'REQUESTED'
    NOT_REQUESTED = 'NOT_REQUESTED'


class NotificationControl(BaseModel):
    __root__: Union[NotificationControl1, str]


class NotificationControlRm(BaseModel):
    __root__: Union[NotificationControl, NullValue]


class QosResourceType1(Enum):
    NON_GBR = 'NON_GBR'
    NON_CRITICAL_GBR = 'NON_CRITICAL_GBR'
    CRITICAL_GBR = 'CRITICAL_GBR'


class QosResourceType(BaseModel):
    __root__: Union[QosResourceType1, str]


class QosResourceTypeRm(BaseModel):
    __root__: Union[QosResourceType, NullValue]


class AdditionalQosFlowInfo1(Enum):
    MORE_LIKELY = 'MORE_LIKELY'


class AdditionalQosFlowInfo(BaseModel):
    __root__: Union[Union[AdditionalQosFlowInfo1, str], NullValue]


class Arp(BaseModel):
    priorityLevel: ArpPriorityLevel
    preemptCap: PreemptionCapability
    preemptVuln: PreemptionVulnerability


class ArpRm(BaseModel):
    __root__: Union[Arp, NullValue]


class Ambr(BaseModel):
    uplink: BitRate
    downlink: BitRate


class AmbrRm(BaseModel):
    __root__: Union[Ambr, NullValue]


class Dynamic5Qi(BaseModel):
    resourceType: QosResourceType
    priorityLevel: Field5QiPriorityLevel
    packetDelayBudget: PacketDelBudget
    packetErrRate: PacketErrRate
    averWindow: Optional[AverWindow] = None
    maxDataBurstVol: Optional[MaxDataBurstVol] = None
    extMaxDataBurstVol: Optional[ExtMaxDataBurstVol] = None
    extPacketDelBudget: Optional[ExtPacketDelBudget] = None
    cnPacketDelayBudgetDl: Optional[ExtPacketDelBudget] = None
    cnPacketDelayBudgetUl: Optional[ExtPacketDelBudget] = None


class NonDynamic5Qi(BaseModel):
    priorityLevel: Optional[Field5QiPriorityLevel] = None
    averWindow: Optional[AverWindow] = None
    maxDataBurstVol: Optional[MaxDataBurstVol] = None
    extMaxDataBurstVol: Optional[ExtMaxDataBurstVol] = None
    cnPacketDelayBudgetDl: Optional[ExtPacketDelBudget] = None
    cnPacketDelayBudgetUl: Optional[ExtPacketDelBudget] = None


class PhysCellId(BaseModel):
    __root__: conint(ge=0, le=1007)


class ArfcnValueNR(BaseModel):
    __root__: conint(ge=0, le=3279165)


class TraceDepth1(Enum):
    MINIMUM = 'MINIMUM'
    MEDIUM = 'MEDIUM'
    MAXIMUM = 'MAXIMUM'
    MINIMUM_WO_VENDOR_EXTENSION = 'MINIMUM_WO_VENDOR_EXTENSION'
    MEDIUM_WO_VENDOR_EXTENSION = 'MEDIUM_WO_VENDOR_EXTENSION'
    MAXIMUM_WO_VENDOR_EXTENSION = 'MAXIMUM_WO_VENDOR_EXTENSION'


class TraceDepth(BaseModel):
    __root__: Union[TraceDepth1, str]


class TraceDepthRm(BaseModel):
    __root__: Union[TraceDepth, NullValue]


class JobType1(Enum):
    IMMEDIATE_MDT_ONLY = 'IMMEDIATE_MDT_ONLY'
    LOGGED_MDT_ONLY = 'LOGGED_MDT_ONLY'
    TRACE_ONLY = 'TRACE_ONLY'
    IMMEDIATE_MDT_AND_TRACE = 'IMMEDIATE_MDT_AND_TRACE'
    RLF_REPORTS_ONLY = 'RLF_REPORTS_ONLY'
    RCEF_REPORTS_ONLY = 'RCEF_REPORTS_ONLY'
    LOGGED_MBSFN_MDT = 'LOGGED_MBSFN_MDT'


class JobType(BaseModel):
    __root__: Union[JobType1, str]


class ReportTypeMdt1(Enum):
    PERIODICAL = 'PERIODICAL'
    EVENT_TRIGGED = 'EVENT_TRIGGED'


class ReportTypeMdt(BaseModel):
    __root__: Union[ReportTypeMdt1, str]


class MeasurementLteForMdt1(Enum):
    M1 = 'M1'
    M2 = 'M2'
    M3 = 'M3'
    M4_DL = 'M4_DL'
    M4_UL = 'M4_UL'
    M5_DL = 'M5_DL'
    M5_UL = 'M5_UL'
    M6_DL = 'M6_DL'
    M6_UL = 'M6_UL'
    M7_DL = 'M7_DL'
    M7_UL = 'M7_UL'
    M8 = 'M8'
    M9 = 'M9'


class MeasurementLteForMdt(BaseModel):
    __root__: Union[MeasurementLteForMdt1, str]


class MeasurementNrForMdt1(Enum):
    M1 = 'M1'
    M2 = 'M2'
    M3 = 'M3'
    M4_DL = 'M4_DL'
    M4_UL = 'M4_UL'
    M5_DL = 'M5_DL'
    M5_UL = 'M5_UL'
    M6_DL = 'M6_DL'
    M6_UL = 'M6_UL'
    M7_DL = 'M7_DL'
    M7_UL = 'M7_UL'
    M8 = 'M8'
    M9 = 'M9'


class MeasurementNrForMdt(BaseModel):
    __root__: Union[MeasurementNrForMdt1, str]


class SensorMeasurement1(Enum):
    BAROMETRIC_PRESSURE = 'BAROMETRIC_PRESSURE'
    UE_SPEED = 'UE_SPEED'
    UE_ORIENTATION = 'UE_ORIENTATION'


class SensorMeasurement(BaseModel):
    __root__: Union[SensorMeasurement1, str]


class ReportingTrigger1(Enum):
    PERIODICAL = 'PERIODICAL'
    EVENT_A2 = 'EVENT_A2'
    EVENT_A2_PERIODIC = 'EVENT_A2_PERIODIC'
    ALL_RRM_EVENT_TRIGGERS = 'ALL_RRM_EVENT_TRIGGERS'


class ReportingTrigger(BaseModel):
    __root__: Union[ReportingTrigger1, str]


class ReportIntervalMdt1(Enum):
    field_120 = 120
    field_240 = 240
    field_480 = 480
    field_640 = 640
    field_1024 = 1024
    field_2048 = 2048
    field_5120 = 5120
    field_10240 = 10240
    field_60000 = 60000
    field_360000 = 360000
    field_720000 = 720000
    field_1800000 = 1800000
    field_3600000 = 3600000


class ReportIntervalMdt(BaseModel):
    __root__: Union[ReportIntervalMdt1, str]


class ReportAmountMdt1(Enum):
    field_1 = 1
    field_2 = 2
    field_4 = 4
    field_8 = 8
    field_16 = 16
    field_32 = 32
    field_64 = 64
    infinity = 'infinity'


class ReportAmountMdt(BaseModel):
    __root__: Union[ReportAmountMdt1, str]


class EventForMdt1(Enum):
    OUT_OF_COVERAG = 'OUT_OF_COVERAG'
    A2_EVENT = 'A2_EVENT'


class EventForMdt(BaseModel):
    __root__: Union[EventForMdt1, str]


class LoggingIntervalMdt1(Enum):
    field_128 = 128
    field_256 = 256
    field_512 = 512
    field_1024 = 1024
    field_2048 = 2048
    field_3072 = 3072
    field_4096 = 4096
    field_6144 = 6144


class LoggingIntervalMdt(BaseModel):
    __root__: Union[LoggingIntervalMdt1, str]


class LoggingDurationMdt1(Enum):
    field_600 = 600
    field_1200 = 1200
    field_2400 = 2400
    field_3600 = 3600
    field_5400 = 5400
    field_7200 = 7200


class LoggingDurationMdt(BaseModel):
    __root__: Union[LoggingDurationMdt1, str]


class PositioningMethodMdt1(Enum):
    GNSS = 'GNSS'
    E_CELL_ID = 'E_CELL_ID'


class PositioningMethodMdt(BaseModel):
    __root__: Union[PositioningMethodMdt1, str]


class CollectionPeriodRmmLteMdt1(Enum):
    field_1024 = 1024
    field_1280 = 1280
    field_2048 = 2048
    field_2560 = 2560
    field_5120 = 5120
    field_10240 = 10240
    field_60000 = 60000


class CollectionPeriodRmmLteMdt(BaseModel):
    __root__: Union[CollectionPeriodRmmLteMdt1, str]


class MeasurementPeriodLteMdt1(Enum):
    field_1024 = 1024
    field_1280 = 1280
    field_2048 = 2048
    field_2560 = 2560
    field_5120 = 5120
    field_10240 = 10240
    field_60000 = 60000


class MeasurementPeriodLteMdt(BaseModel):
    __root__: Union[MeasurementPeriodLteMdt1, str]


class ReportIntervalNrMdt1(Enum):
    field_120 = 120
    field_240 = 240
    field_480 = 480
    field_640 = 640
    field_1024 = 1024
    field_2048 = 2048
    field_5120 = 5120
    field_10240 = 10240
    field_20480 = 20480
    field_40960 = 40960
    field_60000 = 60000
    field_360000 = 360000
    field_720000 = 720000
    field_1800000 = 1800000
    field_3600000 = 3600000


class ReportIntervalNrMdt(BaseModel):
    __root__: Union[ReportIntervalNrMdt1, str]


class LoggingIntervalNrMdt1(Enum):
    field_128 = 128
    field_256 = 256
    field_512 = 512
    field_1024 = 1024
    field_2048 = 2048
    field_3072 = 3072
    field_4096 = 4096
    field_6144 = 6144
    field_320 = 320
    field_640 = 640
    infinity = 'infinity'


class LoggingIntervalNrMdt(BaseModel):
    __root__: Union[LoggingIntervalNrMdt1, str]


class CollectionPeriodRmmNrMdt1(Enum):
    field_1024 = 1024
    field_2048 = 2048
    field_5120 = 5120
    field_10240 = 10240
    field_60000 = 60000


class CollectionPeriodRmmNrMdt(BaseModel):
    __root__: Union[CollectionPeriodRmmNrMdt1, str]


class LoggingDurationNrMdt1(Enum):
    field_600 = 600
    field_1200 = 1200
    field_2400 = 2400
    field_3600 = 3600
    field_5400 = 5400
    field_7200 = 7200


class LoggingDurationNrMdt(BaseModel):
    __root__: Union[LoggingDurationNrMdt1, str]


class TraceData(BaseModel):
    traceRef: constr(regex=r'^[0-9]{3}[0-9]{2,3}-[A-Fa-f0-9]{6}$')
    traceDepth: TraceDepth
    neTypeList: constr(regex=r'^[A-Fa-f0-9]+$')
    eventList: constr(regex=r'^[A-Fa-f0-9]+$')
    collectionEntityIpv4Addr: Optional[Ipv4Addr] = None
    collectionEntityIpv6Addr: Optional[Ipv6Addr] = None
    interfaceList: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = None


class TacInfo(BaseModel):
    tacList: List[Tac] = Field()
    @validator('tacList')
    def validate_min_items_tacList(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value


class MbsfnAreaModel(BaseModel):
    mbsfnAreaId: Optional[conint(ge=0, le=255)] = None
    carrierFrequency: Optional[conint(ge=0, le=262143)] = None


class InterFreqTargetInfo(BaseModel):
    dlCarrierFreq: ArfcnValueNR
    cellIdList: Optional[List[PhysCellId]] = Field(None, max_items=32, min_items=1)


class RoamingOdb1(Enum):
    OUTSIDE_HOME_PLMN = 'OUTSIDE_HOME_PLMN'
    OUTSIDE_HOME_PLMN_COUNTRY = 'OUTSIDE_HOME_PLMN_COUNTRY'


class RoamingOdb(BaseModel):
    __root__: Union[RoamingOdb1, str]


class OdbPacketServices1(Enum):
    ALL_PACKET_SERVICES = 'ALL_PACKET_SERVICES'
    ROAMER_ACCESS_HPLMN_AP = 'ROAMER_ACCESS_HPLMN_AP'
    ROAMER_ACCESS_VPLMN_AP = 'ROAMER_ACCESS_VPLMN_AP'


class OdbPacketServices(BaseModel):
    __root__: Union[Union[OdbPacketServices1, str], NullValue]


class OdbData(BaseModel):
    roamingOdb: Optional[RoamingOdb] = None


class ChargingId(BaseModel):
    __root__: Uint32


class ApplicationChargingId(BaseModel):
    __root__: str


class RatingGroup(BaseModel):
    __root__: Uint32


class ServiceId(BaseModel):
    __root__: Uint32


class QosFlowUsageReport(BaseModel):
    qfi: Qfi
    startTimeStamp: DateTime
    endTimeStamp: DateTime
    downlinkVolume: Int64
    uplinkVolume: Int64


class VolumeTimedReport(BaseModel):
    startTimeStamp: DateTime
    endTimeStamp: DateTime
    downlinkVolume: Int64
    uplinkVolume: Int64


class SteerModeValue1(Enum):
    ACTIVE_STANDBY = 'ACTIVE_STANDBY'
    LOAD_BALANCING = 'LOAD_BALANCING'
    SMALLEST_DELAY = 'SMALLEST_DELAY'
    PRIORITY_BASED = 'PRIORITY_BASED'


class SteerModeValue(BaseModel):
    __root__: Union[SteerModeValue1, str]


class QosData(BaseModel):
    qosId: str = Field(
        ...,
        description='Univocally identifies the QoS control policy data within a PDU session.',
    )
    field_5qi: Optional[Field5Qi] = Field(None, alias='5qi')
    maxbrUl: Optional[BitRateRm] = None
    maxbrDl: Optional[BitRateRm] = None
    gbrUl: Optional[BitRateRm] = None
    gbrDl: Optional[BitRateRm] = None
    arp: Optional[Arp] = None
    qnc: Optional[bool] = Field(
        None,
        description='Indicates whether notifications are requested from 3GPP NG-RAN when the GFBR can no longer (or again) be guaranteed for a QoS Flow during the lifetime of the QoS Flow.',
    )
    priorityLevel: Optional[Field5QiPriorityLevelRm] = None
    averWindow: Optional[AverWindowRm] = None
    maxDataBurstVol: Optional[MaxDataBurstVolRm] = None
    reflectiveQos: Optional[bool] = Field(
        None,
        description='Indicates whether the QoS information is reflective for the corresponding service data flow.',
    )
    sharingKeyDl: Optional[str] = Field(
        None,
        description='Indicates, by containing the same value, what PCC rules may share resource in downlink direction.',
    )
    sharingKeyUl: Optional[str] = Field(
        None,
        description='Indicates, by containing the same value, what PCC rules may share resource in uplink direction.',
    )
    maxPacketLossRateDl: Optional[PacketLossRateRm] = None
    maxPacketLossRateUl: Optional[PacketLossRateRm] = None
    defQosFlowIndication: Optional[bool] = Field(
        None,
        description='Indicates that the dynamic PCC rule shall always have its binding with the QoS Flow associated with the default QoS rule',
    )
    extMaxDataBurstVol: Optional[ExtMaxDataBurstVolRm] = None
    packetDelayBudget: Optional[PacketDelBudget] = None
    packetErrorRate: Optional[PacketErrRate] = None


class ConditionData(BaseModel):
    condId: str = Field(
        ..., description='Uniquely identifies the condition data within a PDU session.'
    )
    activationTime: Optional[DateTimeRm] = None
    deactivationTime: Optional[DateTimeRm] = None
    accessType: Optional[AccessType] = None
    ratType: Optional[RatType] = None


class UsageMonitoringData(BaseModel):
    umId: str = Field(
        ...,
        description='Univocally identifies the usage monitoring policy data within a PDU session.',
    )
    nextTimeThreshold: Optional[DurationSecRm] = None
    inactivityTime: Optional[DurationSecRm] = None
    exUsagePccRuleIds: Optional[List[str]] = Field(
        None,
        description='Contains the PCC rule identifier(s) which corresponding service data flow(s) shall be excluded from PDU Session usage monitoring. It is only included in the UsageMonitoringData instance for session level usage monitoring.',
        min_items=1,
    )


class QosCharacteristics(BaseModel):
    field_5qi: Field5Qi = Field(..., alias='5qi')
    resourceType: QosResourceType
    priorityLevel: Field5QiPriorityLevel
    packetDelayBudget: PacketDelBudget
    packetErrorRate: PacketErrRate
    averagingWindow: Optional[AverWindow] = None
    maxDataBurstVol: Optional[MaxDataBurstVol] = None
    extMaxDataBurstVol: Optional[ExtMaxDataBurstVol] = None


class ChargingInformation(BaseModel):
    primaryChfAddress: Uri
    secondaryChfAddress: Uri
    primaryChfSetId: Optional[NfSetId] = None
    primaryChfInstanceId: Optional[NfInstanceId] = None
    secondaryChfSetId: Optional[NfSetId] = None
    secondaryChfInstanceId: Optional[NfInstanceId] = None


class AccuUsageReport(BaseModel):
    refUmIds: str = Field(
        ...,
        description='An id referencing UsageMonitoringData objects associated with this usage report.',
    )
    nextTimeUsage: Optional[DurationSec] = None


class UpPathChgEvent(BaseModel):
    notificationUri: Uri
    notifCorreId: str = Field(
        ...,
        description='It is used to set the value of Notification Correlation ID in the notification sent by the SMF.',
    )
    dnaiChgType: DnaiChangeType
    afAckInd: Optional[bool] = None


class AccNetChId(BaseModel):
    accNetChaIdValue: ChargingId
    refPccRuleIds: Optional[List[str]] = Field(
        None,
        description='Contains the identifier of the PCC rule(s) associated to the provided Access Network Charging Identifier.',
        min_items=1,
    )
    sessionChScope: Optional[bool] = Field(
        None,
        description='When it is included and set to true, indicates the Access Network Charging Identifier applies to the whole PDU Session',
    )


class AccNetChargingAddress1(BaseModel):
    anChargIpv4Addr: Ipv4Addr
    anChargIpv6Addr: Optional[Ipv6Addr] = None


class AccNetChargingAddress2(BaseModel):
    anChargIpv4Addr: Optional[Ipv4Addr] = None
    anChargIpv6Addr: Ipv6Addr


class AccNetChargingAddress(BaseModel):
    __root__: Union[AccNetChargingAddress1, AccNetChargingAddress2] = Field(
        ...,
        description='Describes the network entity within the access network performing charging',
    )


class RequestedUsageData(BaseModel):
    refUmIds: Optional[List[str]] = Field(
        None,
        description='An array of usage monitoring data id references to the usage monitoring data instances for which the PCF is requesting a usage report. This attribute shall only be provided when allUmIds is not set to true.',
        min_items=1,
    )
    allUmIds: Optional[bool] = Field(
        None,
        description="This boolean indicates whether requested usage data applies to all usage monitoring data instances. When it's not included, it means requested usage data shall only apply to the usage monitoring data instances referenced by the refUmIds attribute.",
    )


class RequestedQos(BaseModel):
    field_5qi: Field5Qi = Field(..., alias='5qi')
    gbrUl: Optional[BitRate] = None
    gbrDl: Optional[BitRate] = None


class QosNotificationControlInfo(BaseModel):
    refPccRuleIds: List[str] = Field(
        ...,
        description='An array of PCC rule id references to the PCC rules associated with the QoS notification control info.',
        min_items=1,
    )
    altQosParamId: Optional[str] = None


class AuthorizedDefaultQos(BaseModel):
    field_5qi: Optional[Field5Qi] = Field(None, alias='5qi')
    arp: Optional[Arp] = None
    priorityLevel: Optional[Field5QiPriorityLevelRm] = None
    averWindow: Optional[AverWindowRm] = None
    maxDataBurstVol: Optional[MaxDataBurstVolRm] = None
    maxbrUl: Optional[BitRateRm] = None
    maxbrDl: Optional[BitRateRm] = None
    gbrUl: Optional[BitRateRm] = None
    gbrDl: Optional[BitRateRm] = None
    extMaxDataBurstVol: Optional[ExtMaxDataBurstVolRm] = None


class SteeringMode(BaseModel):
    steerModeValue: SteerModeValue
    active: Optional[AccessType] = None
    standby: Optional[AccessTypeRm] = None
    field_3gLoad: Optional[Uinteger] = Field(None, alias='3gLoad')
    prioAcc: Optional[AccessType] = None


class AdditionalAccessInfo(BaseModel):
    accessType: AccessType
    ratType: Optional[RatType] = None


class QosMonitoringReport(BaseModel):
    refPccRuleIds: List[str] = Field(
        ...,
        description='An array of PCC rule id references to the PCC rules associated with the QoS monitoring report.',
        min_items=1,
    )
    ulDelays: Optional[List[int]] = Field(None, min_items=1)
    dlDelays: Optional[List[int]] = Field(None, min_items=1)
    rtDelays: Optional[List[int]] = Field(None, min_items=1)


class BridgeManagementContainer(BaseModel):
    bridgeManCont: Bytes


class IpMulticastAddressInfo(BaseModel):
    srcIpv4Addr: Optional[Ipv4Addr] = None
    ipv4MulAddr: Optional[Ipv4Addr] = None
    srcIpv6Addr: Optional[Ipv6Addr] = None
    ipv6MulAddr: Optional[Ipv6Addr] = None


class Field5GSmCause(BaseModel):
    __root__: Uinteger


class EpsRanNasRelCause(BaseModel):
    __root__: str = Field(..., description='Defines the EPS RAN/NAS release cause.')


class PacketFilterContent(BaseModel):
    __root__: str = Field(..., description='Defines a packet filter for an IP flow.')


class FlowDescription(BaseModel):
    __root__: str = Field(..., description='Defines a packet filter for an IP flow.')


class TsnPortNumber(BaseModel):
    __root__: Uinteger


class ApplicationDescriptor(BaseModel):
    __root__: Bytes


class FlowDirection1(Enum):
    DOWNLINK = 'DOWNLINK'
    UPLINK = 'UPLINK'
    BIDIRECTIONAL = 'BIDIRECTIONAL'
    UNSPECIFIED = 'UNSPECIFIED'


class FlowDirection(BaseModel):
    __root__: Union[FlowDirection1, str] = Field(
        ...,
        description='Possible values are - DOWNLINK: The corresponding filter applies for traffic to the UE. - UPLINK: The corresponding filter applies for traffic from the UE. - BIDIRECTIONAL: The corresponding filter applies for traffic both to and from the UE. - UNSPECIFIED: The corresponding filter applies for traffic to the UE (downlink), but has no specific direction declared. The service data flow detection shall apply the filter for uplink traffic as if the filter was bidirectional. The PCF shall not use the value UNSPECIFIED in filters created by the network in NW-initiated procedures. The PCF shall only include the value UNSPECIFIED in filters in UE-initiated procedures if the same value is received from the SMF.\n',
    )


class FlowDirectionRm(BaseModel):
    __root__: Union[FlowDirection, NullValue]


class ReportingLevel1(Enum):
    SER_ID_LEVEL = 'SER_ID_LEVEL'
    RAT_GR_LEVEL = 'RAT_GR_LEVEL'
    SPON_CON_LEVEL = 'SPON_CON_LEVEL'


class ReportingLevel(BaseModel):
    __root__: Union[ReportingLevel1, NullValue, str] = Field(
        ...,
        description='Possible values are - SER_ID_LEVEL: Indicates that the usage shall be reported on service id and rating group combination level. - RAT_GR_LEVEL: Indicates that the usage shall be reported on rating group level. - SPON_CON_LEVEL: Indicates that the usage shall be reported on sponsor identity and rating group combination level.\n',
    )


class MeteringMethod1(Enum):
    DURATION = 'DURATION'
    VOLUME = 'VOLUME'
    DURATION_VOLUME = 'DURATION_VOLUME'
    EVENT = 'EVENT'


class MeteringMethod(BaseModel):
    __root__: Union[MeteringMethod1, NullValue, str] = Field(
        ...,
        description='Possible values are - DURATION: Indicates that the duration of the service data flow traffic shall be metered. - VOLUME: Indicates that volume of the service data flow traffic shall be metered. - DURATION_VOLUME: Indicates that the duration and the volume of the service data flow traffic shall be metered. - EVENT: Indicates that events of the service data flow traffic shall be metered.\n',
    )


class PolicyControlRequestTrigger1(Enum):
    PLMN_CH = 'PLMN_CH'
    RES_MO_RE = 'RES_MO_RE'
    AC_TY_CH = 'AC_TY_CH'
    UE_IP_CH = 'UE_IP_CH'
    UE_MAC_CH = 'UE_MAC_CH'
    AN_CH_COR = 'AN_CH_COR'
    US_RE = 'US_RE'
    APP_STA = 'APP_STA'
    APP_STO = 'APP_STO'
    AN_INFO = 'AN_INFO'
    CM_SES_FAIL = 'CM_SES_FAIL'
    PS_DA_OFF = 'PS_DA_OFF'
    DEF_QOS_CH = 'DEF_QOS_CH'
    SE_AMBR_CH = 'SE_AMBR_CH'
    QOS_NOTIF = 'QOS_NOTIF'
    NO_CREDIT = 'NO_CREDIT'
    REALLO_OF_CREDIT = 'REALLO_OF_CREDIT'
    PRA_CH = 'PRA_CH'
    SAREA_CH = 'SAREA_CH'
    SCNN_CH = 'SCNN_CH'
    RE_TIMEOUT = 'RE_TIMEOUT'
    RES_RELEASE = 'RES_RELEASE'
    SUCC_RES_ALLO = 'SUCC_RES_ALLO'
    RAT_TY_CH = 'RAT_TY_CH'
    REF_QOS_IND_CH = 'REF_QOS_IND_CH'
    NUM_OF_PACKET_FILTER = 'NUM_OF_PACKET_FILTER'
    UE_STATUS_RESUME = 'UE_STATUS_RESUME'
    UE_TZ_CH = 'UE_TZ_CH'
    AUTH_PROF_CH = 'AUTH_PROF_CH'
    QOS_MONITORING = 'QOS_MONITORING'
    SCELL_CH = 'SCELL_CH'
    EPS_FALLBACK = 'EPS_FALLBACK'
    MA_PDU = 'MA_PDU'
    TSN_BRIDGE_INFO = 'TSN_BRIDGE_INFO'
    field_5G_RG_JOIN = '5G_RG_JOIN'
    field_5G_RG_LEAVE = '5G_RG_LEAVE'
    DDN_FAILURE = 'DDN_FAILURE'
    DDN_DELIVERY_STATUS = 'DDN_DELIVERY_STATUS'
    GROUP_ID_LIST_CHG = 'GROUP_ID_LIST_CHG'
    DDN_FAILURE_CANCELLATION = 'DDN_FAILURE_CANCELLATION'
    DDN_DELIVERY_STATUS_CANCELLATION = 'DDN_DELIVERY_STATUS_CANCELLATION'
    VPLMN_QOS_CH = 'VPLMN_QOS_CH'


class PolicyControlRequestTrigger(BaseModel):
    __root__: Union[PolicyControlRequestTrigger1, str] = Field(
        ...,
        description='Possible values are - PLMN_CH: PLMN Change - RES_MO_RE: A request for resource modification has been received by the SMF. The SMF always reports to the PCF. - AC_TY_CH: Access Type Change - UE_IP_CH: UE IP address change. The SMF always reports to the PCF. - UE_MAC_CH: A new UE MAC address is detected or a used UE MAC address is inactive for a specific period - AN_CH_COR: Access Network Charging Correlation Information - US_RE: The PDU Session or the Monitoring key specific resources consumed by a UE either reached the threshold or needs to be reported for other reasons. - APP_STA: The start of application traffic has been detected. - APP_STO: The stop of application traffic has been detected. - AN_INFO: Access Network Information report - CM_SES_FAIL: Credit management session failure - PS_DA_OFF: The SMF reports when the 3GPP PS Data Off status changes. The SMF always reports to the PCF. - DEF_QOS_CH: Default QoS Change. The SMF always reports to the PCF. - SE_AMBR_CH: Session AMBR Change. The SMF always reports to the PCF. - QOS_NOTIF: The SMF notify the PCF when receiving notification from RAN that QoS targets of the QoS Flow cannot be guranteed or gurateed again. - NO_CREDIT: Out of credit - REALLO_OF_CREDIT: Reallocation of credit - PRA_CH: Change of UE presence in Presence Reporting Area - SAREA_CH: Location Change with respect to the Serving Area - SCNN_CH: Location Change with respect to the Serving CN node - RE_TIMEOUT: Indicates the SMF generated the request because there has been a PCC revalidation timeout - RES_RELEASE: Indicate that the SMF can inform the PCF of the outcome of the release of resources for those rules that require so. - SUCC_RES_ALLO: Indicates that the requested rule data is the successful resource allocation. - RAT_TY_CH: RAT Type Change. - REF_QOS_IND_CH: Reflective QoS indication Change - NUM_OF_PACKET_FILTER: Indicates that the SMF shall report the number of supported packet filter for signalled QoS rules - UE_STATUS_RESUME: Indicates that the UE’s status is resumed. - UE_TZ_CH: UE Time Zone Change - AUTH_PROF_CH: The DN-AAA authorization profile index has changed - QOS_MONITORING: Indicate that the SMF notifies the PCF of the QoS Monitoring information. - SCELL_CH: Location Change with respect to the Serving Cell. - EPS_FALLBACK: EPS Fallback report is enabled in the SMF. - MA_PDU: UE Indicates that the SMF notifies the PCF of the MA PDU session request - TSN_BRIDGE_INFO: 5GS Bridge information available - 5G_RG_JOIN: The 5G-RG has joined to an IP Multicast Group. - 5G_RG_LEAVE: The 5G-RG has left an IP Multicast Group. - DDN_FAILURE: Event subscription for DDN Failure event received. - DDN_DELIVERY_STATUS: Event subscription for DDN Delivery Status received. - GROUP_ID_LIST_CHG: UE Internal Group Identifier(s) has changed: the SMF reports that UDM provided list of group Ids has changed. - DDN_FAILURE_CANCELLATION: The event subscription for DDN Failure event is cancelled. - DDN_DELIVERY_STATUS_CANCELLATION: The event subscription for DDD STATUS is cancelled. - VPLMN_QOS_CH: Change of the QoS supported in the VPLMN. \n',
    )


class RequestedRuleDataType1(Enum):
    CH_ID = 'CH_ID'
    MS_TIME_ZONE = 'MS_TIME_ZONE'
    USER_LOC_INFO = 'USER_LOC_INFO'
    RES_RELEASE = 'RES_RELEASE'
    SUCC_RES_ALLO = 'SUCC_RES_ALLO'
    EPS_FALLBACK = 'EPS_FALLBACK'


class RequestedRuleDataType(BaseModel):
    __root__: Union[RequestedRuleDataType1, str] = Field(
        ...,
        description="Possible values are - CH_ID: Indicates that the requested rule data is the charging identifier.  - MS_TIME_ZONE: Indicates that the requested access network info type is the UE's timezone. - USER_LOC_INFO: Indicates that the requested access network info type is the UE's location. - RES_RELEASE: Indicates that the requested rule data is the result of the release of resource. - SUCC_RES_ALLO: Indicates that the requested rule data is the successful resource allocation. - EPS_FALLBACK: Indicates that the requested rule data is the report of QoS flow rejection due to EPS fallback.\n",
    )


class RuleStatus1(Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'


class RuleStatus(BaseModel):
    __root__: Union[RuleStatus1, str] = Field(
        ...,
        description='Possible values are - ACTIVE: Indicates that the PCC rule(s) are successfully installed (for those provisioned from PCF) or activated (for those pre-defined in SMF), or the session rule(s) are successfully installed  - INACTIVE: Indicates that the PCC rule(s) are removed (for those provisioned from PCF) or inactive (for those pre-defined in SMF) or the session rule(s) are removed.\n',
    )


class FailureCode1(Enum):
    UNK_RULE_ID = 'UNK_RULE_ID'
    RA_GR_ERR = 'RA_GR_ERR'
    SER_ID_ERR = 'SER_ID_ERR'
    NF_MAL = 'NF_MAL'
    RES_LIM = 'RES_LIM'
    MAX_NR_QoS_FLOW = 'MAX_NR_QoS_FLOW'
    MISS_FLOW_INFO = 'MISS_FLOW_INFO'
    RES_ALLO_FAIL = 'RES_ALLO_FAIL'
    UNSUCC_QOS_VAL = 'UNSUCC_QOS_VAL'
    INCOR_FLOW_INFO = 'INCOR_FLOW_INFO'
    PS_TO_CS_HAN = 'PS_TO_CS_HAN'
    APP_ID_ERR = 'APP_ID_ERR'
    NO_QOS_FLOW_BOUND = 'NO_QOS_FLOW_BOUND'
    FILTER_RES = 'FILTER_RES'
    MISS_REDI_SER_ADDR = 'MISS_REDI_SER_ADDR'
    CM_END_USER_SER_DENIED = 'CM_END_USER_SER_DENIED'
    CM_CREDIT_CON_NOT_APP = 'CM_CREDIT_CON_NOT_APP'
    CM_AUTH_REJ = 'CM_AUTH_REJ'
    CM_USER_UNK = 'CM_USER_UNK'
    CM_RAT_FAILED = 'CM_RAT_FAILED'
    UE_STA_SUSP = 'UE_STA_SUSP'


class FailureCode(BaseModel):
    __root__: Union[FailureCode1, str] = Field(
        ...,
        description='Possible values are\n  - UNK_RULE_ID: Indicates that the pre-provisioned PCC rule could not be successfully activated because the PCC rule identifier is unknown to the SMF.\n  - RA_GR_ERR: Indicate that the PCC rule could not be successfully installed or enforced because the Rating Group specified within the Charging Data policy decision which the PCC rule refers to is unknown or, invalid.\n  - SER_ID_ERR: Indicate that the PCC rule could not be successfully installed or enforced because the Service Identifier specified within the Charging Data policy decision which the PCC rule refers to is invalid, unknown, or not applicable to the service being charged.\n  - NF_MAL: Indicate that the PCC rule could not be successfully installed (for those provisioned from the PCF) or activated (for those pre-defined in SMF) or enforced (for those already successfully installed) due to SMF/UPF malfunction.\n  - RES_LIM: Indicate that the PCC rule could not be successfully installed (for those provisioned from PCF) or activated (for those pre-defined in SMF) or enforced (for those already successfully installed) due to a limitation of resources at the SMF/UPF.\n  - MAX_NR_QoS_FLOW: Indicate that the PCC rule could not be successfully installed (for those provisioned from PCF) or activated (for those pre-defined in SMF) or enforced (for those already successfully installed) due to the fact that the maximum number of QoS flows has been reached for the PDU session.\n  - MISS_FLOW_INFO: Indicate that the PCC rule could not be successfully installed or enforced because neither the "flowInfos" attribute nor the "appId" attribute is specified within the PccRule data structure by the PCF during the first install request of the PCC rule.\n  - RES_ALLO_FAIL: Indicate that the PCC rule could not be successfully installed or maintained since the QoS flow establishment/modification failed, or the QoS flow was released.\n  - UNSUCC_QOS_VAL: indicate that the QoS validation has failed or when Guaranteed Bandwidth > Max-Requested-Bandwidth.\n  - INCOR_FLOW_INFO: Indicate that the PCC rule could not be successfully installed or modified at the SMF because the provided flow information is not supported by the network (e.g. the provided IP address(es) or Ipv6 prefix(es) do not correspond to an IP version applicable for the PDU session).\n  - PS_TO_CS_HAN: Indicate that the PCC rule could not be maintained because of PS to CS handover.\n  - APP_ID_ERR: Indicate that the rule could not be successfully installed or enforced because the Application Identifier is invalid, unknown, or not applicable to the application required for detection.\n  - NO_QOS_FLOW_BOUND: Indicate that there is no QoS flow which the SMF can bind the PCC rule(s) to.\n  - FILTER_RES: Indicate that the Flow Information within the "flowInfos" attribute cannot be handled by the SMF because any of the restrictions defined in subclause 5.4.2 of 3GPP TS 29.212 was not met.\n  - MISS_REDI_SER_ADDR: Indicate that the PCC rule could not be successfully installed or enforced at the SMF because there is no valid Redirect Server Address within the Traffic Control Data policy decision which the PCC rule refers to provided by the PCF and no preconfigured redirection address for this PCC rule at the SMF.\n  - CM_END_USER_SER_DENIED: Indicate that the charging system denied the service request due to service restrictions (e.g. terminate rating group) or limitations related to the end-user, for example the end-user\'s account could not cover the requested service.\n  - CM_CREDIT_CON_NOT_APP: Indicate that the charging system determined that the service can be granted to the end user but no further credit control is needed for the service (e.g. service is free of charge or is treated for offline charging).\n  - CM_AUTH_REJ: Indicate that the charging system denied the service request in order to terminate the service for which credit is requested.\n  - CM_USER_UNK: Indicate that the specified end user could not be found in the charging system.\n  - CM_RAT_FAILED: Indicate that the charging system cannot rate the service request due to insufficient rating input, incorrect AVP combination or due to an attribute or an attribute value that is not recognized or supported in the rating.\n  - UE_STA_SUSP: Indicates that the UE is in suspend state.\n',
    )


class AfSigProtocol1(Enum):
    NO_INFORMATION = 'NO_INFORMATION'
    SIP = 'SIP'


class AfSigProtocol(BaseModel):
    __root__: Union[AfSigProtocol1, NullValue, str] = Field(
        ...,
        description='Possible values are - NO_INFORMATION: Indicate that no information about the AF signalling protocol is being provided.  - SIP: Indicate that the signalling protocol is Session Initiation Protocol.\n',
    )


class RuleOperation1(Enum):
    CREATE_PCC_RULE = 'CREATE_PCC_RULE'
    DELETE_PCC_RULE = 'DELETE_PCC_RULE'
    MODIFY_PCC_RULE_AND_ADD_PACKET_FILTERS = 'MODIFY_PCC_RULE_AND_ADD_PACKET_FILTERS'
    MODIFY__PCC_RULE_AND_REPLACE_PACKET_FILTERS = (
        'MODIFY_ PCC_RULE_AND_REPLACE_PACKET_FILTERS'
    )
    MODIFY__PCC_RULE_AND_DELETE_PACKET_FILTERS = (
        'MODIFY_ PCC_RULE_AND_DELETE_PACKET_FILTERS'
    )
    MODIFY_PCC_RULE_WITHOUT_MODIFY_PACKET_FILTERS = (
        'MODIFY_PCC_RULE_WITHOUT_MODIFY_PACKET_FILTERS'
    )


class RuleOperation(BaseModel):
    __root__: Union[RuleOperation1, str] = Field(
        ...,
        description='Possible values are - CREATE_PCC_RULE: Indicates to create a new PCC rule to reserve the resource requested by the UE.  - DELETE_PCC_RULE: Indicates to delete a PCC rule corresponding to reserve the resource requested by the UE. - MODIFY_PCC_RULE_AND_ADD_PACKET_FILTERS: Indicates to modify the PCC rule by adding new packet filter(s). - MODIFY_ PCC_RULE_AND_REPLACE_PACKET_FILTERS: Indicates to modify the PCC rule by replacing the existing packet filter(s). - MODIFY_ PCC_RULE_AND_DELETE_PACKET_FILTERS: Indicates to modify the PCC rule by deleting the existing packet filter(s). - MODIFY_PCC_RULE_WITHOUT_MODIFY_PACKET_FILTERS: Indicates to modify the PCC rule by modifying the QoS of the PCC rule.\n',
    )


class RedirectAddressType1(Enum):
    IPV4_ADDR = 'IPV4_ADDR'
    IPV6_ADDR = 'IPV6_ADDR'
    URL = 'URL'
    SIP_URI = 'SIP_URI'


class RedirectAddressType(BaseModel):
    __root__: Union[RedirectAddressType1, str] = Field(
        ...,
        description='Possible values are - IPV4_ADDR: Indicates that the address type is in the form of "dotted-decimal" IPv4 address. - IPV6_ADDR: Indicates that the address type is in the form of IPv6 address. - URL: Indicates that the address type is in the form of Uniform Resource Locator. - SIP_URI: Indicates that the address type is in the form of SIP Uniform Resource Identifier.\n',
    )


class QosFlowUsage1(Enum):
    GENERAL = 'GENERAL'
    IMS_SIG = 'IMS_SIG'


class QosFlowUsage(BaseModel):
    __root__: Union[QosFlowUsage1, str] = Field(
        ...,
        description='Possible values are - GENERAL: Indicate no specific QoS flow usage information is available.  - IMS_SIG: Indicate that the QoS flow is used for IMS signalling only.\n',
    )


class FailureCause1(Enum):
    PCC_RULE_EVENT = 'PCC_RULE_EVENT'
    PCC_QOS_FLOW_EVENT = 'PCC_QOS_FLOW_EVENT'
    RULE_PERMANENT_ERROR = 'RULE_PERMANENT_ERROR'
    RULE_TEMPORARY_ERROR = 'RULE_TEMPORARY_ERROR'
    POL_DEC_ERROR = 'POL_DEC_ERROR'


class FailureCause(BaseModel):
    __root__: Union[FailureCause1, str]


class CreditManagementStatus1(Enum):
    END_USER_SER_DENIED = 'END_USER_SER_DENIED'
    CREDIT_CTRL_NOT_APP = 'CREDIT_CTRL_NOT_APP'
    AUTH_REJECTED = 'AUTH_REJECTED'
    USER_UNKNOWN = 'USER_UNKNOWN'
    RATING_FAILED = 'RATING_FAILED'


class CreditManagementStatus(BaseModel):
    __root__: Union[CreditManagementStatus1, str]


class SessionRuleFailureCode1(Enum):
    NF_MAL = 'NF_MAL'
    RES_LIM = 'RES_LIM'
    UNSUCC_QOS_VAL = 'UNSUCC_QOS_VAL'
    UE_STA_SUSP = 'UE_STA_SUSP'


class SessionRuleFailureCode(BaseModel):
    __root__: Union[SessionRuleFailureCode1, str] = Field(
        ...,
        description='Possible values are\n  - NF_MAL: Indicate that the PCC rule could not be successfully installed (for those provisioned from the PCF) or activated (for those pre-defined in SMF) or enforced (for those already successfully installed) due to SMF/UPF malfunction.\n  - RES_LIM: Indicate that the PCC rule could not be successfully installed (for those provisioned from PCF) or activated (for those pre-defined in SMF) or enforced (for those already successfully installed) due to a limitation of resources at the SMF/UPF.\n  - UNSUCC_QOS_VAL: indicate that the QoS validation has failed.\n  - UE_STA_SUSP: Indicates that the UE is in suspend state.\n',
    )


class SteeringFunctionality1(Enum):
    MPTCP = 'MPTCP'
    ATSSS_LL = 'ATSSS_LL'


class SteeringFunctionality(BaseModel):
    __root__: Union[SteeringFunctionality1, str] = Field(
        ...,
        description='Possible values are\n  - MPTCP: Indicates that PCF authorizes the MPTCP functionality to support traffic steering, switching and splitting.\n  - ATSSS_LL: Indicates that PCF authorizes the ATSSS-LL functionality to support traffic steering, switching and splitting.\n',
    )


class MulticastAccessControl1(Enum):
    ALLOWED = 'ALLOWED'
    NOT_ALLOWED = 'NOT_ALLOWED'


class MulticastAccessControl(BaseModel):
    __root__: Union[MulticastAccessControl1, str]


class RequestedQosMonitoringParameter1(Enum):
    DOWNLINK = 'DOWNLINK'
    UPLINK = 'UPLINK'
    ROUND_TRIP = 'ROUND_TRIP'


class RequestedQosMonitoringParameter(BaseModel):
    __root__: Union[RequestedQosMonitoringParameter1, str]


class ReportingFrequency1(Enum):
    EVENT_TRIGGERED = 'EVENT_TRIGGERED'
    PERIODIC = 'PERIODIC'
    SESSION_RELEASE = 'SESSION_RELEASE'


class ReportingFrequency(BaseModel):
    __root__: Union[ReportingFrequency1, str]


class SmPolicyAssociationReleaseCause1(Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    UE_SUBSCRIPTION = 'UE_SUBSCRIPTION'
    INSUFFICIENT_RES = 'INSUFFICIENT_RES'
    VALIDATION_CONDITION_NOT_MET = 'VALIDATION_CONDITION_NOT_MET'


class SmPolicyAssociationReleaseCause(BaseModel):
    __root__: Union[SmPolicyAssociationReleaseCause1, str]


class PduSessionRelCause1(Enum):
    PS_TO_CS_HO = 'PS_TO_CS_HO'


class PduSessionRelCause(BaseModel):
    __root__: Union[PduSessionRelCause1, str]


class MaPduIndication1(Enum):
    MA_PDU_REQUEST = 'MA_PDU_REQUEST'
    MA_PDU_NETWORK_UPGRADE_ALLOWED = 'MA_PDU_NETWORK_UPGRADE_ALLOWED'


class MaPduIndication(BaseModel):
    __root__: Union[MaPduIndication1, str]


class AtsssCapability1(Enum):
    MPTCP_ATSSS_LL_WITH_ASMODE_UL = 'MPTCP_ATSSS_LL_WITH_ASMODE_UL'
    MPTCP_ATSSS_LL_WITH_EXSDMODE_DL_ASMODE_UL = (
        'MPTCP_ATSSS_LL_WITH_EXSDMODE_DL_ASMODE_UL'
    )
    MPTCP_ATSSS_LL_WITH_ASMODE_DLUL = 'MPTCP_ATSSS_LL_WITH_ASMODE_DLUL'
    ATSSS_LL = 'ATSSS_LL'
    MPTCP_ATSSS_LL = 'MPTCP_ATSSS_LL'


class AtsssCapabilityModel(BaseModel):
    __root__: Union[AtsssCapability1, str]


class NetLocAccessSupport1(Enum):
    ANR_NOT_SUPPORTED = 'ANR_NOT_SUPPORTED'
    TZR_NOT_SUPPORTED = 'TZR_NOT_SUPPORTED'
    LOC_NOT_SUPPORTED = 'LOC_NOT_SUPPORTED'


class NetLocAccessSupport(BaseModel):
    __root__: Union[NetLocAccessSupport1, str] = Field(
        ...,
        description='Possible values are - ANR_NOT_SUPPORTED: Indicates that the access network does not support the report of access network information. - TZR_NOT_SUPPORTED: Indicates that the access network does not support the report of UE time zone. - LOC_NOT_SUPPORTED: Indicates that the access network does not support the report of UE Location (or PLMN Id).\n',
    )


class PolicyDecisionFailureCode1(Enum):
    TRA_CTRL_DECS_ERR = 'TRA_CTRL_DECS_ERR'
    QOS_DECS_ERR = 'QOS_DECS_ERR'
    CHG_DECS_ERR = 'CHG_DECS_ERR'
    USA_MON_DECS_ERR = 'USA_MON_DECS_ERR'
    QOS_MON_DECS_ERR = 'QOS_MON_DECS_ERR'
    CON_DATA_ERR = 'CON_DATA_ERR'


class PolicyDecisionFailureCode(BaseModel):
    __root__: Union[PolicyDecisionFailureCode1, str]


class NotificationControlIndication1(Enum):
    DDN_FAILURE = 'DDN_FAILURE'
    DDD_STATUS = 'DDD_STATUS'


class NotificationControlIndication(BaseModel):
    __root__: Union[NotificationControlIndication1, str]


class FlowStatus1(Enum):
    ENABLED_UPLINK = 'ENABLED-UPLINK'
    ENABLED_DOWNLINK = 'ENABLED-DOWNLINK'
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'
    REMOVED = 'REMOVED'


class FlowStatus(BaseModel):
    __root__: Union[FlowStatus1, str]


class AnGwAddress1(BaseModel):
    anGwIpv4Addr: Ipv4Addr
    anGwIpv6Addr: Optional[Ipv6Addr] = None


class AnGwAddress2(BaseModel):
    anGwIpv4Addr: Optional[Ipv4Addr] = None
    anGwIpv6Addr: Ipv6Addr


class AnGwAddress(BaseModel):
    __root__: Union[AnGwAddress1, AnGwAddress2] = Field(
        ...,
        description='describes the address of the access network gateway control node',
    )


class TemporalValidity(BaseModel):
    startTime: Optional[DateTime] = None
    stopTime: Optional[DateTime] = None


class UeIdentityInfo1(BaseModel):
    gpsi: Gpsi
    pei: Optional[Pei] = None
    supi: Optional[Supi] = None


class UeIdentityInfo2(BaseModel):
    gpsi: Optional[Gpsi] = None
    pei: Pei
    supi: Optional[Supi] = None


class UeIdentityInfo3(BaseModel):
    gpsi: Optional[Gpsi] = None
    pei: Optional[Pei] = None
    supi: Supi


class UeIdentityInfo(BaseModel):
    __root__: Union[UeIdentityInfo1, UeIdentityInfo2, UeIdentityInfo3] = Field(
        ..., description='Represents 5GS-Level UE identities.'
    )


class QosMonitoringInformation(BaseModel):
    repThreshDl: Optional[int] = None
    repThreshUl: Optional[int] = None
    repThreshRp: Optional[int] = None


class QosMonitoringInformationRm(BaseModel):
    repThreshDl: Optional[int] = None
    repThreshUl: Optional[int] = None
    repThreshRp: Optional[int] = None


class PcscfRestorationRequestData1(BaseModel):
    dnn: Optional[Dnn] = None
    ipDomain: Optional[str] = None
    sliceInfo: Optional[Snssai1] = None
    supi: Optional[Supi] = None
    ueIpv4: Ipv4Addr
    ueIpv6: Optional[Ipv6Addr] = None


class PcscfRestorationRequestData2(BaseModel):
    dnn: Optional[Dnn] = None
    ipDomain: Optional[str] = None
    sliceInfo: Optional[Snssai1] = None
    supi: Optional[Supi] = None
    ueIpv4: Optional[Ipv4Addr] = None
    ueIpv6: Ipv6Addr


class PcscfRestorationRequestData(BaseModel):
    __root__: Union[PcscfRestorationRequestData1, PcscfRestorationRequestData2] = Field(
        ..., description='Indicates P-CSCF restoration.'
    )


class TscaiInputContainer(BaseModel):
    periodicity: Optional[Uinteger] = None
    burstArrivalTime: Optional[DateTime] = None


class AfAppId(BaseModel):
    __root__: str = Field(..., description='Contains an AF application identifier.')


class AspId(BaseModel):
    __root__: str = Field(
        ..., description='Contains an identity of an application service provider.'
    )


class CodecData(BaseModel):
    __root__: str = Field(..., description='Contains codec related information.')


class ContentVersion(BaseModel):
    __root__: int = Field(
        ..., description='Represents the content version of some content.'
    )


class FlowDescriptionModel(BaseModel):
    __root__: str = Field(..., description='Defines a packet filter of an IP flow.')


class SponId(BaseModel):
    __root__: str = Field(..., description='Contains an identity of a sponsor.')


class ServiceUrn(BaseModel):
    __root__: str = Field(
        ...,
        description='Contains values of the service URN and may include subservices.',
    )


class TosTrafficClass(BaseModel):
    __root__: str = Field(
        ...,
        description='2-octet string, where each octet is encoded in hexadecimal representation. The first octet contains the IPv4 Type-of-Service or the IPv6 Traffic-Class field and the second octet contains the ToS/Traffic Class mask field.',
    )


class TosTrafficClassRm(BaseModel):
    __root__: Optional[str] = Field(
        None,
        description='this data type is defined in the same way as the TosTrafficClass data type, but with the OpenAPI nullable property set to true',
    )


class TscPriorityLevel(BaseModel):
    __root__: conint(ge=1, le=8)


class TscPriorityLevelRm(BaseModel):
    __root__: Optional[conint(ge=1, le=8)] = None


class MediaType1(Enum):
    AUDIO = 'AUDIO'
    VIDEO = 'VIDEO'
    DATA = 'DATA'
    APPLICATION = 'APPLICATION'
    CONTROL = 'CONTROL'
    TEXT = 'TEXT'
    MESSAGE = 'MESSAGE'
    OTHER = 'OTHER'


class MediaType(BaseModel):
    __root__: Union[MediaType1, str]


class ReservPriority1(Enum):
    PRIO_1 = 'PRIO_1'
    PRIO_2 = 'PRIO_2'
    PRIO_3 = 'PRIO_3'
    PRIO_4 = 'PRIO_4'
    PRIO_5 = 'PRIO_5'
    PRIO_6 = 'PRIO_6'
    PRIO_7 = 'PRIO_7'
    PRIO_8 = 'PRIO_8'
    PRIO_9 = 'PRIO_9'
    PRIO_10 = 'PRIO_10'
    PRIO_11 = 'PRIO_11'
    PRIO_12 = 'PRIO_12'
    PRIO_13 = 'PRIO_13'
    PRIO_14 = 'PRIO_14'
    PRIO_15 = 'PRIO_15'
    PRIO_16 = 'PRIO_16'


class ReservPriority(BaseModel):
    __root__: Union[ReservPriority1, str]


class ServAuthInfo1(Enum):
    TP_NOT_KNOWN = 'TP_NOT_KNOWN'
    TP_EXPIRED = 'TP_EXPIRED'
    TP_NOT_YET_OCURRED = 'TP_NOT_YET_OCURRED'


class ServAuthInfo(BaseModel):
    __root__: Union[ServAuthInfo1, str]


class SponsoringStatus1(Enum):
    SPONSOR_DISABLED = 'SPONSOR_DISABLED'
    SPONSOR_ENABLED = 'SPONSOR_ENABLED'


class SponsoringStatus(BaseModel):
    __root__: Union[SponsoringStatus1, str]


class AfEvent1(Enum):
    ACCESS_TYPE_CHANGE = 'ACCESS_TYPE_CHANGE'
    ANI_REPORT = 'ANI_REPORT'
    CHARGING_CORRELATION = 'CHARGING_CORRELATION'
    EPS_FALLBACK = 'EPS_FALLBACK'
    FAILED_RESOURCES_ALLOCATION = 'FAILED_RESOURCES_ALLOCATION'
    OUT_OF_CREDIT = 'OUT_OF_CREDIT'
    PLMN_CHG = 'PLMN_CHG'
    QOS_MONITORING = 'QOS_MONITORING'
    QOS_NOTIF = 'QOS_NOTIF'
    RAN_NAS_CAUSE = 'RAN_NAS_CAUSE'
    REALLOCATION_OF_CREDIT = 'REALLOCATION_OF_CREDIT'
    SUCCESSFUL_RESOURCES_ALLOCATION = 'SUCCESSFUL_RESOURCES_ALLOCATION'
    TSN_BRIDGE_INFO = 'TSN_BRIDGE_INFO'
    USAGE_REPORT = 'USAGE_REPORT'


class AfEvent(BaseModel):
    __root__: Union[AfEvent1, str]


class AfNotifMethod1(Enum):
    EVENT_DETECTION = 'EVENT_DETECTION'
    ONE_TIME = 'ONE_TIME'
    PERIODIC = 'PERIODIC'
    PDU_SESSION_RELEASE = 'PDU_SESSION_RELEASE'


class AfNotifMethod(BaseModel):
    __root__: Union[AfNotifMethod1, str]


class QosNotifType1(Enum):
    GUARANTEED = 'GUARANTEED'
    NOT_GUARANTEED = 'NOT_GUARANTEED'


class QosNotifType(BaseModel):
    __root__: Union[QosNotifType1, str]


class TerminationCause1(Enum):
    ALL_SDF_DEACTIVATION = 'ALL_SDF_DEACTIVATION'
    PDU_SESSION_TERMINATION = 'PDU_SESSION_TERMINATION'
    PS_TO_CS_HO = 'PS_TO_CS_HO'


class TerminationCause(BaseModel):
    __root__: Union[TerminationCause1, str]


class MediaComponentResourcesStatus1(Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'


class MediaComponentResourcesStatus(BaseModel):
    __root__: Union[MediaComponentResourcesStatus1, str]


class FlowUsage1(Enum):
    NO_INFO = 'NO_INFO'
    RTCP = 'RTCP'
    AF_SIGNALLING = 'AF_SIGNALLING'


class FlowUsage(BaseModel):
    __root__: Union[FlowUsage1, str]


class RequiredAccessInfo1(Enum):
    USER_LOCATION = 'USER_LOCATION'
    UE_TIME_ZONE = 'UE_TIME_ZONE'


class RequiredAccessInfo(BaseModel):
    __root__: Union[RequiredAccessInfo1, str]


class SipForkingIndication1(Enum):
    SINGLE_DIALOGUE = 'SINGLE_DIALOGUE'
    SEVERAL_DIALOGUES = 'SEVERAL_DIALOGUES'


class SipForkingIndication(BaseModel):
    __root__: Union[SipForkingIndication1, str]


class AfRequestedData1(Enum):
    UE_IDENTITY = 'UE_IDENTITY'


class AfRequestedData(BaseModel):
    __root__: Union[AfRequestedData1, str]


class ServiceInfoStatus1(Enum):
    FINAL = 'FINAL'
    PRELIMINARY = 'PRELIMINARY'


class ServiceInfoStatus(BaseModel):
    __root__: Union[ServiceInfoStatus1, str]


class PreemptionControlInformation1(Enum):
    MOST_RECENT = 'MOST_RECENT'
    LEAST_RECENT = 'LEAST_RECENT'
    HIGHEST_BW = 'HIGHEST_BW'


class PreemptionControlInformation(BaseModel):
    __root__: Union[PreemptionControlInformation1, str]


class PrioritySharingIndicator1(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class PrioritySharingIndicator(BaseModel):
    __root__: Union[PrioritySharingIndicator1, str]


class PreemptionControlInformationRm(BaseModel):
    __root__: Union[PreemptionControlInformation, NullValue]


class EACMode(Enum):
    INACTIVE = 'INACTIVE'
    ACTIVE = 'ACTIVE'


class NRTACRange(BaseModel):
    nRTACstart: Optional[str] = None
    nRTACend: Optional[str] = None
    nRTACpattern: Optional[str] = None


class TaiRange(BaseModel):
    plmnId: Optional[PlmnId] = None
    nRTACRangelist: Optional[List[NRTACRange]] = None


class GUAMInfo(BaseModel):
    pLMNId: Optional[PlmnId] = None
    aMFIdentifier: Optional[int] = None


class SupportedBMOList(BaseModel):
    __root__: List[str]


class ECSAddrConfigInfo(BaseModel):
    __root__: List[str]


class DnnSmfInfoItem(BaseModel):
    dnn: Optional[str] = None
    dnaiList: Optional[List[str]] = None


class Field5GCNFType(Enum):
    PCF = 'PCF'
    NEF = 'NEF'
    SCEF = 'SCEF'


class Field5GCNfConnEcmInfo(BaseModel):
    field_5GCNFType: Optional[Field5GCNFType] = Field(None, alias='5GCNFType')
    field_5GCNFIpAddress: Optional[str] = Field(None, alias='5GCNFIpAddress')
    field_5GCNFRef: Optional[Dn] = Field(None, alias='5GCNFRef')


class UPFConnectionInfo(BaseModel):
    uPFIpAddress: Optional[str] = None
    uPFRef: Optional[Dn] = None


class SnpnId(BaseModel):
    mcc: Optional[Mcc] = None
    mnc: Optional[Mnc] = None
    nid: Optional[str] = None


class SupiRange(BaseModel):
    start: Optional[str] = None
    end: Optional[str] = None
    pattern: Optional[str] = None


class IdentityRange(BaseModel):
    start: Optional[str] = None
    end: Optional[str] = None
    pattern: Optional[str] = None


class ProseCapability(BaseModel):
    proseDirectDiscovery: Optional[bool] = None
    proseDirectCommunication: Optional[bool] = None
    proseL2UetoNetworkRelay: Optional[bool] = None
    proseL3UetoNetworkRelay: Optional[bool] = None
    proseL2RemoteUe: Optional[bool] = None
    proseL3RemoteUe: Optional[bool] = None


class V2xCapability(BaseModel):
    lteV2x: Optional[bool] = None
    nrV2x: Optional[bool] = None


class InternalGroupIdRange(BaseModel):
    start: Optional[str] = None
    end: Optional[str] = None
    pattern: Optional[str] = None


class SuciInfo(BaseModel):
    routingInds: Optional[List[str]] = None
    hNwPubKeyIds: Optional[List[int]] = None


class SuciInfoList(BaseModel):
    __root__: List[SuciInfo]


class SharedDataIdRange(BaseModel):
    pattern: Optional[str] = None


class SupiRangeList(BaseModel):
    __root__: List[SupiRange]


class IdentityRangeList(BaseModel):
    __root__: List[IdentityRange]


class InternalGroupIdRangeList(BaseModel):
    __root__: List[InternalGroupIdRange]


class SupportedDataSetList(BaseModel):
    __root__: List[SupportedDataSet]


class SharedDataIdRangeList(BaseModel):
    __root__: List[SharedDataIdRange]


class InterfaceType(Enum):
    N3 = 'N3'
    N6 = 'N6'
    N9 = 'N9'
    DATA_FORWARDING = 'DATA_FORWARDING'
    N3MB = 'N3MB'
    N6MB = 'N6MB'
    N19MB = 'N19MB'
    NMB9 = 'NMB9'


class InterfaceUpfInfoItem(BaseModel):
    interfaceType: Optional[InterfaceType] = None
    ipv4EndpointAddresses: Optional[List[Ipv4Addr]] = Field(None, min_items=1)
    ipv6EndpointAddresses: Optional[List[Ipv6Addr]] = Field(None, min_items=1)
    fqdn: Optional[Fqdn] = None
    networkInstance: Optional[str] = None


class AtsssCapability2(BaseModel):
    atsssLL: Optional[bool] = None
    mptcp: Optional[bool] = None
    rttWithoutPmf: Optional[bool] = None


class IpInterface(BaseModel):
    ipv4EndpointAddresses: Optional[Ipv4Addr] = None
    ipv6EndpointAddresses: Optional[Ipv6Addr] = None
    fqdn: Optional[Fqdn] = None


class Ipv4AddressRange(BaseModel):
    start: Optional[Ipv4Addr] = None
    end: Optional[Ipv4Addr] = None


class Ipv6PrefixRange(BaseModel):
    start: Optional[Ipv6Prefix] = None
    end: Optional[Ipv6Prefix] = None


class PlmnIdNid1(BaseModel):
    mcc: Optional[Mcc] = None
    mnc: Optional[Mnc] = None
    nid: Optional[Nid2] = None


class ScpCapability(Enum):
    INDIRECT_COM_WITH_DELEG_DISC = 'INDIRECT_COM_WITH_DELEG_DISC'


class IpReachability1(Enum):
    IPV4 = 'IPV4'
    IPV6 = 'IPV6'
    IPV4V6 = 'IPV4V6'


class IpReachability(BaseModel):
    __root__: Union[IpReachability1, str] = Field(
        ..., description='Indicates the type(s) of IP addresses reachable via an SCP'
    )


class ScpDomainInfo(BaseModel):
    scpFqdn: Optional[Fqdn] = None
    scpIpEndPoints: Optional[List[IpEndPoint]] = Field(None, min_items=1)
    scpPrefix: Optional[str] = None
    scpPorts: Optional[Dict[str, conint(ge=0, le=65535)]] = Field(
        None,
        description='Port numbers for HTTP and HTTPS. The key of the map shall be "http" or "https".\n',
    )


class SeppInfo(BaseModel):
    seppPrefix: Optional[str] = None
    seppPorts: Optional[Dict[str, conint(ge=0, le=65535)]] = Field(
        None,
        description='Port numbers for HTTP and HTTPS. The key of the map shall be "http" or "https".\n',
    )
    remotePlmnList: Optional[List[PlmnId]] = Field(None, min_items=1)
    remoteSnpnList: Optional[List[PlmnIdNid]] = Field(None, min_items=1)


class UdsfInfo(BaseModel):
    groupId: Optional[NfGroupId] = None
    supiRanges: Optional[List[SupiRange]] = Field(None, min_items=1)
    storageIdRanges: Optional[Dict[str, List[IdentityRange]]] = Field(
        None,
        description='A map (list of key-value pairs) where realmId serves as key and each value in the map is an array of IdentityRanges. Each IdentityRange is a range of storageIds.\n',
    )


class NsacfCapability(BaseModel):
    supportUeSAC: Optional[bool] = Field(
        False,
        description='Indicates the service capability of the NSACF to monitor and control the number of\nregistered UEs per network slice for the network slice that is subject to NSAC\ntrue: Supported\nfalse (default): Not Supported\n',
    )
    supportPduSAC: Optional[bool] = Field(
        False,
        description='Indicates the service capability of the NSACF to monitor and control the number of\nestablished PDU sessions per network slice for the network slice that is subject to NSAC\ntrue: Supported\nfalse (default): Not Supported\n',
    )


class NwdafCapability(BaseModel):
    analyticsAggregation: Optional[bool] = False
    analyticsMetadataProvisioning: Optional[bool] = False


class FlCapabilityType(Enum):
    FL_SERVER = 'FL_SERVER'
    FL_CLIENT = 'FL_CLIENT'
    FL_SERVER_AND_CLIENT = 'FL_SERVER_AND_CLIENT'


class NwdafEvent1(Enum):
    SLICE_LOAD_LEVEL = 'SLICE_LOAD_LEVEL'
    NETWORK_PERFORMANCE = 'NETWORK_PERFORMANCE'
    NF_LOAD = 'NF_LOAD'
    SERVICE_EXPERIENCE = 'SERVICE_EXPERIENCE'
    UE_MOBILITY = 'UE_MOBILITY'
    UE_COMMUNICATION = 'UE_COMMUNICATION'
    QOS_SUSTAINABILITY = 'QOS_SUSTAINABILITY'
    ABNORMAL_BEHAVIOUR = 'ABNORMAL_BEHAVIOUR'
    USER_DATA_CONGESTION = 'USER_DATA_CONGESTION'
    NSI_LOAD_LEVEL = 'NSI_LOAD_LEVEL'
    DN_PERFORMANCE = 'DN_PERFORMANCE'
    DISPERSION = 'DISPERSION'
    RED_TRANS_EXP = 'RED_TRANS_EXP'
    WLAN_PERFORMANCE = 'WLAN_PERFORMANCE'
    SM_CONGESTION = 'SM_CONGESTION'


class NwdafEvent(BaseModel):
    __root__: Union[NwdafEvent1, str] = Field(
        ...,
        description='Possible values are:\n- SLICE_LOAD_LEVEL: Indicates that the event subscribed is load level information of Network Slice  \n- NETWORK_PERFORMANCE: Indicates that the event subscribed is network performance information.  \n- NF_LOAD: Indicates that the event subscribed is load level and status of one or several Network Functions.  \n- SERVICE_EXPERIENCE: Indicates that the event subscribed is service experience.  \n- UE_MOBILITY: Indicates that the event subscribed is UE mobility information.  \n- UE_COMMUNICATION: Indicates that the event subscribed is UE communication information.  \n- QOS_SUSTAINABILITY: Indicates that the event subscribed is QoS sustainability.  \n- ABNORMAL_BEHAVIOUR: Indicates that the event subscribed is abnormal behaviour.  \n- USER_DATA_CONGESTION: Indicates that the event subscribed is user data congestion information.  \n- NSI_LOAD_LEVEL: Indicates that the event subscribed is load level information of Network Slice and the optionally associated Network Slice Instance  \n- DN_PERFORMANCE: Indicates that the event subscribed is DN performance information.  \n- DISPERSION: Indicates that the event subscribed is dispersion information.  \n- RED_TRANS_EXP: Indicates that the event subscribed is redundant transmission experience.  \n- WLAN_PERFORMANCE: Indicates that the event subscribed is WLAN performance.  \n- SM_CONGESTION: Indicates the Session Management Congestion Control Experience information for specific DNN and/or S-NSSAI.\n',
    )


class BwRequirement(BaseModel):
    appId: ApplicationId
    marBwDl: Optional[BitRate] = None
    marBwUl: Optional[BitRate] = None
    mirBwDl: Optional[BitRate] = None
    mirBwUl: Optional[BitRate] = None


class NsiIdInfo(BaseModel):
    snssai: Snssai1


class TargetUeInformation(BaseModel):
    anyUe: Optional[bool] = None
    supis: Optional[List[Supi]] = Field(None, min_items=1)
    gpsis: Optional[List[Gpsi]] = Field(None, min_items=1)
    intGroupIds: Optional[List[GroupId]] = Field(None, min_items=1)


class TopApplication1(BaseModel):
    appId: ApplicationId
    ratio: Optional[SamplingRatio] = None


class TopApplication(BaseModel):
    __root__: TopApplication1 = Field(
        ..., description='Top application that contributes the most to the traffic.'
    )


class QosRequirement1(BaseModel):
    field_5qi: Field5Qi = Field(..., alias='5qi')
    gfbrUl: Optional[BitRate] = None
    gfbrDl: Optional[BitRate] = None
    resType: Optional[QosResourceType] = None
    pdb: Optional[PacketDelBudget] = None
    per: Optional[PacketErrRate] = None


class QosRequirement2(BaseModel):
    field_5qi: Optional[Field5Qi] = Field(None, alias='5qi')
    gfbrUl: Optional[BitRate] = None
    gfbrDl: Optional[BitRate] = None
    resType: QosResourceType
    pdb: Optional[PacketDelBudget] = None
    per: Optional[PacketErrRate] = None


class QosRequirement(BaseModel):
    __root__: Union[QosRequirement1, QosRequirement2] = Field(
        ..., description='Represents the QoS requirements.'
    )


class ThresholdLevel(BaseModel):
    congLevel: Optional[int] = None
    nfLoadLevel: Optional[int] = None
    nfCpuUsage: Optional[int] = None
    nfMemoryUsage: Optional[int] = None
    nfStorageUsage: Optional[int] = None
    avgTrafficRate: Optional[BitRate] = None
    maxTrafficRate: Optional[BitRate] = None
    avgPacketDelay: Optional[PacketDelBudget] = None
    maxPacketDelay: Optional[PacketDelBudget] = None
    avgPacketLossRate: Optional[PacketLossRate] = None
    svcExpLevel: Optional[Float] = None


class NfStatus1(BaseModel):
    statusRegistered: SamplingRatio
    statusUnregistered: Optional[SamplingRatio] = None
    statusUndiscoverable: Optional[SamplingRatio] = None


class NfStatus2(BaseModel):
    statusRegistered: Optional[SamplingRatio] = None
    statusUnregistered: SamplingRatio
    statusUndiscoverable: Optional[SamplingRatio] = None


class NfStatus3(BaseModel):
    statusRegistered: Optional[SamplingRatio] = None
    statusUnregistered: Optional[SamplingRatio] = None
    statusUndiscoverable: SamplingRatio


class NfStatus(BaseModel):
    __root__: Union[NfStatus1, NfStatus2, NfStatus3] = Field(
        ..., description='Contains the percentage of time spent on various NF states.'
    )


class AnySlice(BaseModel):
    __root__: bool = Field(
        ...,
        description='FALSE represents not applicable for all slices. TRUE represents applicable for all slices.\n',
    )


class LoadLevelInformation(BaseModel):
    __root__: int = Field(
        ...,
        description='Load level information of the network slice and the optionally associated network slice  instance.\n',
    )


class AddressList(BaseModel):
    ipv4Addrs: Optional[List[Ipv4Addr]] = Field(None, min_items=1)
    ipv6Addrs: Optional[List[Ipv6Addr]] = Field(None, min_items=1)


class CircumstanceDescription(BaseModel):
    freq: Optional[Float] = None
    tm: Optional[DateTime] = None


class NumberAverage(BaseModel):
    number: int
    variance: Float


class MLModelInfo1(BaseModel):
    modelProvId: NfInstanceId
    modelProvSetId: Optional[NfSetId] = None


class MLModelInfo2(BaseModel):
    modelProvId: Optional[NfInstanceId] = None
    modelProvSetId: NfSetId


class MLModelInfo(BaseModel):
    __root__: Union[MLModelInfo1, MLModelInfo2] = Field(
        ..., description='Contains information about an ML models.'
    )


class UeAnalyticsContextDescriptor(BaseModel):
    supi: Supi
    anaTypes: List[NwdafEvent] = Field(
        ...,
        description='List of analytics types for which UE related analytics contexts can be retrieved.\n',
        min_items=1,
    )


class PerfData(BaseModel):
    avgTrafficRate: Optional[BitRate] = None
    maxTrafficRate: Optional[BitRate] = None
    avePacketDelay: Optional[PacketDelBudget] = None
    maxPacketDelay: Optional[PacketDelBudget] = None
    avgPacketLossRate: Optional[PacketLossRate] = None


class RankingCriterion(BaseModel):
    highBase: SamplingRatio
    lowBase: SamplingRatio


class ApplicationVolume(BaseModel):
    appId: ApplicationId


class RedundantTransmissionExpPerTS(BaseModel):
    tsStart: DateTime
    tsDuration: DurationSec
    redTransExp: str
    ueRatio: Optional[SamplingRatio] = None
    confidence: Optional[Uinteger] = None


class TrafficInformation1(BaseModel):
    uplinkRate: BitRate
    downlinkRate: Optional[BitRate] = None


class TrafficInformation2(BaseModel):
    uplinkRate: Optional[BitRate] = None
    downlinkRate: BitRate


class TrafficInformation(BaseModel):
    __root__: Union[TrafficInformation1, TrafficInformation2] = Field(
        ...,
        description='Traffic information including UL/DL data rate and/or Traffic volume.',
    )


class AppListForUeComm(BaseModel):
    appId: ApplicationId
    startTime: Optional[DateTime] = None
    appDur: Optional[DurationSec] = None
    occurRatio: Optional[SamplingRatio] = None


class SessInactTimerForUeComm(BaseModel):
    n4SessId: Optional[PduSessionId] = None
    sessInactiveTimer: DurationSec


class PrevSubInfo1(BaseModel):
    producerId: NfInstanceId
    producerSetId: Optional[NfSetId] = None
    subscriptionId: str = Field(..., description='The identifier of a subscription.')
    nfAnaEvents: Optional[List[NwdafEvent]] = Field(None, min_items=1)
    ueAnaEvents: Optional[List[UeAnalyticsContextDescriptor]] = Field(None, min_items=1)


class PrevSubInfo2(BaseModel):
    producerId: Optional[NfInstanceId] = None
    producerSetId: NfSetId
    subscriptionId: str = Field(..., description='The identifier of a subscription.')
    nfAnaEvents: Optional[List[NwdafEvent]] = Field(None, min_items=1)
    ueAnaEvents: Optional[List[UeAnalyticsContextDescriptor]] = Field(None, min_items=1)


class PrevSubInfo(BaseModel):
    __root__: Union[PrevSubInfo1, PrevSubInfo2] = Field(
        ..., description='Information of the previous subscription.'
    )


class ResourceUsage(BaseModel):
    cpuUsage: Optional[Uinteger] = None
    memoryUsage: Optional[Uinteger] = None
    storageUsage: Optional[Uinteger] = None


class ConsumerNfInformation1(BaseModel):
    nfId: NfInstanceId
    nfSetId: Optional[NfSetId] = None
    taiList: Optional[List[Tai1]] = Field(None, min_items=1)


class ConsumerNfInformation2(BaseModel):
    nfId: Optional[NfInstanceId] = None
    nfSetId: NfSetId
    taiList: Optional[List[Tai1]] = Field(None, min_items=1)


class ConsumerNfInformation3(BaseModel):
    nfId: Optional[NfInstanceId] = None
    nfSetId: Optional[NfSetId] = None
    taiList: List[Tai1] = Field()
    @validator('taiList')
    def validate_min_items_taiList(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value


class ConsumerNfInformation(BaseModel):
    __root__: Union[
        Union[ConsumerNfInformation1, ConsumerNfInformation2], ConsumerNfInformation3
    ] = Field(..., description='Represents the analytics consumer NF Information.')


class NotificationMethod1(Enum):
    PERIODIC = 'PERIODIC'
    THRESHOLD = 'THRESHOLD'


class NotificationMethod(BaseModel):
    __root__: Union[NotificationMethod1, str] = Field(
        ...,
        description='Possible values are:\n- PERIODIC: The subscribe of NWDAF Event is periodically. The periodic of the notification is identified by repetitionPeriod defined in clause 5.1.6.2.3.  \n- THRESHOLD: The subscribe of NWDAF Event is upon threshold exceeded.\n',
    )


class Accuracy1(Enum):
    LOW = 'LOW'
    HIGH = 'HIGH'


class Accuracy(BaseModel):
    __root__: Union[Accuracy1, str] = Field(
        ...,
        description='Possible values are:\n- LOW: Low accuracy.  \n- HIGH: High accuracy.\n',
    )


class CongestionType1(Enum):
    USER_PLANE = 'USER_PLANE'
    CONTROL_PLANE = 'CONTROL_PLANE'
    USER_AND_CONTROL_PLANE = 'USER_AND_CONTROL_PLANE'


class CongestionType(BaseModel):
    __root__: Union[CongestionType1, str] = Field(
        ...,
        description='Possible values are:\n- USER_PLANE: The congestion analytics type is User Plane. \n- CONTROL_PLANE: The congestion analytics type is Control Plane.\n- USER_AND_CONTROL_PLANE: The congestion analytics type is User Plane and Control Plane.\n',
    )


class ExceptionId1(Enum):
    UNEXPECTED_UE_LOCATION = 'UNEXPECTED_UE_LOCATION'
    UNEXPECTED_LONG_LIVE_FLOW = 'UNEXPECTED_LONG_LIVE_FLOW'
    UNEXPECTED_LARGE_RATE_FLOW = 'UNEXPECTED_LARGE_RATE_FLOW'
    UNEXPECTED_WAKEUP = 'UNEXPECTED_WAKEUP'
    SUSPICION_OF_DDOS_ATTACK = 'SUSPICION_OF_DDOS_ATTACK'
    WRONG_DESTINATION_ADDRESS = 'WRONG_DESTINATION_ADDRESS'
    TOO_FREQUENT_SERVICE_ACCESS = 'TOO_FREQUENT_SERVICE_ACCESS'
    UNEXPECTED_RADIO_LINK_FAILURES = 'UNEXPECTED_RADIO_LINK_FAILURES'
    PING_PONG_ACROSS_CELLS = 'PING_PONG_ACROSS_CELLS'


class ExceptionId(BaseModel):
    __root__: Union[ExceptionId1, str] = Field(
        ...,
        description='Possible values are:\n- UNEXPECTED_UE_LOCATION: Unexpected UE location\n- UNEXPECTED_LONG_LIVE_FLOW: Unexpected long-live rate flows\n- UNEXPECTED_LARGE_RATE_FLOW: Unexpected large rate flows\n- UNEXPECTED_WAKEUP: Unexpected wakeup\n- SUSPICION_OF_DDOS_ATTACK: Suspicion of DDoS attack\n- WRONG_DESTINATION_ADDRESS: Wrong destination address\n- TOO_FREQUENT_SERVICE_ACCESS: Too frequent Service Access\n- UNEXPECTED_RADIO_LINK_FAILURES: Unexpected radio link failures\n- PING_PONG_ACROSS_CELLS: Ping-ponging across neighbouring cells\n',
    )


class ExceptionTrend1(Enum):
    UP = 'UP'
    DOWN = 'DOWN'
    UNKNOW = 'UNKNOW'
    STABLE = 'STABLE'


class ExceptionTrend(BaseModel):
    __root__: Union[ExceptionTrend1, str] = Field(
        ...,
        description='Possible values are:\n- UP: Up trend of the exception level.\n- DOWN: Down trend of the exception level.\n- UNKNOW: Unknown trend of the exception level.\n- STABLE: Stable trend of the exception level.\n',
    )


class TimeUnit1(Enum):
    MINUTE = 'MINUTE'
    HOUR = 'HOUR'
    DAY = 'DAY'


class TimeUnit(BaseModel):
    __root__: Union[TimeUnit1, str] = Field(
        ...,
        description='Possible values are:\n- MINUTE: Time unit is per minute.\n- HOUR: Time unit is per hour.\n- DAY: Time unit is per day.\n',
    )


class NetworkPerfType1(Enum):
    GNB_ACTIVE_RATIO = 'GNB_ACTIVE_RATIO'
    GNB_COMPUTING_USAGE = 'GNB_COMPUTING_USAGE'
    GNB_MEMORY_USAGE = 'GNB_MEMORY_USAGE'
    GNB_DISK_USAGE = 'GNB_DISK_USAGE'
    NUM_OF_UE = 'NUM_OF_UE'
    SESS_SUCC_RATIO = 'SESS_SUCC_RATIO'
    HO_SUCC_RATIO = 'HO_SUCC_RATIO'


class NetworkPerfType(BaseModel):
    __root__: Union[NetworkPerfType1, str] = Field(
        ...,
        description='Possible values are:\n- GNB_ACTIVE_RATIO: Indicates that the network performance requirement is gNodeB active (i.e. up and running) rate. Indicates the ratio of gNB active (i.e. up and running) number to the total number of gNB\n- GNB_COMPUTING_USAGE: Indicates gNodeB computing resource usage.\n- GNB_MEMORY_USAGE: Indicates gNodeB memory usage.\n- GNB_DISK_USAGE: Indicates gNodeB disk usage.\n- NUM_OF_UE: Indicates number of UEs.\n- SESS_SUCC_RATIO: Indicates ratio of successful setup of PDU sessions to total PDU session setup attempts.\n- HO_SUCC_RATIO: Indicates Ratio of successful handovers to the total handover attempts. \n',
    )


class ExpectedAnalyticsType1(Enum):
    MOBILITY = 'MOBILITY'
    COMMUN = 'COMMUN'
    MOBILITY_AND_COMMUN = 'MOBILITY_AND_COMMUN'


class ExpectedAnalyticsType(BaseModel):
    __root__: Union[ExpectedAnalyticsType1, str] = Field(
        ...,
        description='Possible values are:\n- MOBILITY: Mobility related abnormal behaviour analytics is expected by the consumer.\n- COMMUN: Communication related abnormal behaviour analytics is expected by the consumer.\n- MOBILITY_AND_COMMUN: Both mobility and communication related abnormal behaviour analytics is expected by the consumer.\n',
    )


class MatchingDirection1(Enum):
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'
    CROSSED = 'CROSSED'


class MatchingDirection(BaseModel):
    __root__: Union[MatchingDirection1, str] = Field(
        ...,
        description='Possible values are:\n- ASCENDING: Threshold is crossed in ascending direction.\n- DESCENDING: Threshold is crossed in descending direction.\n- CROSSED: Threshold is crossed either in ascending or descending direction.\n',
    )


class NwdafFailureCode1(Enum):
    UNAVAILABLE_DATA = 'UNAVAILABLE_DATA'
    BOTH_STAT_PRED_NOT_ALLOWED = 'BOTH_STAT_PRED_NOT_ALLOWED'
    UNSATISFIED_REQUESTED_ANALYTICS_TIME = 'UNSATISFIED_REQUESTED_ANALYTICS_TIME'
    OTHER = 'OTHER'


class NwdafFailureCode(BaseModel):
    __root__: Union[NwdafFailureCode1, str] = Field(
        ...,
        description='Possible values are:\n- UNAVAILABLE_DATA: Indicates the requested statistics information for the event is rejected since necessary data to perform the service is unavailable.\n- BOTH_STAT_PRED_NOT_ALLOWED: Indicates the requested analysis information for the event is rejected since the start time is in the past and the end time is in the future, which means the NF service consumer requested both statistics and prediction for the analytics.\n- UNSATISFIED_REQUESTED_ANALYTICS_TIME: Indicates that the requested event is rejected since the analytics information is not ready when the time indicated by the "timeAnaNeeded" attribute (as provided during the creation or modification of subscription) is reached.\n- OTHER: Indicates the requested analysis information for the event is rejected due to other reasons. \n',
    )


class AnalyticsMetadata1(Enum):
    NUM_OF_SAMPLES = 'NUM_OF_SAMPLES'
    DATA_WINDOW = 'DATA_WINDOW'
    DATA_STAT_PROPS = 'DATA_STAT_PROPS'
    STRATEGY = 'STRATEGY'
    ACCURACY = 'ACCURACY'


class AnalyticsMetadata(BaseModel):
    __root__: Union[AnalyticsMetadata1, str] = Field(
        ...,
        description='Possible values are:\n- NUM_OF_SAMPLES: Number of data samples used for the generation of the output analytics.\n- DATA_WINDOW: Data time window of the data samples.\n- DATA_STAT_PROPS: Dataset statistical properties of the data used to generate the analytics.\n- STRATEGY: Output strategy used for the reporting of the analytics.\n- ACCURACY: Level of accuracy reached for the analytics.\n',
    )


class DatasetStatisticalProperty1(Enum):
    UNIFORM_DIST_DATA = 'UNIFORM_DIST_DATA'
    NO_OUTLIERS = 'NO_OUTLIERS'


class DatasetStatisticalProperty(BaseModel):
    __root__: Union[DatasetStatisticalProperty1, str] = Field(
        ...,
        description='Possible values are:\n- UNIFORM_DIST_DATA: Indicates the use of data samples that are uniformly distributed according to the different aspects of the requested analytics.\n- NO_OUTLIERS: Indicates that the data samples shall disregard data samples that are at the extreme boundaries of the value range.\n',
    )


class OutputStrategy1(Enum):
    BINARY = 'BINARY'
    GRADIENT = 'GRADIENT'


class OutputStrategy(BaseModel):
    __root__: Union[OutputStrategy1, str] = Field(
        ...,
        description='Possible values are:\n- BINARY: Indicates that the analytics shall only be reported when the requested level of accuracy is reached within a cycle of periodic notification.\n- GRADIENT: Indicates that the analytics shall be reported according with the periodicity irrespective of whether the requested level of accuracy has been reached or not.\n',
    )


class TransferRequestType1(Enum):
    PREPARE = 'PREPARE'
    TRANSFER = 'TRANSFER'


class TransferRequestType(BaseModel):
    __root__: Union[TransferRequestType1, str] = Field(
        ...,
        description='Possible values are:\n- PREPARE: Indicates that the request is for analytics subscription transfer preparation.\n- TRANSFER: Indicates that the request is for analytics subscription transfer execution.\n',
    )


class AnalyticsSubset1(Enum):
    NUM_OF_UE_REG = 'NUM_OF_UE_REG'
    NUM_OF_PDU_SESS_ESTBL = 'NUM_OF_PDU_SESS_ESTBL'
    RES_USAGE = 'RES_USAGE'
    NUM_OF_EXCEED_RES_USAGE_LOAD_LEVEL_THR = 'NUM_OF_EXCEED_RES_USAGE_LOAD_LEVEL_THR'
    PERIOD_OF_EXCEED_RES_USAGE_LOAD_LEVEL_THR = (
        'PERIOD_OF_EXCEED_RES_USAGE_LOAD_LEVEL_THR'
    )
    EXCEED_LOAD_LEVEL_THR_IND = 'EXCEED_LOAD_LEVEL_THR_IND'
    LIST_OF_TOP_APP_UL = 'LIST_OF_TOP_APP_UL'
    LIST_OF_TOP_APP_DL = 'LIST_OF_TOP_APP_DL'
    NF_STATUS = 'NF_STATUS'
    NF_RESOURCE_USAGE = 'NF_RESOURCE_USAGE'
    NF_LOAD = 'NF_LOAD'
    NF_PEAK_LOAD = 'NF_PEAK_LOAD'
    NF_LOAD_AVG_IN_AOI = 'NF_LOAD_AVG_IN_AOI'
    DISPER_AMOUNT = 'DISPER_AMOUNT'
    DISPER_CLASS = 'DISPER_CLASS'
    RANKING = 'RANKING'
    PERCENTILE_RANKING = 'PERCENTILE_RANKING'
    RSSI = 'RSSI'
    RTT = 'RTT'
    TRAFFIC_INFO = 'TRAFFIC_INFO'
    NUMBER_OF_UES = 'NUMBER_OF_UES'
    APP_LIST_FOR_UE_COMM = 'APP_LIST_FOR_UE_COMM'
    N4_SESS_INACT_TIMER_FOR_UE_COMM = 'N4_SESS_INACT_TIMER_FOR_UE_COMM'
    AVG_TRAFFIC_RATE = 'AVG_TRAFFIC_RATE'
    MAX_TRAFFIC_RATE = 'MAX_TRAFFIC_RATE'
    AVG_PACKET_DELAY = 'AVG_PACKET_DELAY'
    MAX_PACKET_DELAY = 'MAX_PACKET_DELAY'
    AVG_PACKET_LOSS_RATE = 'AVG_PACKET_LOSS_RATE'
    UE_LOCATION = 'UE_LOCATION'
    LIST_OF_HIGH_EXP_UE = 'LIST_OF_HIGH_EXP_UE'
    LIST_OF_MEDIUM_EXP_UE = 'LIST_OF_MEDIUM_EXP_UE'
    LIST_OF_LOW_EXP_UE = 'LIST_OF_LOW_EXP_UE'


class AnalyticsSubset(BaseModel):
    __root__: Union[AnalyticsSubset1, str] = Field(
        ...,
        description='Possible values are:\n- NUM_OF_UE_REG: The number of UE registered. This value is only applicable to NSI_LOAD_LEVEL event.\n- NUM_OF_PDU_SESS_ESTBL: The number of PDU sessions established. This value is only applicable to NSI_LOAD_LEVEL event.\n- RES_USAGE: The current usage of the virtual resources assigned to the NF instances belonging to a particular network slice instance. This value is only applicable to NSI_LOAD_LEVEL event.\n- NUM_OF_EXCEED_RES_USAGE_LOAD_LEVEL_THR: The number of times the resource usage threshold of the network slice instance is reached or exceeded if a threshold value is provided by the consumer. This value is only applicable to NSI_LOAD_LEVEL event.\n- PERIOD_OF_EXCEED_RES_USAGE_LOAD_LEVEL_THR: The time interval between each time the threshold being met or exceeded on the network slice (instance). This value is only applicable to NSI_LOAD_LEVEL event.\n- EXCEED_LOAD_LEVEL_THR_IND: Whether the Load Level Threshold is met or exceeded by the statistics value. This value is only applicable to NSI_LOAD_LEVEL event.\n- LIST_OF_TOP_APP_UL: The list of applications that contribute the most to the traffic in the UL direction. This value is only applicable to USER_DATA_CONGESTION event.\n- LIST_OF_TOP_APP_DL: The list of applications that contribute the most to the traffic in the DL direction. This value is only applicable to USER_DATA_CONGESTION event.\n- NF_STATUS: The availability status of the NF on the Analytics target period, expressed as a percentage of time per status value (registered, suspended, undiscoverable). This value is only applicable to NF_LOAD event.\n- NF_RESOURCE_USAGE: The average usage of assigned resources (CPU, memory, storage). This value is only applicable to NF_LOAD event.\n- NF_LOAD: The average load of the NF instance over the Analytics target period. This value is only applicable to NF_LOAD event.\n- NF_PEAK_LOAD: The maximum load of the NF instance over the Analytics target period. This value is only applicable to NF_LOAD event.\n- NF_LOAD_AVG_IN_AOI: The average load of the NF instances over the area of interest. This value is only applicable to NF_LOAD event.\n- DISPER_AMOUNT: Indicates the dispersion amount of the reported data volume or transaction dispersion type. This value is only applicable to DISPERSION event.\n- DISPER_CLASS: Indicates the dispersion mobility class: fixed, camper, traveller upon set its usage threshold, and/or the top-heavy class upon set its percentile rating threshold. This value is only applicable to DISPERSION event.\n- RANKING: Data/transaction usage ranking high (i.e.value 1), medium (2) or low (3). This value is only applicable to DISPERSION event.\n- PERCENTILE_RANKING: Percentile ranking of the target UE in the Cumulative Distribution Function of data usage for the population of all UEs. This value is only applicable to DISPERSION event.\n- RSSI: Indicated the RSSI in the unit of dBm. This value is only applicable to WLAN_PERFORMANCE event.\n- RTT: Indicates the RTT in the unit of millisecond. This value is only applicable to WLAN_PERFORMANCE event.\n- TRAFFIC_INFO: Traffic information including UL/DL data rate and/or Traffic volume. This value is only applicable to WLAN_PERFORMANCE event.\n- NUMBER_OF_UES: Number of UEs observed for the SSID. This value is only applicable to WLAN_PERFORMANCE event.\n- APP_LIST_FOR_UE_COMM: The analytics of the application list used by UE. This value is only applicable to UE_COMM event.\n- N4_SESS_INACT_TIMER_FOR_UE_COMM: The N4 Session inactivity timer. This value is only applicable to UE_COMM event.\n- AVG_TRAFFIC_RATE: Indicates average traffic rate. This value is only applicable to DN_PERFORMANCE event.\n- MAX_TRAFFIC_RATE: Indicates maximum traffic rate. This value is only applicable to DN_PERFORMANCE event.\n- AVG_PACKET_DELAY: Indicates average Packet Delay. This value is only applicable to DN_PERFORMANCE event.\n- MAX_PACKET_DELAY: Indicates maximum Packet Delay. This value is only applicable to DN_PERFORMANCE event.\n- AVG_PACKET_LOSS_RATE: Indicates average Loss Rate. This value is only applicable to DN_PERFORMANCE event.\n- UE_LOCATION: Indicates UE location information. This value is only applicable to SERVICE_EXPERIENCE event.\n- LIST_OF_HIGH_EXP_UE: Indicates list of high experienced UE. This value is only applicable to SM_CONGESTION event.\n- LIST_OF_MEDIUM_EXP_UE: Indicates list of medium experienced UE. This value is only applicable to SM_CONGESTION event.\n- LIST_OF_LOW_EXP_UE: Indicates list of low experienced UE. This value is only applicable to SM_CONGESTION event.\n',
    )


class DispersionType1(Enum):
    DVDA = 'DVDA'
    TDA = 'TDA'
    DVDA_AND_TDA = 'DVDA_AND_TDA'


class DispersionType(BaseModel):
    __root__: Union[DispersionType1, str] = Field(
        ...,
        description='Possible values are:\n  - DVDA: Data Volume Dispersion Analytics.\n  - TDA: Transactions Dispersion Analytics.\n  - DVDA_AND_TDA: Data Volume Dispersion Analytics and Transactions Dispersion Analytics.\n',
    )


class DispersionClass1(Enum):
    FIXED = 'FIXED'
    CAMPER = 'CAMPER'
    TRAVELLER = 'TRAVELLER'
    TOP_HEAVY = 'TOP_HEAVY'


class DispersionClass(BaseModel):
    __root__: Union[DispersionClass1, str] = Field(
        ...,
        description="Possible values are:\n- FIXED: Dispersion class as fixed UE its data or transaction usage at a location or a slice, is higher than its class threshold set for its all data or transaction usage.\n- CAMPER: Dispersion class as camper UE, its data or transaction usage at a location or a slice, is higher than its class threshold and lower than the fixed class threshold set for its all data or transaction usage..\n- TRAVELLER: Dispersion class as traveller UE, its data or transaction usage at a location or a slice, is lower than the camper class threshold set for its all data or transaction usage.\n- TOP_HEAVY: Dispersion class as Top_Heavy UE, who's dispersion percentile rating at a location or a slice, is higher than its class threshold.\n",
    )


class DispersionOrderingCriterion1(Enum):
    TIME_SLOT_START = 'TIME_SLOT_START'
    DISPERSION = 'DISPERSION'
    CLASSIFICATION = 'CLASSIFICATION'
    RANKING = 'RANKING'
    PERCENTILE_RANKING = 'PERCENTILE_RANKING'


class DispersionOrderingCriterion(BaseModel):
    __root__: Union[DispersionOrderingCriterion1, str] = Field(
        ...,
        description='Possible values are:\n- TIME_SLOT_START: Indicates the order of time slot start.\n- DISPERSION: Indicates the order of data/transaction dispersion.\n- CLASSIFICATION: Indicates the order of data/transaction classification.\n- RANKING: Indicates the order of data/transaction ranking.\n- PERCENTILE_RANKING: Indicates the order of data/transaction percentile ranking.\n',
    )


class RedTransExpOrderingCriterion1(Enum):
    TIME_SLOT_START = 'TIME_SLOT_START'
    RED_TRANS_EXP = 'RED_TRANS_EXP'


class RedTransExpOrderingCriterion(BaseModel):
    __root__: Union[RedTransExpOrderingCriterion1, str] = Field(
        ...,
        description='Possible values are:\n- TIME_SLOT_START: Indicates the order of time slot start.\n- RED_TRANS_EXP: Indicates the order of Redundant Transmission Experience.\n',
    )


class WlanOrderingCriterion1(Enum):
    TIME_SLOT_START = 'TIME_SLOT_START'
    NUMBER_OF_UES = 'NUMBER_OF_UES'
    RSSI = 'RSSI'
    RTT = 'RTT'
    TRAFFIC_INFO = 'TRAFFIC_INFO'


class WlanOrderingCriterion(BaseModel):
    __root__: Union[WlanOrderingCriterion1, str] = Field(
        ...,
        description='Possible values are:\n- TIME_SLOT_START: Indicates the order of time slot start.\n- NUMBER_OF_UES: Indicates the order of number of UEs.\n- RSSI: Indicates the order of RSSI.\n- RTT: Indicates the order of RTT.\n- TRAFFIC_INFO: Indicates the order of Traffic information.\n',
    )


class ServiceExperienceType1(Enum):
    VOICE = 'VOICE'
    VIDEO = 'VIDEO'
    OTHER = 'OTHER'


class ServiceExperienceType(BaseModel):
    __root__: Union[ServiceExperienceType1, str] = Field(
        ...,
        description='Possible values are:\n- VOICE: Indicates that the service experience analytics is for voice service.\n- VIDEO: Indicates that the service experience analytics is for video service.\n- OTHER: Indicates that the service experience analytics is for other service.\n',
    )


class DnPerfOrderingCriterion1(Enum):
    AVERAGE_TRAFFIC_RATE = 'AVERAGE_TRAFFIC_RATE'
    MAXIMUM_TRAFFIC_RATE = 'MAXIMUM_TRAFFIC_RATE'
    AVERAGE_PACKET_DELAY = 'AVERAGE_PACKET_DELAY'
    MAXIMUM_PACKET_DELAY = 'MAXIMUM_PACKET_DELAY'
    AVERAGE_PACKET_LOSS_RATE = 'AVERAGE_PACKET_LOSS_RATE'


class DnPerfOrderingCriterion(BaseModel):
    __root__: Union[DnPerfOrderingCriterion1, str] = Field(
        ...,
        description='Possible values are:  \n- AVERAGE_TRAFFIC_RATE: Indicates the average traffic rate.  \n- MAXIMUM_TRAFFIC_RATE: Indicates the maximum traffic rate.  \n- AVERAGE_PACKET_DELAY: Indicates the average packet delay.  \n- MAXIMUM_PACKET_DELAY: Indicates the maximum packet delay.  \n- AVERAGE_PACKET_LOSS_RATE: Indicates the average packet loss rate.\n',
    )


class EventId1(Enum):
    LOAD_LEVEL_INFORMATION = 'LOAD_LEVEL_INFORMATION'
    NETWORK_PERFORMANCE = 'NETWORK_PERFORMANCE'
    NF_LOAD = 'NF_LOAD'
    SERVICE_EXPERIENCE = 'SERVICE_EXPERIENCE'
    UE_MOBILITY = 'UE_MOBILITY'
    UE_COMMUNICATION = 'UE_COMMUNICATION'
    QOS_SUSTAINABILITY = 'QOS_SUSTAINABILITY'
    ABNORMAL_BEHAVIOUR = 'ABNORMAL_BEHAVIOUR'
    USER_DATA_CONGESTION = 'USER_DATA_CONGESTION'
    NSI_LOAD_LEVEL = 'NSI_LOAD_LEVEL'
    SM_CONGESTION = 'SM_CONGESTION'
    DISPERSION = 'DISPERSION'
    RED_TRANS_EXP = 'RED_TRANS_EXP'
    WLAN_PERFORMANCE = 'WLAN_PERFORMANCE'
    DN_PERFORMANCE = 'DN_PERFORMANCE'


class EventId(BaseModel):
    __root__: Union[EventId1, str] = Field(
        ...,
        description='Possible values are:\n- LOAD_LEVEL_INFORMATION: Represent the analytics of load level information of corresponding network slice.\n- NETWORK_PERFORMANCE: Represent the analytics of network performance information.\n- NF_LOAD: Indicates that the event subscribed is NF Load.\n- SERVICE_EXPERIENCE: Represent the analytics of service experience information of the specific applications.\n- UE_MOBILITY: Represent the analytics of UE mobility.\n- UE_COMMUNICATION: Represent the analytics of UE communication.\n- QOS_SUSTAINABILITY: Represent the analytics of QoS sustainability information in the certain area.\n- ABNORMAL_BEHAVIOUR: Indicates that the event subscribed is abnormal behaviour information.\n- USER_DATA_CONGESTION: Represent the analytics of the user data congestion in the certain area.\n- NSI_LOAD_LEVEL: Represent the analytics of Network Slice and the optionally associated Network Slice Instance.\n- SM_CONGESTION: Represent the analytics of Session Management congestion control experience information for specific DNN and/or S-NSSAI.\n- DISPERSION: Represents the analytics of dispersion.\n- RED_TRANS_EXP: Represents the analytics of Redundant Transmission Experience.\n- WLAN_PERFORMANCE: Represents the analytics of WLAN performance.\n- DN_PERFORMANCE: Represents the analytics of DN performance.\n',
    )


class AdditionInfoAnalyticsInfoRequest(BaseModel):
    rvWaitTime: Optional[DurationSec] = None


class SmcceUeList1(BaseModel):
    highLevel: List[Supi] = Field()
    @validator('highLevel')
    def validate_min_items_highLevel(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value
    mediumLevel: Optional[List[Supi]] = Field(None, min_items=1)
    lowLevel: Optional[List[Supi]] = Field(None, min_items=1)


class SmcceUeList2(BaseModel):
    highLevel: Optional[List[Supi]] = Field(None, min_items=1)
    mediumLevel: List[Supi] = Field()
    @validator('mediumLevel')
    def validate_min_items_mediumLevel(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value
    lowLevel: Optional[List[Supi]] = Field(None, min_items=1)


class SmcceUeList3(BaseModel):
    highLevel: Optional[List[Supi]] = Field(None, min_items=1)
    mediumLevel: Optional[List[Supi]] = Field(None, min_items=1)
    lowLevel: List[Supi] = Field()
    @validator('lowLevel')
    def validate_min_items_lowLevel(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value


class SmcceUeList(BaseModel):
    __root__: Union[SmcceUeList1, SmcceUeList2, SmcceUeList3] = Field(
        ...,
        description='Represents the List of UEs classified based on experience level of Session Management  congestion control.\n',
    )


class SpecificDataSubscription(BaseModel):
    subscriptionId: str
    producerId: Optional[NfInstanceId] = None
    producerSetId: Optional[NfSetId] = None
    dataSub: str


class ContextType1(Enum):
    PENDING_ANALYTICS = 'PENDING_ANALYTICS'
    HISTORICAL_ANALYTICS = 'HISTORICAL_ANALYTICS'
    AGGR_SUBS = 'AGGR_SUBS'
    DATA = 'DATA'
    AGGR_INFO = 'AGGR_INFO'
    ML_MODELS = 'ML_MODELS'


class ContextType(BaseModel):
    __root__: Union[ContextType1, str] = Field(
        ...,
        description='Possible values are:\n- PENDING_ANALYTICS: Represents context information that relates to pending output analytics.\n- HISTORICAL_ANALYTICS: Represents context information that relates to historical output analytics.\n- AGGR_SUBS: Represents context information about the analytics subscriptions that an NWDAF has with other NWDAFs that collectively serve an analytics subscription.\n- DATA: Represents context information about historical data that is available.\n- AGGR_INFO: Represents context information that is related to aggregation of analytics from multiple NWDAF subscriptions.\n- ML_MODELS: Represents context information about used ML models.\n',
    )


class AdrfDataType1(Enum):
    HISTORICAL_ANALYTICS = 'HISTORICAL_ANALYTICS'
    HISTORICAL_DATA = 'HISTORICAL_DATA'


class AdrfDataType(BaseModel):
    __root__: Union[AdrfDataType1, str] = Field(
        ...,
        description='Possible values are:\n- HISTORICAL_ANALYTICS: Indicates that historical analytics are stored in the ADRF.\n- HISTORICAL_DATA: Indicates that historical data are stored in the ADRF.\n',
    )


class ScpInfo(BaseModel):
    scpDomainInfoList: Optional[Dict[str, ScpDomainInfo]] = Field(
        None,
        description='A map (list of key-value pairs) where the key of the map shall be the string identifying an SCP domain\n',
    )
    scpPrefix: Optional[str] = None
    scpPorts: Optional[Dict[str, conint(ge=0, le=65535)]] = Field(
        None,
        description='Port numbers for HTTP and HTTPS. The key of the map shall be "http" or "https".\n',
    )
    addressDomains: Optional[List[str]] = Field(None, min_items=1)
    ipv4Addresses: Optional[List[Ipv4Addr]] = Field(None, min_items=1)
    ipv6Prefixes: Optional[List[Ipv6Prefix]] = Field(None, min_items=1)
    ipv4AddrRanges: Optional[List[Ipv4AddressRange]] = Field(None, min_items=1)
    ipv6PrefixRanges: Optional[List[Ipv6PrefixRange]] = Field(None, min_items=1)
    servedNfSetIdList: Optional[List[NfSetId]] = Field(None, min_items=1)
    remotePlmnList: Optional[List[PlmnId1]] = Field(None, min_items=1)
    remoteSnpnList: Optional[List[PlmnIdNid1]] = Field(None, min_items=1)
    ipReachability: Optional[IpReachability] = None
    scpCapabilities: Optional[List[ScpCapability]] = None


class PfdData(BaseModel):
    appIds: Optional[List[str]] = Field(None, min_items=1)
    afIds: Optional[List[str]] = Field(None, min_items=1)


class AfEvent3(Enum):
    SVC_EXPERIENCE = 'SVC_EXPERIENCE'
    UE_MOBILITY = 'UE_MOBILITY'
    UE_COMM = 'UE_COMM'
    EXCEPTIONS = 'EXCEPTIONS'
    USER_DATA_CONGESTION = 'USER_DATA_CONGESTION'
    PERF_DATA = 'PERF_DATA'
    DISPERSION = 'DISPERSION'
    COLLECTIVE_BEHAVIOUR = 'COLLECTIVE_BEHAVIOUR'
    MS_QOE_METRICS = 'MS_QOE_METRICS'
    MS_CONSUMPTION = 'MS_CONSUMPTION'
    MS_NET_ASSIST_INVOCATION = 'MS_NET_ASSIST_INVOCATION'
    MS_DYN_POLICY_INVOCATION = 'MS_DYN_POLICY_INVOCATION'
    MS_ACCESS_ACTIVITY = 'MS_ACCESS_ACTIVITY'


class AfEvent2(BaseModel):
    __root__: Union[AfEvent3, str] = Field(
        ..., description='Represents Application Events.'
    )


class AfEventExposureData(BaseModel):
    afEvents: List[AfEvent2] = Field()
    @validator('afEvents')
    def validate_min_items_afEvents(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value
    afIds: Optional[List[str]] = Field(None, min_items=1)
    appIds: Optional[List[str]] = Field(None, min_items=1)


class DnnInfoItem(BaseModel):
    dnn: Union[Dnn, WildcardDnn]


class DnnEasdfInfoItem(BaseModel):
    dnn: Union[Dnn, WildcardDnn]
    dnaiList: Optional[List[Dnai]] = Field(None, min_items=1)


class NssaafInfo(BaseModel):
    supiRanges: Optional[List[SupiRange]] = Field(None, min_items=1)
    internalGroupIdentifiersRanges: Optional[List[InternalGroupIdRange]] = Field(
        None, min_items=1
    )


class ExternalClientType1(Enum):
    EMERGENCY_SERVICES = 'EMERGENCY_SERVICES'
    VALUE_ADDED_SERVICES = 'VALUE_ADDED_SERVICES'
    PLMN_OPERATOR_SERVICES = 'PLMN_OPERATOR_SERVICES'
    LAWFUL_INTERCEPT_SERVICES = 'LAWFUL_INTERCEPT_SERVICES'
    PLMN_OPERATOR_BROADCAST_SERVICES = 'PLMN_OPERATOR_BROADCAST_SERVICES'
    PLMN_OPERATOR_OM = 'PLMN_OPERATOR_OM'
    PLMN_OPERATOR_ANONYMOUS_STATISTICS = 'PLMN_OPERATOR_ANONYMOUS_STATISTICS'
    PLMN_OPERATOR_TARGET_MS_SERVICE_SUPPORT = 'PLMN_OPERATOR_TARGET_MS_SERVICE_SUPPORT'


class ExternalClientType(BaseModel):
    __root__: Union[ExternalClientType1, str] = Field(
        ..., description='Indicates types of External Clients.'
    )


class SupportedGADShapes1(Enum):
    POINT = 'POINT'
    POINT_UNCERTAINTY_CIRCLE = 'POINT_UNCERTAINTY_CIRCLE'
    POINT_UNCERTAINTY_ELLIPSE = 'POINT_UNCERTAINTY_ELLIPSE'
    POLYGON = 'POLYGON'
    POINT_ALTITUDE = 'POINT_ALTITUDE'
    POINT_ALTITUDE_UNCERTAINTY = 'POINT_ALTITUDE_UNCERTAINTY'
    ELLIPSOID_ARC = 'ELLIPSOID_ARC'
    LOCAL_2D_POINT_UNCERTAINTY_ELLIPSE = 'LOCAL_2D_POINT_UNCERTAINTY_ELLIPSE'
    LOCAL_3D_POINT_UNCERTAINTY_ELLIPSOID = 'LOCAL_3D_POINT_UNCERTAINTY_ELLIPSOID'


class SupportedGADShapes(BaseModel):
    __root__: Union[SupportedGADShapes1, str] = Field(
        ..., description='Indicates supported GAD shapes.'
    )


class AnNodeType1(Enum):
    GNB = 'GNB'
    NG_ENB = 'NG_ENB'


class AnNodeType(BaseModel):
    __root__: Union[AnNodeType1, str] = Field(
        ..., description='Access Network Node Type (gNB, ng-eNB...)'
    )


class LmfInfo(BaseModel):
    servingClientTypes: Optional[List[ExternalClientType]] = Field(None, min_items=1)
    lmfId: Optional[str] = None
    servingAccessTypes: Optional[List[AccessType]] = Field(None, min_items=1)
    servingAnNodeTypes: Optional[List[AnNodeType]] = Field(None, min_items=1)
    servingRatTypes: Optional[List[RatType]] = Field(None, min_items=1)
    taiList: Optional[List[Tai1]] = Field(None, min_items=1)
    taiRangeList: Optional[List[TaiRange]] = Field(None, min_items=1)
    supportedGADShapes: Optional[List[SupportedGADShapes]] = Field(None, min_items=1)


class UdrInfo(BaseModel):
    groupId: Optional[NfGroupId] = None
    supiRanges: Optional[List[SupiRange]] = Field(None, min_items=1)
    gpsiRanges: Optional[List[IdentityRange]] = Field(None, min_items=1)
    externalGroupIdentifiersRanges: Optional[IdentityRangeList] = None
    supportedDataSets: Optional[SupportedDataSetList] = None
    sharedDataIdRanges: Optional[SharedDataIdRangeList] = None


class UdmInfo(BaseModel):
    groupId: Optional[NfGroupId] = None
    supiRanges: Optional[List[SupiRange]] = Field(None, min_items=1)
    gpsiRanges: Optional[List[IdentityRange]] = Field(None, min_items=1)
    externalGroupIdentifiersRanges: Optional[List[IdentityRange]] = Field(
        None, min_items=1
    )
    routingIndicators: Optional[List[RoutingIndicator]] = Field(None, min_items=1)
    internalGroupIdentifiersRanges: Optional[List[InternalGroupIdRange]] = Field(
        None, min_items=1
    )
    suciInfos: Optional[List[SuciInfo]] = Field(None, min_items=1)


class PlmnRange1(BaseModel):
    start: constr(regex=r'^[0-9]{3}[0-9]{2,3}$')
    end: constr(regex=r'^[0-9]{3}[0-9]{2,3}$')
    pattern: Optional[str] = None


class PlmnRange2(BaseModel):
    start: Optional[constr(regex=r'^[0-9]{3}[0-9]{2,3}$')] = None
    end: Optional[constr(regex=r'^[0-9]{3}[0-9]{2,3}$')] = None
    pattern: str


class PlmnRange(BaseModel):
    __root__: Union[PlmnRange1, PlmnRange2] = Field(
        ..., description='Range of PLMN IDs'
    )


class SmsfInfo(BaseModel):
    roamingUeInd: Optional[bool] = None
    remotePlmnRangeList: Optional[List[PlmnRange]] = Field(None, min_items=1)


class ChfInfo(BaseModel):
    supiRangeList: Optional[List[SupiRange]] = Field(None, min_items=0)
    gpsiRangeList: Optional[List[IdentityRange]] = Field(None, min_items=0)
    plmnRangeList: Optional[List[PlmnRange]] = Field(None, min_items=0)
    groupId: Optional[NfGroupId] = None
    primaryChfInstance: Optional[NfInstanceId] = None
    secondaryChfInstance: Optional[NfInstanceId] = None


class N2InterfaceAmfInfo1(BaseModel):
    ipv4EndpointAddress: List[Ipv4Addr] = Field()
    @validator('ipv4EndpointAddress')
    def validate_min_items_ipv4EndpointAddress(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value
    ipv6EndpointAddress: Optional[List[Ipv6Addr]] = Field(None, min_items=1)
    amfName: Optional[Fqdn] = None


class N2InterfaceAmfInfo2(BaseModel):
    ipv4EndpointAddress: Optional[List[Ipv4Addr]] = Field(None, min_items=1)
    ipv6EndpointAddress: List[Ipv6Addr] = Field()
    @validator('ipv6EndpointAddress')
    def validate_min_items_ipv6EndpointAddress(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value
    amfName: Optional[Fqdn] = None


class N2InterfaceAmfInfo(BaseModel):
    __root__: Union[N2InterfaceAmfInfo1, N2InterfaceAmfInfo2] = Field(
        ..., description='AMF N2 interface information'
    )


class A2xCapability(BaseModel):
    lteA2x: Optional[bool] = False
    nrA2x: Optional[bool] = False


class TimeDuration(BaseModel):
    blockedDurStartTime: Optional[DateTime] = None
    blockedDurEndTime: Optional[DateTime] = None


class Field5GDdnmfInfo(BaseModel):
    plmnId: PlmnId1


class ImsiRange1(BaseModel):
    start: constr(regex=r'^[0-9]+$')
    end: constr(regex=r'^[0-9]+$')
    pattern: Optional[str] = None


class ImsiRange2(BaseModel):
    start: Optional[constr(regex=r'^[0-9]+$')] = None
    end: Optional[constr(regex=r'^[0-9]+$')] = None
    pattern: str


class ImsiRange(BaseModel):
    __root__: Union[ImsiRange1, ImsiRange2] = Field(
        ...,
        description='A range of IMSIs (subscriber identities), either based on a numeric range, or based on regular-expression matching\n',
    )


class NetworkNodeDiameterAddress(BaseModel):
    name: DiameterIdentity
    realm: DiameterIdentity


class HssInfo(BaseModel):
    groupId: Optional[NfGroupId] = None
    imsiRanges: Optional[List[ImsiRange]] = Field(None, min_items=1)
    imsPrivateIdentityRanges: Optional[List[IdentityRange]] = Field(None, min_items=1)
    imsPublicIdentityRanges: Optional[List[IdentityRange]] = Field(None, min_items=1)
    msisdnRanges: Optional[List[IdentityRange]] = Field(None, min_items=1)
    externalGroupIdentifiersRanges: Optional[List[IdentityRange]] = Field(
        None, min_items=1
    )
    hssDiameterAddress: Optional[NetworkNodeDiameterAddress] = None
    additionalDiamAddresses: Optional[List[NetworkNodeDiameterAddress]] = Field(
        None, min_items=1
    )


class GmlcInfo(BaseModel):
    servingClientTypes: Optional[List[ExternalClientType]] = None
    gmlcNumbers: Optional[List[constr(regex=r'^[0-9]{5,15}$')]] = None


class DnnTsctsfInfoItem(BaseModel):
    dnn: Union[Dnn, WildcardDnn]


class TsctsfInfo(BaseModel):
    sNssaiInfoList: Optional[Any] = Field(
        None,
        description='A map (list of key-value pairs) where a valid JSON string serves as key',
    )
    externalGroupIdentifiersRanges: Optional[List[IdentityRange]] = None
    supiRanges: Optional[List[SupiRange]] = None
    gpsiRanges: Optional[List[IdentityRange]] = None
    internalGroupIdentifiersRanges: Optional[List[InternalGroupIdRange]] = None


class BsfInfo(BaseModel):
    dnnList: Optional[List[Dnn]] = Field(None, min_items=0)
    ipDomainList: Optional[List[str]] = Field(None, min_items=0)
    ipv4AddressRanges: Optional[List[Ipv4AddressRange]] = Field(None, min_items=0)
    ipv6PrefixRanges: Optional[List[Ipv6PrefixRange]] = Field(None, min_items=0)
    rxDiamHost: Optional[DiameterIdentity] = None
    rxDiamRealm: Optional[DiameterIdentity] = None
    groupId: Optional[NfGroupId] = None
    supiRanges: Optional[List[SupiRange]] = Field(None, min_items=0)
    gpsiRanges: Optional[List[IdentityRange]] = Field(None, min_items=0)


class MbSmfInfo(BaseModel):
    sNssaiInfoList: Optional[Any] = Field(
        None,
        description='A map (list of key-value pairs) where a valid JSON string serves as key',
    )
    tmgiRangeList: Optional[Any] = Field(
        None,
        description='A map (list of key-value pairs) where a valid JSON string serves as key',
    )
    taiList: Optional[List[Tai1]] = Field(None, min_items=1)
    taiRangeList: Optional[List[TaiRange]] = Field(None, min_items=1)
    mbsSessionList: Optional[Any] = Field(
        None,
        description='A map (list of key-value pairs) where a valid JSON string serves as key',
    )


class TmgiRange(BaseModel):
    mbsServiceIdStart: constr(regex=r'^[A-Fa-f0-9]{6}$')
    mbsServiceIdEnd: constr(regex=r'^[A-Fa-f0-9]{6}$')
    plmnId: PlmnId1
    nid: Optional[Nid2] = None


class Tmgi(BaseModel):
    mbsServiceId: constr(regex=r'^[A-Fa-f0-9]{6}$') = Field(
        ..., description='MBS Service ID'
    )
    plmnId: PlmnId1


class Ssm(BaseModel):
    sourceIpAddr: IpAddr
    destIpAddr: IpAddr


class NcgiModel(BaseModel):
    plmnId: PlmnId1
    nrCellId: constr(regex=r'^[A-Fa-f0-9]{9}$')
    nid: Optional[Nid2] = None


class DnnMbSmfInfoItem(BaseModel):
    dnn: Union[Dnn, WildcardDnn]


class AanfInfo(BaseModel):
    routingIndicators: Optional[List[constr(regex=r'^[0-9]{1,4}$')]] = None


class IpIndex(BaseModel):
    __root__: Union[int, str] = Field(
        ...,
        description='Represents the IP Index to be sent from UDM to the SMF (its value can be either an integer or a string)',
    )


class DnnUpfInfoItem(BaseModel):
    dnn: Dnn
    dnaiList: Optional[List[Dnai]] = Field(None, min_items=1)
    pduSessionTypes: Optional[List[PduSessionType]] = Field(None, min_items=1)
    ipv4AddressRanges: Optional[List[Ipv4AddressRange]] = Field(None, min_items=1)
    ipv6PrefixRanges: Optional[List[Ipv6PrefixRange]] = Field(None, min_items=1)
    natedIpv4AddressRanges: Optional[List[Ipv4AddressRange]] = Field(None, min_items=1)
    natedIpv6PrefixRanges: Optional[List[Ipv6PrefixRange]] = Field(None, min_items=1)
    ipv4IndexList: Optional[List[IpIndex]] = Field(None, min_items=1)
    ipv6IndexList: Optional[List[IpIndex]] = Field(None, min_items=1)
    networkInstance: Optional[str] = Field(
        None,
        description='The N6 Network Instance associated with the S-NSSAI and DNN.\n',
    )
    dnaiNwInstanceList: Optional[Dict[str, str]] = Field(
        None,
        description='Map of network instance per DNAI for the DNN, where the key of the map is the DNAI. When present, the value of each entry of the map shall contain a N6 network instance that is configured for the DNAI indicated by the key.\n',
    )


class MnpfInfo(BaseModel):
    msisdnRanges: List[IdentityRange] = Field()
    @validator('msisdnRanges')
    def validate_min_items_msisdnRanges(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value


class Attributes23(ManagedFunctionAttr):
    plmnIdList: Optional[PlmnIdList] = None
    commModelList: Optional[CommModelList] = None


class Attributes34(ManagedFunctionAttr):
    plmnId: Optional[PlmnId] = None
    sEPPType: Optional[SEPPType] = None
    sEPPId: Optional[int] = None
    fqdn: Optional[Fqdn] = None
    seppInfo: Optional[SeppInfo] = None


class NwdafLogicalFuncSupported(Enum):
    NWDAF_WITH_ANLF = 'NWDAF_WITH_ANLF'
    NWDAF_WITH_MTLF = 'NWDAF_WITH_MTLF'
    NWDAF_WITH_ANLF_MTLF = 'NWDAF_WITH_ANLF_MTLF'


class Attributes36(ManagedFunctionAttr):
    supportedFuncList: Optional[SupportedFuncList] = None
    address: Optional[HostAddr] = None
    scpInfo: Optional[ScpInfo] = None


class EcmConnectionType(Enum):
    USERPLANE = 'USERPLANE'
    CONTROLPLANE = 'CONTROLPLANE'
    BOTH = 'BOTH'


class GeographicalCoordinates(BaseModel):
    lattitude: Optional[int] = None
    longitude: Optional[int] = None


class AffinityAntiAffinity(BaseModel):
    affinityEAS: Optional[List[str]] = None
    antiAffinityEAS: Optional[List[str]] = None


class VirtualResource(BaseModel):
    virtualMemory: Optional[int] = None
    virtualDisk: Optional[int] = None
    virutalCPU: Optional[str] = None
    vnfdId: Optional[str] = None


class SoftwareImageInfo(BaseModel):
    minimumDisk: Optional[int] = None
    minimumRAM: Optional[int] = None
    discFormat: Optional[str] = None
    operatingSystem: Optional[str] = None
    swImageRef: Optional[str] = None


class Duration(BaseModel):
    startTime: Optional[DateTime] = None
    endTime: Optional[DateTime] = None


class EASServicePermission(Enum):
    TRIAL = 'TRIAL'
    SILVER = 'SILVER'
    GOLD = 'GOLD'


class EASFeature(Enum):
    SINGLE = 'SINGLE'
    MULTIPLE = 'MULTIPLE'


class EASStatus(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class ResourceReservationRequirement(BaseModel):
    computeRequirement: Optional[str] = None
    storageRequirement: Optional[str] = None
    networkingRequirement: Optional[int] = None


class ReservationStatus(Enum):
    RESERVED = 'RESERVED'
    USEd = 'USEd'


class ResourceReservationStatus(BaseModel):
    resourceId: Optional[str] = None
    reservationStatus: Optional[ReservationStatus] = Field(
        None, description='any of enumrated value'
    )


class TriggerType(Enum):
    IMMEDIATE = 'IMMEDIATE'
    FUTURE = 'FUTURE'


class RelocationTriggerInfo(BaseModel):
    triggerType: Optional[TriggerType] = Field(
        None, description='any of enumrated value'
    )
    futuristicTriggerTime: Optional[DateTime] = None


class RelocationPolicy(Enum):
    True_ = True
    False_ = False
    YESwNOTIFY = 'YESwNOTIFY'


class AvailableEDNList(BaseModel):
    resourceQuota: Optional[VirtualResource] = None


class Attributes42(ManagedFunctionAttr):
    eASIdentifier: Optional[str] = None
    eESAddress: Optional[List[str]] = None
    eASRequirementsRef: Optional[Dn] = None
    eASAddress: Optional[List[str]] = None
    relocationTriggerInfo: Optional[RelocationTriggerInfo] = None
    relocationRejectByASP: Optional[bool] = None


class Attributes44(ManagedFunctionAttr):
    eCSAddress: Optional[str] = None
    providerIdentifier: Optional[str] = None
    edgeDataNetworkRef: Optional[DnList] = None
    eESFuncitonRef: Optional[DnList] = None
    softwareImageInfo: Optional[SoftwareImageInfo] = None


class Attributes46(ManagedFunctionAttr):
    plmnIdList: Optional[PlmnIdList] = None


class Attributes48(ManagedFunctionAttr):
    plmnId: Optional[PlmnId] = None
    sEPPId: Optional[int] = None
    fqdn: Optional[Fqdn] = None


class Attributes49(EPRPAttr):
    localAddress: Optional[LocalAddress] = None
    remoteAddress: Optional[RemoteAddress] = None


class Attributes50(EPRPAttr):
    localAddress: Optional[LocalAddress] = None
    remoteAddress: Optional[RemoteAddress] = None
    epTransportRefs: Optional[DnList] = None


class Attributes51(EPRPAttr):
    localAddress: Optional[LocalAddress] = None
    remoteAddress: Optional[RemoteAddress] = None


class Attributes71(EPRPAttr):
    remotePlmnId: Optional[PlmnId] = None
    remoteSeppAddress: Optional[HostAddr] = None
    remoteSeppId: Optional[int] = None
    n32cParas: Optional[str] = None
    n32fPolicy: Optional[str] = None
    withIPX: Optional[bool] = None


class Attributes72(EPRPAttr):
    localAddress: Optional[LocalAddress] = None
    remoteAddress: Optional[RemoteAddress] = None


class Attributes90(BaseModel):
    FiveQiDscpMappingList: Optional[List[FiveQiDscpMapping]] = None


class ResourceType1(Enum):
    GBR = 'GBR'
    NON_GBR = 'NON_GBR'
    DELAY_CRITICAL_GBR = 'DELAY_CRITICAL_GBR'


class GtpUPathQoSMonitoringState(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class QFQoSMonitoringState(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class Attributes98(EPRPAttr):
    localAddress: Optional[LocalAddress] = None
    remoteAddress: Optional[RemoteAddress] = None


class ActivationStatus(Enum):
    ACTIVATED = 'ACTIVATED'
    DEACTIVATED = 'DEACTIVATED'


class Attributes130(BaseModel):
    activationStatus: Optional[ActivationStatus] = None


class Attributes131(EPRPAttr):
    localAddress: Optional[LocalAddress] = None
    remoteAddress: Optional[RemoteAddress] = None


class Attributes134(ManagedFunctionAttr):
    gnbDuId: Optional[GnbDuId] = None
    gnbDuName: Optional[GnbName] = None
    gnbId: Optional[GnbId] = None
    gnbIdLength: Optional[GnbIdLength] = None
    rimRSReportConf: Optional[RimRSReportConf] = None
    configurable5QISetRef: Optional[Dn] = None
    dynamic5QISetRef: Optional[Dn] = None


class Attributes139(BaseModel):
    absoluteFrequencySSB: Optional[conint(ge=0, le=3279165)] = None
    ssbSubCarrierSpacing: Optional[SsbSubCarrierSpacing] = None
    multiFrequencyBandListNR: Optional[conint(ge=1, le=256)] = None


class Attributes140(BaseModel):
    earfcnDL: Optional[conint(ge=0, le=262143)] = None
    multiBandInfoListEutra: Optional[conint(ge=1, le=256)] = None


class Attributes141(ManagedFunctionAttr):
    txDirection: Optional[TxDirection] = None
    configuredMaxTxPower: Optional[int] = None
    arfcnDL: Optional[int] = None
    arfcnUL: Optional[int] = None
    bSChannelBwDL: Optional[int] = None
    bSChannelBwUL: Optional[int] = None
    sectorEquipmentFunctionRef: Optional[Dn] = None


class Attributes142(ManagedFunctionAttr):
    bwpContext: Optional[BwpContext] = None
    isInitialBwp: Optional[IsInitialBwp] = None
    subCarrierSpacing: Optional[int] = None
    cyclicPrefix: Optional[CyclicPrefix] = None
    startRB: Optional[int] = None
    numberOfRBs: Optional[int] = None


class Attributes143(BaseModel):
    coverageShape: Optional[CoverageShape] = None
    digitalAzimuth: Optional[DigitalAzimuth] = None
    digitalTilt: Optional[DigitalTilt] = None


class BeamType(Enum):
    SSB_BEAM = 'SSB_BEAM'


class Attributes144(BaseModel):
    beamIndex: Optional[int] = None
    beamType: Optional[BeamType] = None
    beamAzimuth: Optional[conint(ge=-1800, le=1800)] = None
    beamTilt: Optional[conint(ge=-900, le=900)] = None
    beamHorizWidth: Optional[conint(ge=0, le=3599)] = None
    beamVertWidth: Optional[conint(ge=0, le=1800)] = None


class Attributes146(BaseModel):
    nRTCI: Optional[int] = None
    cellIndividualOffset: Optional[CellIndividualOffset] = None
    adjacentNRCellRef: Optional[Dn] = None
    nRFreqRelationRef: Optional[Dn] = None
    isRemoveAllowed: Optional[bool] = None
    isHOAllowed: Optional[bool] = None
    isESCoveredBy: Optional[IsESCoveredBy] = None
    isENDCAllowed: Optional[bool] = None
    isMLBAllowed: Optional[bool] = None


class Attributes147(ManagedFunctionAttr):
    adjacentEUtranCellRef: Optional[Dn] = None


class Attributes148(BaseModel):
    offsetMO: Optional[QOffsetRangeList] = None
    blockListEntry: Optional[List[conint(ge=0, le=1007)]] = None
    blockListEntryIdleMode: Optional[int] = None
    cellReselectionPriority: Optional[int] = None
    cellReselectionSubPriority: Optional[
        confloat(ge=0.2, le=0.8, multiple_of=0.2)
    ] = None
    pMax: Optional[conint(ge=-30, le=33)] = None
    qOffsetFreq: Optional[QOffsetFreq] = None
    qQualMin: Optional[float] = None
    qRxLevMin: Optional[conint(ge=-140, le=-44)] = None
    threshXHighP: Optional[conint(ge=0, le=62)] = None
    threshXHighQ: Optional[conint(ge=0, le=31)] = None
    threshXLowP: Optional[conint(ge=0, le=62)] = None
    threshXLowQ: Optional[conint(ge=0, le=31)] = None
    tReselectionNr: Optional[conint(ge=0, le=7)] = None
    tReselectionNRSfHigh: Optional[TReselectionNRSf] = None
    tReselectionNRSfMedium: Optional[TReselectionNRSf] = None
    nRFrequencyRef: Optional[Dn] = None


class Attributes149(BaseModel):
    cellIndividualOffset: Optional[CellIndividualOffset] = None
    blackListEntry: Optional[List[conint(ge=0, le=1007)]] = None
    blackListEntryIdleMode: Optional[int] = None
    cellReselectionPriority: Optional[int] = None
    cellReselectionSubPriority: Optional[
        confloat(ge=0.2, le=0.8, multiple_of=0.2)
    ] = None
    pMax: Optional[conint(ge=-30, le=33)] = None
    qOffsetFreq: Optional[QOffsetFreq] = None
    qQualMin: Optional[float] = None
    qRxLevMin: Optional[conint(ge=-140, le=-44)] = None
    threshXHighP: Optional[conint(ge=0, le=62)] = None
    threshXHighQ: Optional[conint(ge=0, le=31)] = None
    threshXLowP: Optional[conint(ge=0, le=62)] = None
    threshXLowQ: Optional[conint(ge=0, le=31)] = None
    tReselectionEutran: Optional[conint(ge=0, le=7)] = None
    tReselectionNRSfHigh: Optional[TReselectionNRSf] = None
    tReselectionNRSfMedium: Optional[TReselectionNRSf] = None
    eUTranFrequencyRef: Optional[Dn] = None


class Attributes150(BaseModel):
    intrasystemANRManagementSwitch: Optional[bool] = None
    intersystemANRManagementSwitch: Optional[bool] = None


class IsProbingCapable(Enum):
    True_ = True
    False_ = False


class EnergySavingState1(Enum):
    IS_NOT_ENERGY_SAVING = 'IS_NOT_ENERGY_SAVING'
    IS_ENERGY_SAVING = 'IS_ENERGY_SAVING'


class Attributes151(BaseModel):
    desSwitch: Optional[bool] = None
    intraRatEsActivationOriginalCellLoadParameters: Optional[
        IntraRatEsActivationOriginalCellLoadParameters
    ] = None
    intraRatEsActivationCandidateCellsLoadParameters: Optional[
        IntraRatEsActivationCandidateCellsLoadParameters
    ] = None
    intraRatEsDeactivationCandidateCellsLoadParameters: Optional[
        IntraRatEsDeactivationCandidateCellsLoadParameters
    ] = None
    esNotAllowedTimePeriod: Optional[EsNotAllowedTimePeriod] = None
    interRatEsActivationOriginalCellParameters: Optional[
        InterRatEsActivationOriginalCellParameters
    ] = None
    interRatEsActivationCandidateCellParameters: Optional[
        InterRatEsActivationCandidateCellParameters
    ] = None
    interRatEsDeactivationCandidateCellParameters: Optional[
        InterRatEsDeactivationCandidateCellParameters
    ] = None
    isProbingCapable: Optional[IsProbingCapable] = None
    energySavingState: Optional[EnergySavingState1] = None


class Attributes152(BaseModel):
    drachOptimizationControl: Optional[bool] = None
    ueAccProbabilityDist: Optional[UeAccProbabilityDist] = None
    ueAccDelayProbabilityDist: Optional[UeAccDelayProbabilityDist] = None


class Attributes153(BaseModel):
    dmroControl: Optional[bool] = None
    maximumDeviationHoTriggerLow: Optional[MaximumDeviationHoTriggerLow] = None
    maximumDeviationHoTriggerHigh: Optional[MaximumDeviationHoTriggerHigh] = None
    minimumTimeBetweenHoTriggerChange: Optional[
        MinimumTimeBetweenHoTriggerChange
    ] = None
    tstoreUEcntxt: Optional[TstoreUEcntxt] = None


class Attributes154(BaseModel):
    dlboControl: Optional[bool] = None
    maximumDeviationHoTrigger: Optional[MaximumDeviationHoTrigger] = None
    minimumTimeBetweenHoTriggerChange: Optional[
        MinimumTimeBetweenHoTriggerChange
    ] = None


class Attributes155(BaseModel):
    dPciConfigurationControl: Optional[bool] = None
    nRPciList: Optional[NRPciList] = None


class Attributes156(BaseModel):
    cPciConfigurationControl: Optional[bool] = None
    cSonPciList: Optional[CSonPciList] = None


class EnergySavingControl1(Enum):
    TO_BE_ENERGY_SAVING = 'TO_BE_ENERGY_SAVING'
    TO_BE_NOT_ENERGY_SAVING = 'TO_BE_NOT_ENERGY_SAVING'


class Attributes157(BaseModel):
    cesSwitch: Optional[bool] = None
    intraRatEsActivationOriginalCellLoadParameters: Optional[
        IntraRatEsActivationOriginalCellLoadParameters
    ] = None
    intraRatEsActivationCandidateCellsLoadParameters: Optional[
        IntraRatEsActivationCandidateCellsLoadParameters
    ] = None
    intraRatEsDeactivationCandidateCellsLoadParameters: Optional[
        IntraRatEsDeactivationCandidateCellsLoadParameters
    ] = None
    esNotAllowedTimePeriod: Optional[EsNotAllowedTimePeriod] = None
    interRatEsActivationOriginalCellParameters: Optional[
        IntraRatEsActivationOriginalCellLoadParameters
    ] = None
    interRatEsActivationCandidateCellParameters: Optional[
        IntraRatEsActivationOriginalCellLoadParameters
    ] = None
    interRatEsDeactivationCandidateCellParameters: Optional[
        IntraRatEsActivationOriginalCellLoadParameters
    ] = None
    energySavingControl: Optional[EnergySavingControl1] = None
    energySavingState: Optional[EnergySavingState1] = None


class Attributes158(BaseModel):
    frequencyDomainPara: Optional[FrequencyDomainPara] = None
    sequenceDomainPara: Optional[SequenceDomainPara] = None
    timeDomainPara: Optional[TimeDomainPara] = None


class Attributes159(BaseModel):
    setId: Optional[RSSetId] = None
    setType: Optional[RSSetType] = None
    nRCellDURefs: Optional[DnList] = None


class Attributes160(ManagedFunctionAttr):
    gnbId: Optional[GnbId] = None
    gnbIdLength: Optional[GnbIdLength] = None


class Attributes162(ManagedFunctionAttr):
    gnbId: Optional[GnbId] = None
    gnbIdLength: Optional[GnbIdLength] = None
    plmnId: Optional[PlmnId] = None


class Attributes163(ManagedFunctionAttr):
    cellLocalId: Optional[int] = None
    nrPci: Optional[NrPci] = None
    plmnIdList: Optional[PlmnIdList] = None
    nRFrequencyRef: Optional[Dn] = None


class Attributes164(ManagedFunctionAttr):
    eNBId: Optional[int] = None


class Attributes165(ManagedFunctionAttr):
    EUtranFrequencyRef: Optional[Dn] = None


class Attributes166(EPRPAttr):
    localAddress: Optional[LocalAddress] = None
    remoteAddress: Optional[RemoteAddress] = None


class Attributes172(EPRPAttr):
    localAddress: Optional[LocalAddress] = None
    remoteAddress: Optional[RemoteAddress] = None
    epTransportRefs: Optional[DnList] = None


class Attributes174(EPRPAttr):
    localAddress: Optional[LocalAddress] = None
    remoteAddress: Optional[RemoteAddress] = None


class Attributes177(BaseModel):
    coverageShapeList: Optional[int] = None
    downlinkTransmitPowerRange: Optional[ParameterRange] = None
    antennaTiltRange: Optional[ParameterRange] = None
    antennaAzimuthRange: Optional[ParameterRange] = None
    digitalTiltRange: Optional[ParameterRange] = None
    digitalAzimuthRange: Optional[ParameterRange] = None


class MDATypes(BaseModel):
    __root__: List[str]


class ReportingMethod1(Enum):
    FILE = 'FILE'
    STREAMING = 'STREAMING'
    NOTIFICATION = 'NOTIFICATION'


class ReportingTarget(BaseModel):
    __root__: Uri


class AnalyticsScopeType1(BaseModel):
    managedEntitiesScope: Optional[DnList] = None


class AnalyticsScopeType2(BaseModel):
    areaScope: Optional[GeoArea] = None


class AnalyticsScopeType(BaseModel):
    __root__: Union[AnalyticsScopeType1, AnalyticsScopeType2]


class AnalyticsSchedule2(BaseModel):
    granularityPeriod: Optional[int] = None


class TimeWindowModel(BaseModel):
    mDAOutputStartTime: Optional[DateTime] = None
    mDAOutputEndTime: Optional[DateTime] = None


class MDAOutputEntry(BaseModel):
    mDAOutputIEName: Optional[str] = None
    mDAOutputIEValue: Optional[Any] = None


class ThresholdInfoModel(BaseModel):
    monitoredMDAOutputIE: Optional[str] = None
    thresholdDirection: Optional[ThresholdDirection] = None
    thresholdValue: Optional[Union[int, Float]] = None
    hysteresis: Optional[Union[conint(ge=0), confloat(ge=0.0)]] = None


class Attributes181(ManagedFunctionAttr):
    supportedMDACapabilities: Optional[MDATypes] = None


class MLContext(BaseModel):
    inferenceEntityRef: Optional[DnList] = None
    dataProviderRef: Optional[DnList] = None


class RequestStatus(Enum):
    NOT_STARTED = 'NOT_STARTED'
    TRAINING_IN_PROGRESS = 'TRAINING_IN_PROGRESS'
    SUSPENDED = 'SUSPENDED'
    FINISHED = 'FINISHED'
    CANCELLED = 'CANCELLED'


class ModelPerformance(BaseModel):
    inferenceOutputName: Optional[str] = None
    performanceMetric: Optional[str] = None
    performanceScore: Optional[float] = None
    decisionConfidenceScore: Optional[float] = None


class Status2(Enum):
    RUNNING = 'RUNNING'
    CANCELLING = 'CANCELLING'
    CANCELLED = 'CANCELLED'
    SUSPENDED = 'SUSPENDED'
    FINSHED = 'FINSHED'


class ProgressStateInfo(Enum):
    COLLECTING_DATA = 'COLLECTING_DATA'
    PREPARING_TRAINING_DATA = 'PREPARING_TRAINING_DATA'
    TRAINING = 'TRAINING'


class TrainingProcessMonitor(BaseModel):
    mLTrainingProcessId: Optional[str] = None
    status: Optional[Status2] = None
    progressPercentage: Optional[conint(ge=0, le=100)] = None
    progressStateInfo: Optional[ProgressStateInfo] = None
    resultStateInfo: Optional[str] = None


class Attributes183(ManagedFunctionAttr):
    mLEntityRepositoryRef: Optional[DnList] = None


class Attributes185(BaseModel):
    mLTrainingProcessId: Optional[str] = None
    priority: Optional[int] = None
    terminationConditions: Optional[str] = None
    progressStatus: Optional[TrainingProcessMonitor] = None
    cancelProcess: Optional[bool] = None
    suspendProcess: Optional[bool] = None
    trainingRequestRef: Optional[DnList] = None
    trainingReportRef: Optional[Dn] = None
    mLEnityGeneratedRef: Optional[Dn] = None


class Attributes186(BaseModel):
    mLEntityId: Optional[str] = None
    areConsumerTrainingDataUsed: Optional[bool] = None
    usedConsumerTrainingData: Optional[List[str]] = None
    modelConfidenceIndication: Optional[int] = None
    modelPerformanceTraining: Optional[List[ModelPerformance]] = None
    areNewTrainingDataUsed: Optional[bool] = None
    trainingRequestRef: Optional[DnList] = None
    trainingProcessRef: Optional[Dn] = None
    trainingReportRef: Optional[Dn] = None
    lastTrainingRef: Optional[Dn] = None
    mLEnityGeneratedRef: Optional[Dn] = None


class Attributes187(BaseModel):
    mLEntityId: Optional[str] = None
    inferenceType: Optional[str] = None
    mLEntityVersion: Optional[str] = None
    expectedRunTimeContext: Optional[MLContext] = None
    trainingContext: Optional[MLContext] = None
    runTimeContext: Optional[MLContext] = None


class Attributes188(BaseModel):
    mLRepositoryId: Optional[str] = None


class IntentAdminState(Enum):
    ACTIVATED = 'ACTIVATED'
    DEACTIVATED = 'DEACTIVATED'


class IntentPreemptionCapability(Enum):
    True_ = True
    False_ = False


class ExpectationVerb(Enum):
    DELIVER = 'DELIVER'
    ENSURE = 'ENSURE'


class ObjectType(Enum):
    RAN_SubNetwork = 'RAN_SubNetwork'
    Edge_Service_Support = 'Edge_Service_Support'
    field_5GC_SubNetwork = '5GC_SubNetwork'


class Condition(Enum):
    IS_EQUAL_TO = 'IS_EQUAL_TO'
    IS_LESS_THAN = 'IS_LESS_THAN'
    IS_GREATER_THAN = 'IS_GREATER_THAN'
    IS_WITHIN_RANGE = 'IS_WITHIN_RANGE'
    IS_OUTSIDE_RANGE = 'IS_OUTSIDE_RANGE'
    IS_ONE_OF = 'IS_ONE_OF'
    IS_NOT_ONE_OF = 'IS_NOT_ONE_OF'
    IS_EQUAL_TO_OR_LESS_THAN = 'IS_EQUAL_TO_OR_LESS_THAN'
    IS_EQUAL_TO_OR_GREATER_THAN = 'IS_EQUAL_TO_OR_GREATER_THAN'
    IS_ALL_OF = 'IS_ALL_OF'


class Selectivity(Enum):
    ALL_OF = 'ALL_OF'
    ONE_OF = 'ONE_OF'
    ANY_OF = 'ANY_OF'


class FulfilmentStatus(Enum):
    FULFILLED = 'FULFILLED'
    NOT_FULFILLED = 'NOT_FULFILLED'


class NotFulfilledState(Enum):
    ACKNOWLEDGED = 'ACKNOWLEDGED'
    COMPLIANT = 'COMPLIANT'
    DEGRADED = 'DEGRADED'
    SUSPENDED = 'SUSPENDED'
    TERMINATED = 'TERMINATED'
    FULFILMENTFAILED = 'FULFILMENTFAILED'


class FulfilmentInfo(BaseModel):
    fulfilmentStatus: Optional[FulfilmentStatus] = None
    notFullfilledState: Optional[NotFulfilledState] = None
    notFulfilledReasons: Optional[List[str]] = Field(
        None,
        description='An attribute which is used when FulfilmentInfo is implemented for IntentFulfilmentInfo',
    )


class Frequency(BaseModel):
    arfcn: Optional[int] = Field(
        None,
        description='This attribute shall be supported, when the frequency information represent RF reference frequency. The allowed values for NR see TS 38.104 subclause 5.4.2.1; The allowed values for EUTRAN see TS 36.104 [X] subclause 5.7.3; ',
    )
    freqband: Optional[str] = Field(
        None,
        description='This attribute shall be supported, when the frequency information represent frequency operating band.  The allowed values for NR see TS 38.104 subclause 5.4.2.3; The allowed value for EUTRAN see TS 36.104 subclause 5.7.3       ',
    )


class TargetFulfilmentResult(BaseModel):
    targetName: Optional[str] = None
    targetFulfilmentInfo: Optional[FulfilmentInfo] = None
    targetAchievedValue: Optional[float] = None


class ConflictType(Enum):
    INTENT_CONFLICT = 'INTENT_CONFLICT'
    EXPECTATION_CONFLICT = 'EXPECTATION_CONFLICT'
    TARGET_CONFLICT = 'TARGET_CONFLICT'


class IntentConflictReport(BaseModel):
    conflictId: Optional[str] = None
    conflictType: Optional[ConflictType] = None
    conflictingIntent: Optional[Dn] = Field(
        None,
        description='This will be present if the value of conflictType is INTENT_CONFLICT. It describes the DN of the conflicting intent',
    )
    conflictingExpectation: Optional[str] = Field(
        None,
        description='This will be present if the value of conflictType is EXPECTATION_CONFLICT. It describes the expectationId of the conflicting IntentExpectation with an Intent       ',
    )
    conflictingTarget: Optional[str] = Field(
        None,
        description='This will be present if the value of conflictType is TARGET_CONFLICT. It describes the targetName of the conflicting ExpectationTarget with an IntentExpectation           ',
    )


class FeasibilityCheckResult(Enum):
    FEASIBLE = 'FEASIBLE'
    INFEASIBLE = 'INFEASIBLE'


class IntentFeasibilityCheckReport(BaseModel):
    feasibilityCheckResult: Optional[FeasibilityCheckResult] = None
    infeasibilityReason: Optional[str] = Field(
        None,
        description='An attribute which is used when feasibilityCheckResult is INFEASIBLE',
    )


class SupportedExpectationObjectType(Enum):
    RAN_SUBNETWORK = 'RAN_SUBNETWORK'
    EDGE_SERVICE_SUPPORT = 'EDGE_SERVICE_SUPPORT'
    field_5GC_SUBNETWORK = '5GC_SUBNETWORK'


class IntentHandlingCapability(BaseModel):
    intentHandlingCapabilityId: Optional[str] = None
    supportedExpectationObjectType: Optional[SupportedExpectationObjectType] = Field(
        None,
        description='It describes the expectation object type which can be supported by a specific intent handling function of MnS producer.',
    )
    supportedExpectationTargetNames: Optional[List[str]] = Field(
        None,
        description='It describes the supported expectation targets for the supported expectation object type.',
    )


class ObjectType1(Enum):
    RAN_SubNetwork = 'RAN_SubNetwork'


class ObjectType2(Enum):
    Radio_Service = 'Radio_Service'


class ObjectType3(Enum):
    EdgeService_Support = 'EdgeService_Support'


class ObjectType4(Enum):
    field_5GC_SubNetwork = '5GC_SubNetwork'


class TargetName(Enum):
    WeakRSRPRatio = 'WeakRSRPRatio'


class TargetCondition(Enum):
    IS_LESS_THAN = 'IS_LESS_THAN'


class ContextAttribute(Enum):
    WeakRSRPThreshold = 'WeakRSRPThreshold'


class ContextCondition(Enum):
    IS_LESS_THAN = 'IS_LESS_THAN'


class WeakRSRPContext(BaseModel):
    contextAttribute: Optional[ContextAttribute] = None
    contextCondition: Optional[ContextCondition] = None
    contextValueRange: Optional[float] = None


class TargetName1(Enum):
    LowSINRRatio = 'LowSINRRatio'


class ContextAttribute1(Enum):
    LowSINRThreshold = 'LowSINRThreshold'


class LowSINRContext(BaseModel):
    contextAttribute: Optional[ContextAttribute1] = None
    contextCondition: Optional[ContextCondition] = None
    contextValueRange: Optional[int] = None


class TargetName2(Enum):
    AveULRANUEThpt = 'AveULRANUEThpt'


class TargetCondition2(Enum):
    IS_GREATER_THAN = 'IS_GREATER_THAN'


class AveULRANUEThptTarget(BaseModel):
    targetName: Optional[TargetName2] = None
    targetCondition: Optional[TargetCondition2] = None
    targetValueRange: Optional[int] = None


class TargetName3(Enum):
    AveDLRANUEThpt = 'AveDLRANUEThpt'


class AveDLRANUEThptTarget(BaseModel):
    targetName: Optional[TargetName3] = None
    targetCondition: Optional[TargetCondition2] = None
    targetValueRange: Optional[int] = None


class TargetName4(Enum):
    LowULRANUEThptRatio = 'LowULRANUEThptRatio'


class TargetCondition4(Enum):
    IS_LESS_THAN = 'IS_LESS_THAN'


class ContextAttribute2(Enum):
    LowULRANUEThptThreshold = 'LowULRANUEThptThreshold'


class ContextCondition2(Enum):
    Is_less_than = 'Is_less_than'


class LowULRANUEThptContext(BaseModel):
    contextAttribute: Optional[ContextAttribute2] = None
    contextCondition: Optional[ContextCondition2] = None
    contextValueRange: Optional[float] = None


class TargetName5(Enum):
    LowDLRANUEThptRatio = 'LowDLRANUEThptRatio'


class ContextAttribute3(Enum):
    LowDLRANUEThptThreshold = 'LowDLRANUEThptThreshold'


class ContextCondition3(Enum):
    IS_LESS_THAN = 'IS_LESS_THAN'


class LowDLRANUEThptContext(BaseModel):
    contextAttribute: Optional[ContextAttribute3] = None
    contextCondition: Optional[ContextCondition3] = None
    contextValueRange: Optional[float] = None


class TargetName6(Enum):
    HighULPrbLoadRatio = 'HighULPrbLoadRatio'


class ContextAttribute4(Enum):
    HighULPrbLoadThreshold = 'HighULPrbLoadThreshold'


class HighULPrbLoadContext(BaseModel):
    contextAttribute: Optional[ContextAttribute4] = None
    contextCondition: Optional[ContextCondition3] = None
    contextValueRange: Optional[conint(ge=0, le=100)] = None


class TargetName7(Enum):
    HighDLPrbLoadRatio = 'HighDLPrbLoadRatio'


class ContextAttribute5(Enum):
    HighDLPrbLoadThreshold = 'HighDLPrbLoadThreshold'


class HighDLPrbLoadContext(BaseModel):
    contextAttribute: Optional[ContextAttribute5] = None
    contextCondition: Optional[ContextCondition3] = None
    contextValueRange: Optional[conint(ge=0, le=100)] = None


class TargetName8(Enum):
    AveULPrbLoad = 'AveULPrbLoad'


class AveULPrbLoadTarget(BaseModel):
    targetName: Optional[TargetName8] = None
    targetCondition: Optional[TargetCondition4] = None
    targetValueRange: Optional[conint(ge=0, le=100)] = None


class TargetName9(Enum):
    AveDLPrbLoad = 'AveDLPrbLoad'


class AveDLPrbLoadTarget(BaseModel):
    targetName: Optional[TargetName9] = None
    targetCondition: Optional[TargetCondition4] = None
    targetValueRange: Optional[conint(ge=0, le=100)] = None


class TargetName10(Enum):
    RANEnergyConsumption = 'RANEnergyConsumption'


class RANEnergyConsumptionTarget(BaseModel):
    targetName: Optional[TargetName10] = None
    targetCondition: Optional[TargetCondition4] = None
    targetValueRange: Optional[int] = None


class TargetName11(Enum):
    RANEnergyEfficiency = 'RANEnergyEfficiency'


class TargetCondition11(Enum):
    IS_GREATER_THAN = 'IS_GREATER_THAN'


class RANEnergyEfficiencyTarget(BaseModel):
    targetName: Optional[TargetName11] = None
    targetCondition: Optional[TargetCondition11] = None
    targetValueRange: Optional[int] = None


class TargetName12(Enum):
    DlThptPerUE = 'DlThptPerUE'


class DLThptPerUETarget(BaseModel):
    targetName: Optional[TargetName12] = None
    targetCondition: Optional[TargetCondition11] = None
    targetValueRange: Optional[XLThpt] = None


class TargetName13(Enum):
    UlThptPerUE = 'UlThptPerUE'


class ULThptPerUETarget(BaseModel):
    targetName: Optional[TargetName13] = None
    targetCondition: Optional[TargetCondition11] = None
    targetValueRange: Optional[XLThpt] = None


class TargetName14(Enum):
    DlLatency = 'DlLatency'


class TargetCondition14(Enum):
    IS_LESS_THAN = 'IS_LESS_THAN'


class DLLatencyTarget(BaseModel):
    targetName: Optional[TargetName14] = None
    targetCondition: Optional[TargetCondition14] = None
    targetValueRange: Optional[int] = None


class TargetName15(Enum):
    UlLatency = 'UlLatency'


class ULLatencyTarget(BaseModel):
    targetName: Optional[TargetName15] = None
    targetCondition: Optional[TargetCondition14] = None
    targetValueRange: Optional[int] = None


class TargetName16(Enum):
    maxNumberofUEs = 'maxNumberofUEs'


class MaxNumberofUEsTarget(BaseModel):
    targetName: Optional[TargetName16] = None
    targetCondition: Optional[TargetCondition14] = None
    targetValueRange: Optional[int] = None


class TargetName17(Enum):
    activityFactor = 'activityFactor'


class TargetCondition17(Enum):
    IS_EQUAL_TO = 'IS_EQUAL_TO'


class ActivityFactorTarget(BaseModel):
    targetName: Optional[TargetName17] = None
    targetCondition: Optional[TargetCondition17] = None
    targetValueRange: Optional[int] = None


class TargetName18(Enum):
    uESpeed = 'uESpeed'


class TargetCondition18(Enum):
    IS_LESS_THAN = 'IS_LESS_THAN'


class UESpeedTarget(BaseModel):
    targetName: Optional[TargetName18] = None
    targetCondition: Optional[TargetCondition18] = None
    targetValueRange: Optional[int] = None


class TargetName19(Enum):
    MaxNumberofPDUsessions = 'MaxNumberofPDUsessions'


class ContextAttribute6(Enum):
    field_5GSession = '5GSession'


class ContextCondition6(Enum):
    IS_less_THAN = 'IS_less_THAN'


class Field5GSessionContext(BaseModel):
    contextAttribute: Optional[ContextAttribute6] = None
    contextCondition: Optional[ContextCondition6] = None
    contextValueRange: Optional[int] = None


class TargetName20(Enum):
    MaxNumberofRegisteredsubscribers = 'MaxNumberofRegisteredsubscribers'


class MaxNumberofRegisteredsubscribersTarget(BaseModel):
    targetName: Optional[TargetName20] = None
    targetCondition: Optional[TargetCondition18] = None
    targetValueRange: Optional[int] = None


class TargetName21(Enum):
    IncomingData = 'IncomingData'


class IncomingDataTarget(BaseModel):
    targetName: Optional[TargetName21] = None
    targetCondition: Optional[TargetCondition18] = None
    targetValueRange: Optional[int] = None


class TargetName22(Enum):
    OutgoingData = 'OutgoingData'


class OutgoingDataTarget(BaseModel):
    targetName: Optional[TargetName22] = None
    targetCondition: Optional[TargetCondition18] = None
    targetValueRange: Optional[int] = None


class ContextAttribute7(Enum):
    CoverageAreaPolygon = 'CoverageAreaPolygon'


class ContextCondition7(Enum):
    IS_ALL_OF = 'IS_ALL_OF'


class CoverageAreaPolygonContext(BaseModel):
    contextAttribute: Optional[ContextAttribute7] = None
    contextCondition: Optional[ContextCondition7] = None
    contextValueRange: Optional[GeoArea] = None


class ContextAttribute8(Enum):
    CoverageAreaTac = 'CoverageAreaTac'


class CoverageTACContext(BaseModel):
    contextAttribute: Optional[ContextAttribute8] = None
    contextCondition: Optional[ContextCondition7] = None
    contextValueRange: Optional[List[Tac]] = None


class ContextAttribute9(Enum):
    PLMN = 'PLMN'


class PLMNContext(BaseModel):
    contextAttribute: Optional[ContextAttribute9] = None
    contextCondition: Optional[ContextCondition7] = None
    contextValueRange: Optional[List[PlmnId]] = None


class ContextAttribute10(Enum):
    DlFrequency = 'DlFrequency'


class DlFrequencyContext(BaseModel):
    contextAttribute: Optional[ContextAttribute10] = None
    contextCondition: Optional[ContextCondition7] = None
    contextValueRange: Optional[List[Frequency]] = None


class ContextAttribute11(Enum):
    UlFrequency = 'UlFrequency'


class UlFrequencyContext(BaseModel):
    contextAttribute: Optional[ContextAttribute11] = None
    contextCondition: Optional[ContextCondition7] = None
    contextValueRange: Optional[List[Frequency]] = None


class ContextAttribute12(Enum):
    RAT = 'RAT'


class ContextValueRangeEnum(Enum):
    UTRAN = 'UTRAN'
    EUTRAN = 'EUTRAN'
    NR = 'NR'


class RATContext(BaseModel):
    contextAttribute: Optional[ContextAttribute12] = None
    contextCondition: Optional[ContextCondition7] = None
    contextValueRange: Optional[List[ContextValueRangeEnum]] = None


class ContextAttribute13(Enum):
    UEGroup = 'UEGroup'


class ContextAttribute14(Enum):
    edgeIdentificationId = 'edgeIdentificationId'


class ContextCondition14(Enum):
    IS_EQUAL_TO = 'IS_EQUAL_TO'


class EdgeIdenfiticationIdContext(BaseModel):
    contextAttribute: Optional[ContextAttribute14] = None
    contextCondition: Optional[ContextCondition14] = None
    contextValueRange: Optional[str] = None


class ContextAttribute15(Enum):
    edgeIdentificationTarget = 'edgeIdentificationTarget'


class EdgeIdentificationLocContext(BaseModel):
    contextAttribute: Optional[ContextAttribute15] = None
    contextCondition: Optional[ContextCondition14] = None
    contextValueRange: Optional[GeoCoordinate] = None


class ContextAttribute16(Enum):
    coverageAreaTA = 'coverageAreaTA'


class ContextCondition16(Enum):
    IS_ALL_OF = 'IS_ALL_OF'


class CoverageAreaTAContext(BaseModel):
    contextAttribute: Optional[ContextAttribute16] = None
    contextCondition: Optional[ContextCondition16] = None
    contextValueRange: Optional[List[Tac]] = None


class ContextAttribute17(Enum):
    NfType = 'NfType'


class NfTypeContext(BaseModel):
    contextAttribute: Optional[ContextAttribute17] = None
    contextCondition: Optional[ContextCondition16] = None
    contextValueRange: Optional[List[NFType]] = None


class ContextAttribute18(Enum):
    NfInstanceLocation = 'NfInstanceLocation'


class NfInstanceLocationContext(BaseModel):
    contextAttribute: Optional[ContextAttribute18] = None
    contextCondition: Optional[ContextCondition16] = None
    contextValueRange: Optional[List[str]] = None


class ContextAttribute19(Enum):
    Tai = 'Tai'


class ContextAttribute20(Enum):
    ServingScope = 'ServingScope'


class ServingScopeContext(BaseModel):
    contextAttribute: Optional[ContextAttribute20] = None
    contextCondition: Optional[ContextCondition16] = None
    contextValueRange: Optional[List[str]] = None


class ContextAttribute21(Enum):
    Dnn = 'Dnn'


class DnnContext(BaseModel):
    contextAttribute: Optional[ContextAttribute21] = None
    contextCondition: Optional[ContextCondition16] = None
    contextValueRange: Optional[List[str]] = None


class ContextAttribute22(Enum):
    TargetAssuranceTime = 'TargetAssuranceTime'


class ContextCondition22(Enum):
    IS_EQUAL_TO = 'IS_EQUAL_TO'


class TargetAssuranceTimeContext(BaseModel):
    contextAttribute: Optional[ContextAttribute22] = None
    contextCondition: Optional[ContextCondition22] = None
    contextValueRange: Optional[TimeWindow] = None


class ContextAttribute23(Enum):
    ServiceStartTime = 'ServiceStartTime'


class ServiceStartTimeContext(BaseModel):
    contextAttribute: Optional[ContextAttribute23] = None
    contextCondition: Optional[ContextCondition22] = None
    contextValueRange: Optional[DateTime] = None


class ContextAttribute24(Enum):
    ServiceEndTime = 'ServiceEndTime'


class ServiceEndTimeContext(BaseModel):
    contextAttribute: Optional[ContextAttribute24] = None
    contextCondition: Optional[ContextCondition22] = None
    contextValueRange: Optional[DateTime] = None


class ContextAttribute25(Enum):
    UEMobilityLevel = 'UEMobilityLevel'


class UEMobilityLevelContext(BaseModel):
    contextAttribute: Optional[ContextAttribute25] = None
    contextCondition: Optional[ContextCondition22] = None
    contextValueRange: Optional[MobilityLevel] = None


class ContextAttribute26(Enum):
    ResourceSharingLevel = 'ResourceSharingLevel'


class ResourceSharingLevelContext(BaseModel):
    contextAttribute: Optional[ContextAttribute26] = None
    contextCondition: Optional[ContextCondition22] = None
    contextValueRange: Optional[SharingLevel] = None


class ContextAttribute27(Enum):
    ServiceType = 'ServiceType'


class ServiceTypeContext(BaseModel):
    contextAttribute: Optional[ContextAttribute27] = None
    contextCondition: Optional[ContextCondition22] = None
    contextValueRange: Optional[Sst] = None


class ContextAttribute28(Enum):
    StartTime = 'StartTime'


class StartTimeContext(BaseModel):
    contextAttribute: Optional[ContextAttribute28] = None
    contextCondition: Optional[ContextCondition22] = None
    contextValueRange: Optional[DateTime] = None


class CancelScProcess(Enum):
    True_ = True
    False_ = False


class NEType(BaseModel):
    __root__: int = Field(..., description='It defines the type of RAN NE')


class GnbId1(BaseModel):
    __root__: conint(ge=0, le=4294967295) = Field(
        ..., description='It is the identity of gNB'
    )


class EnbId(BaseModel):
    __root__: str = Field(..., description='It is the identity of ng-eNB')


class NEIdentification(BaseModel):
    __root__: Union[EnbId, GnbId1]


class NEInfomration(BaseModel):
    __root__: Union[NEType, NEIdentification] = Field(
        ...,
        description='It defines the NE Type or the NE instance for which this ScMgmtProfile instance is valid.',
    )


class Status3(Enum):
    NOT_STARTED = 'NOT_STARTED'
    RUNNING = 'RUNNING'
    FINSHED = 'FINSHED'
    FAILED = 'FAILED'
    CANCELLING = 'CANCELLING'
    CANCELLED = 'CANCELLED'


class ProgressStateInfo1(Enum):
    NE_HEALTH_CHECK = 'NE_HEALTH_CHECK'
    SW_DOWNLOAD = 'SW_DOWNLOAD'
    SW_INSTALLATION = 'SW_INSTALLATION'
    SW_ACTIVATION = 'SW_ACTIVATION'
    PREPARE_BASIC_CONFIGURATION_AND_OAMLINK = 'PREPARE_BASIC_CONFIGURATION_AND_OAMLINK'
    RETRIEVE_CONFIGURATION_DATA = 'RETRIEVE_CONFIGURATION_DATA'
    SETUP_PRECONFIGURED_SIGNALLING_LINKS = 'SETUP_PRECONFIGURED_SIGNALLING_LINKS'
    TSET_FINAL_STATE_OF_NE = 'TSET_FINAL_STATE_OF_NE'


class ResultStateInfo1(Enum):
    UNKNOWN = 'UNKNOWN'
    INCORRECT_CONFIGURATION = 'INCORRECT_CONFIGURATION'
    NE_HARDWARE_ERROR_DELECTED = 'NE_HARDWARE_ERROR_DELECTED'
    DISCONNECTION_BETWEEN_NE_AND_OAM = 'DISCONNECTION_BETWEEN_NE_AND_OAM'
    OTHER = 'OTHER'


class ScProcessMonitor(BaseModel):
    jobId: Optional[str] = None
    status: Optional[Status3] = None
    progressPercentage: Optional[conint(ge=0, le=100)] = None
    progressStateInfo: Optional[ProgressStateInfo1] = None
    resultStateInfo: Optional[Union[ResultStateInfo1, str]] = None
    startTime: Optional[DateTime] = None
    endTime: Optional[DateTime] = None


class ControlLoopLifeCyclePhase(Enum):
    PREPARATION = 'PREPARATION'
    COMMISSIONING = 'COMMISSIONING'
    OPERATION = 'OPERATION'
    DECOMMISSIONING = 'DECOMMISSIONING'


class ObservationTime(BaseModel):
    __root__: int


class AssuranceGoalStatusObserved(Enum):
    FULFILLED = 'FULFILLED'
    NOT_FULFILLED = 'NOT_FULFILLED'


class AssuranceGoalStatusPredicted(Enum):
    FULFILLED = 'FULFILLED'
    NOT_FULFILLED = 'NOT_FULFILLED'


class AssuranceTargetStatusObserved(Enum):
    FULFILLED = 'FULFILLED'
    NOT_FULFILLED = 'NOT_FULFILLED'


class AssuranceTargetStatusPredicted(Enum):
    FULFILLED = 'FULFILLED'
    NOT_FULFILLED = 'NOT_FULFILLED'


class AssuranceTargetName(BaseModel):
    __root__: str


class AssuranceTarget(BaseModel):
    assuranceTargetName: Optional[AssuranceTargetName] = None
    assuranceTargetValue: Optional[str] = None


class AssuranceTargetList(BaseModel):
    __root__: List[AssuranceTarget]


class AssuranceGoalStatus(BaseModel):
    assuranceGoalStatusId: Optional[str] = None
    assuranceGoalId: Optional[Dn] = None
    assuranceGoalStatusObserved: Optional[AssuranceGoalStatusObserved] = None
    assuranceGoalStatusPredicted: Optional[AssuranceGoalStatusPredicted] = None
    assuranceGoalRef: Optional[Dn] = None


class AssuranceGoalStatusList(BaseModel):
    __root__: List[AssuranceGoalStatus]


class AssuranceTargetStatus(BaseModel):
    assuranceTargetStatusId: Optional[str] = None
    assuranceTargetName: Optional[AssuranceTargetName] = None
    assuranceTargetStatusObserved: Optional[AssuranceTargetStatusObserved] = None
    assuranceTargetStatusPredicted: Optional[AssuranceTargetStatusPredicted] = None


class AssuranceTargetStatusList(BaseModel):
    __root__: List[AssuranceTargetStatus]


class AttributeNameList(BaseModel):
    __root__: List[str]


class ACCLDisallowedAttributes(BaseModel):
    managedEntityIdentifier: Optional[Dn] = None
    attributeNameList: Optional[AttributeNameList] = None


class Attributes189(BaseModel):
    operationalState: Optional[OperationalState] = None
    administrativeState: Optional[AdministrativeState] = None
    controlLoopLifeCyclePhase: Optional[ControlLoopLifeCyclePhase] = None
    aCCLDisallowedList: Optional[ACCLDisallowedAttributes] = None


class Attributes191(BaseModel):
    assuranceGoalStatusList: Optional[AssuranceGoalStatusList] = None


class IpAddress(BaseModel):
    __root__: Union[Ipv4Addr, Ipv6Addr]


class LogicalInterfaceType(Enum):
    VLAN = 'VLAN'
    MPLS = 'MPLS'
    SEGMENT = 'SEGMENT'


class RoutingProtocol(Enum):
    RIP = 'RIP'
    IGMP = 'IGMP'
    OSPF = 'OSPF'
    EGP = 'EGP'
    EIGRP = 'EIGRP'
    BGP = 'BGP'
    IS_IS = 'IS_IS'
    STATIC = 'STATIC'


class LogicalInterfaceInfo(BaseModel):
    logicalInterfaceType: Optional[LogicalInterfaceType] = None
    logicalInterfaceId: Optional[str] = None
    systemName: Optional[str] = None
    portName: Optional[str] = None
    routingProtocol: Optional[RoutingProtocol] = None


class ConnectionPointIdType(Enum):
    VLAN = 'VLAN'
    MPLS = 'MPLS'
    SEGMENT = 'SEGMENT'
    IPV4 = 'IPV4'
    IPV6 = 'IPV6'
    ATTACHMENT_CIRCUIT = 'ATTACHMENT_CIRCUIT'


class ConnectionPointInfo(BaseModel):
    connectionPointId: Optional[str] = None
    connectionPointIdType: Optional[ConnectionPointIdType] = None


class FeasibilityResult(Enum):
    FEASIBLE = 'FEASIBLE'
    INFEASIBLE = 'INFEASIBLE'


class InFeasibleReason(BaseModel):
    __root__: str = Field(
        ...,
        description='An attribute that specifies the additional reason information if the feasibility check result is infeasible.The detailed ENUM value is FFS. ',
    )


class RecommendationRequest(BaseModel):
    __root__: bool = Field(
        ...,
        description="An attribute represents MnS consumer's request for recommended network slice related requirements.",
    )


class RecommendedRequirements(BaseModel):
    __root__: str = Field(
        ...,
        description='An attribute that specifies the recommended network slicing related requirements (i.e. ServiceProfile and SliceProfile information) which can be supported by the MnS producer.. ',
    )


class ResourceReservation(BaseModel):
    __root__: bool = Field(
        ...,
        description="An attribute represents MnS consumer's requirements for resource reservation.",
    )


class RequestedReservationExpiration(BaseModel):
    __root__: str = Field(
        ...,
        description="An attribute which specifies MnS consuner's requirements for the validity period of the resource reservation.",
    )


class ResourceReservationStatus1(Enum):
    RESERVED = 'RESERVED'
    UNRESERVED = 'UNRESERVED'
    USED = 'USED'


class ReservationExpiration(BaseModel):
    __root__: str = Field(
        ...,
        description='An attribute which specifies the actual validity period of the resource reservation..',
    )


class ReservationFailureReason(BaseModel):
    __root__: str = Field(
        ...,
        description='An attribute that specifies the additional reason information if the reservation is failed. ',
    )


class ResourceType2(Enum):
    MANAGED_FUNCTION = 'MANAGED_FUNCTION'
    NETWORK_SERVICE = 'NETWORK_SERVICE'


class IsolationRule(Enum):
    DEDICATED = 'DEDICATED'
    SHARED = 'SHARED'


class ResourceIsolationRule(BaseModel):
    resourceType: Optional[ResourceType2] = None
    isolationRule: Optional[IsolationRule] = None


class NetworkSlicingApplicability(Enum):
    NETWORKSLICE = 'NETWORKSLICE'
    NETWORKSLICESUBNET = 'NETWORKSLICESUBNET'


class NetworkSliceSubnetType(Enum):
    TOP_SLICESUBNET = 'TOP_SLICESUBNET'
    RAN_SLICESUBNET = 'RAN_SLICESUBNET'
    CN_SLICESUBNET = 'CN_SLICESUBNET'


class Attributes194(BaseModel):
    ipAddress: Optional[IpAddress] = None
    localLogicalInterfaceInfo: Optional[LogicalInterfaceInfo] = None
    qosProfile: Optional[str] = None
    epApplicationRefs: Optional[DnList] = None
    connectionPointRefList: Optional[List[ConnectionPointInfo]] = None


class Attributes199(BaseModel):
    networkSlicingApplicability: Optional[NetworkSlicingApplicability] = None
    resourceIsolationRuleList: Optional[List[ResourceIsolationRule]] = None
    networkSliceRefList: Optional[DnList] = None
    networkSliceSubnetRefList: Optional[DnList] = None


class Scope1(BaseModel):
    scopeType: Optional[ScopeType] = None
    scopeLevel: Optional[int] = None


class CorrelatedNotification1(BaseModel):
    source: Dn
    notificationIds: List[NotificationId]


class MoiChange(BaseModel):
    notificationId: NotificationId
    correlatedNotifications: Optional[List[CorrelatedNotification1]] = None
    additionalText: Optional[str] = None
    sourceIndicator: Optional[SourceIndicator] = None
    op: Operation
    path: Uri
    insert: Optional[Insert] = None
    value: Optional[Any] = None
    oldValue: Optional[Any] = None


class PatchItem1(BaseModel):
    op: PatchOperation
    from_: Optional[str] = Field(None, alias='from')
    path: str
    value: Optional[Any] = None


class PerfNotificationTypes(Enum):
    notifyThresholdCrossing = 'notifyThresholdCrossing'


class PerfMetricValue(BaseModel):
    __root__: Union[int, Float]


class PerfMetricDirection(Enum):
    UP = 'UP'
    DOWN = 'DOWN'


class HeartbeatNotificationTypes(Enum):
    notifyHeartbeat = 'notifyHeartbeat'


class FileNotificationTypes(Enum):
    notifyFileReady = 'notifyFileReady'
    notifyFilePreparationError = 'notifyFilePreparationError'


class FileDataType1(Enum):
    Performance = 'Performance'
    Trace = 'Trace'
    Analytics = 'Analytics'
    Proprietary = 'Proprietary'


class FileInfo(BaseModel):
    fileLocation: Optional[Uri] = None
    fileSize: Optional[int] = None
    fileReadyTime: Optional[DateTime] = None
    fileExpirationTime: Optional[DateTime] = None
    fileCompression: Optional[str] = None
    fileFormat: Optional[str] = None
    fileDataType: Optional[FileDataType1] = None


class TaiModel(BaseModel):
    mcc: Optional[Mcc] = None
    mnc: Optional[Mnc] = None
    tac: Optional[Tac] = None


class AreaOfInterest(BaseModel):
    __root__: Union[
        GeoAreaToCellMapping,
        List[TaiModel],
        List[NrCellId],
        List[EutraCellId],
        List[UtraCellId],
    ]


class NotificationType(BaseModel):
    __root__: Union[
        AlarmNotificationTypes,
        CmNotificationTypes,
        PerfNotificationTypes,
        HeartbeatNotificationTypes,
        FileNotificationTypes,
    ]


class NotificationHeader(BaseModel):
    href: Uri
    notificationId: NotificationId
    notificationType: NotificationType
    eventTime: DateTime
    systemDN: SystemDN


class NotifyNewSecAlarm(NotificationHeader):
    alarmId: AlarmId
    alarmType: AlarmType
    probableCause: ProbableCause
    perceivedSeverity: PerceivedSeverity
    correlatedNotifications: Optional[CorrelatedNotifications] = None
    additionalText: Optional[str] = None
    additionalInformation: Optional[AttributeNameValuePairSet] = None
    rootCauseIndicator: Optional[bool] = None
    serviceUser: str
    serviceProvider: str
    securityAlarmDetector: str


class NotifyClearedAlarm(NotificationHeader):
    alarmId: AlarmId
    alarmType: AlarmType
    probableCause: ProbableCause
    perceivedSeverity: PerceivedSeverity
    correlatedNotifications: Optional[CorrelatedNotifications] = None
    clearUserId: Optional[str] = None
    clearSystemId: Optional[str] = None


class NotifyChangedAlarm(NotificationHeader):
    alarmId: AlarmId
    alarmType: AlarmType
    probableCause: ProbableCause
    perceivedSeverity: PerceivedSeverity


class NotifyChangedAlarmGeneral(NotificationHeader):
    alarmId: AlarmId
    alarmType: AlarmType
    probableCause: ProbableCause
    specificProblem: Optional[SpecificProblem] = None
    perceivedSeverity: Optional[PerceivedSeverity] = None
    correlatedNotifications: Optional[CorrelatedNotifications] = None
    backedUpStatus: Optional[bool] = None
    backUpObject: Optional[Dn] = None
    trendIndication: Optional[TrendIndication] = None
    thresholdInfo: Optional[ThresholdInfo] = None
    stateChangeDefinition: Optional[AttributeValueChangeSet] = None
    monitoredAttributes: Optional[AttributeNameValuePairSet] = None
    proposedRepairActions: Optional[str] = None
    additionalText: Optional[str] = None
    additionalInformation: Optional[AttributeNameValuePairSet] = None
    rootCauseIndicator: Optional[bool] = None
    changedAlarmAttributes: Optional[AttributeNameValuePairSet] = None


class NotifyChangedSecAlarmGeneral(NotificationHeader):
    alarmId: AlarmId
    alarmType: AlarmType
    probableCause: ProbableCause
    perceivedSeverity: Optional[PerceivedSeverity] = None
    correlatedNotifications: Optional[CorrelatedNotifications] = None
    additionalText: Optional[str] = None
    additionalInformation: Optional[AttributeNameValuePairSet] = None
    rootCauseIndicator: Optional[bool] = None
    serviceUser: str
    serviceProvider: str
    securityAlarmDetector: str
    changedAlarmAttributes: Optional[AttributeNameValuePairSet] = None


class NotifyCorrelatedNotificationChanged(NotificationHeader):
    alarmId: AlarmId
    correlatedNotifications: CorrelatedNotifications
    rootCauseIndicator: Optional[bool] = None


class NotifyAckStateChanged(NotificationHeader):
    alarmId: AlarmId
    alarmType: AlarmType
    probableCause: ProbableCause
    perceivedSeverity: PerceivedSeverity
    ackState: AckState
    ackUserId: str
    ackSystemId: Optional[str] = None


class NotifyComments(NotificationHeader):
    alarmId: AlarmId
    alarmType: AlarmType
    probableCause: ProbableCause
    perceivedSeverity: PerceivedSeverity
    comments: Comments


class NotifyPotentialFaultyAlarmList(NotificationHeader):
    reason: str


class NotifyAlarmListRebuilt(NotificationHeader):
    reason: str
    alarmListAlignmentRequirement: Optional[AlarmListAlignmentRequirement] = None


class Operation1(BaseModel):
    name: Optional[str] = None
    allowedNFTypes: Optional[NFType] = None
    operationSemantics: Optional[OperationSemantics] = None


class AreaScope(BaseModel):
    __root__: Union[
        List[EutraCellId], List[NrCellId], List[Tac], List[TaiModel], List[NpnIdType]
    ]


class NodeFilter(BaseModel):
    areaOfInterest: Optional[AreaOfInterest] = None
    networkDomain: Optional[NetworkDomain] = None
    cpUpType: Optional[CpUpType] = None
    sst: Optional[int] = None


class AreaScopeModel(BaseModel):
    __root__: Union[
        List[EutraCellId], List[NrCellId], List[Tac], List[Tai], List[NpnIdType]
    ]


class AreaConfig(BaseModel):
    freqInfo: Optional[FreqInfo] = None
    pciList: Optional[List[int]] = None


class Attributes1(BaseModel):
    userLabel: Optional[str] = None
    nFServiceType: Optional[NFServiceType] = None
    sAP: Optional[SAP] = None
    operations: Optional[List[Operation1]] = None
    administrativeState: Optional[AdministrativeState] = None
    operationalState: Optional[OperationalState] = None
    usageState: Optional[UsageState] = None
    registrationState: Optional[RegistrationState] = None


class Attributes7(BaseModel):
    notificationRecipientAddress: Optional[Uri] = None
    notificationTypes: Optional[List[NotificationType]] = None
    scope: Optional[Scope] = None
    notificationFilter: Optional[Filter] = None


class Attributes9(BaseModel):
    managementData: Optional[ManagementData] = None
    targetNodeFilter: Optional[NodeFilter] = None
    collectionTimeWindow: Optional[TimeWindow] = None
    reportingCtrl: Optional[ReportingCtrl] = None
    dataScope: Optional[DataScope] = None


class Attributes16(BaseModel):
    notificationTypes: Optional[List[NotificationType]] = None
    notificationProtocols: Optional[List[NotificationProtocol]] = None


class Snssai(BaseModel):
    sst: Optional[Sst] = None
    sd: Optional[constr(regex=r'^[A-Fa-f0-9]{6}$')] = None


class PlmnInfo(BaseModel):
    plmnId: Optional[PlmnId] = None
    snssai: Optional[Snssai] = None


class PlmnInfoList(BaseModel):
    __root__: List[PlmnInfo]


class BackhaulAddress(BaseModel):
    gnbId: Optional[GnbId] = None
    tai: Optional[TaiModel] = None


class MappingSetIDBackhaulAddress(BaseModel):
    setID: Optional[int] = None
    backhaulAddress: Optional[BackhaulAddress] = None


class RrmPolicyMember(BaseModel):
    plmnId: Optional[PlmnId] = None
    snssai: Optional[Snssai] = None


class RrmPolicyMemberList(BaseModel):
    __root__: List[RrmPolicyMember]


class Ephemeris1(BaseModel):
    satelliteId: constr(regex=r'^[0-9]{5}$')
    epochTime: DateTime
    positionVelocity: PositionVelocity
    orbital: Optional[Orbital] = None


class Ephemeris2(BaseModel):
    satelliteId: constr(regex=r'^[0-9]{5}$')
    epochTime: DateTime
    positionVelocity: Optional[PositionVelocity] = None
    orbital: Orbital


class Ephemeris(BaseModel):
    __root__: Union[Ephemeris1, Ephemeris2]


class EphemerisInfos(BaseModel):
    __root__: List[Ephemeris]


class AmfIdentifier(BaseModel):
    amfRegionId: Optional[AmfRegionId] = None
    amfSetId: Optional[AmfSetId] = None
    amfPointer: Optional[AmfPointer] = None


class NFService(BaseModel):
    serviceInstanceId: Optional[str] = None
    serviceName: Optional[str] = None
    version: Optional[str] = None
    schema_: Optional[str] = Field(None, alias='schema')
    fqdn: Optional[Fqdn] = None
    interPlmnFqdn: Optional[Fqdn] = None
    ipEndPoints: Optional[List[IpEndPoint]] = None
    apiPrfix: Optional[str] = None
    allowedPlmns: Optional[PlmnId] = None
    allowedNfTypes: Optional[List[NFType]] = None
    allowedNssais: Optional[List[Snssai]] = None


class CNSIIdList(BaseModel):
    __root__: List[CNSIId]


class AusfInfo(BaseModel):
    nFSrvGroupId: Optional[str] = None
    supiRanges: Optional[List[SupiRange]] = Field(None, min_items=1)
    routingIndicators: Optional[List[RoutingIndicator]] = Field(None, min_items=1)
    suciInfos: Optional[List[SuciInfo]] = Field(None, min_items=1)


class NetworkSliceInfo(BaseModel):
    sNSSAI: Optional[Snssai] = None
    cNSIId: Optional[CNSIId] = None
    networkSliceRef: Optional[DnList] = None


class NetworkSliceInfoList(BaseModel):
    __root__: List[NetworkSliceInfo]


class QosDataModel(BaseModel):
    qosId: Optional[str] = None
    fiveQIValue: Optional[int] = None
    maxbrUl: Optional[BitRateRm] = None
    maxbrDl: Optional[BitRateRm] = None
    gbrUl: Optional[BitRateRm] = None
    gbrDl: Optional[BitRateRm] = None
    arp: Optional[Arp] = None
    qosNotificationControl: Optional[bool] = None
    reflectiveQos: Optional[bool] = None
    sharingKeyDl: Optional[str] = None
    sharingKeyUl: Optional[str] = None
    maxPacketLossRateDl: Optional[PacketLossRateRm] = None
    maxPacketLossRateUl: Optional[PacketLossRateRm] = None
    extMaxDataBurstVol: Optional[ExtMaxDataBurstVolRm] = None


class FqdnRm(BaseModel):
    __root__: Union[Fqdn1, NullValue] = Field(
        ...,
        description='Fully Qualified Domain Name, but it also allows the null value',
    )


class ProblemDetails(BaseModel):
    type: Optional[Uri] = None
    title: Optional[str] = None
    status: Optional[int] = None
    detail: Optional[str] = None
    instance: Optional[Uri] = None
    cause: Optional[str] = None
    invalidParams: Optional[List[InvalidParam]] = Field(None, min_items=1)
    supportedFeatures: Optional[SupportedFeatures] = None
    nrfId: Optional[str] = None


class CnfUnit(BaseModel):
    cnfUnit: List[Atom] = Field()
    @validator('cnfUnit')
    def validate_min_items_cnfUnit(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value


class DnfUnit(BaseModel):
    dnfUnit: List[Atom] = Field()
    @validator('dnfUnit')
    def validate_min_items_dnfUnit(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value


class PatchResult(BaseModel):
    report: List[ReportItem] = Field()
    @validator('report')
    def validate_min_items_report(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value


class HalTemplate(BaseModel):
    title: Optional[str] = None
    method: HttpMethod
    contentType: Optional[str] = None
    properties: Optional[List[Property]] = Field(None, min_items=1)


class Guami(BaseModel):
    plmnId: PlmnIdNid
    amfId: AmfId


class GuamiRm(BaseModel):
    __root__: Union[Guami, NullValue]


class NetworkId(BaseModel):
    mnc: Optional[MncModel] = None
    mcc: Optional[MccModel] = None


class N3gaLocation(BaseModel):
    n3gppTai: Optional[Tai1] = None
    n3IwfId: Optional[constr(regex=r'^[A-Fa-f0-9]+$')] = None
    ueIpv4Addr: Optional[Ipv4Addr] = None
    ueIpv6Addr: Optional[Ipv6Addr] = None
    portNumber: Optional[Uinteger] = None
    tnapId: Optional[TnapId] = None
    protocol: Optional[TransportProtocol2] = None
    twapId: Optional[TwapId] = None
    hfcNodeId: Optional[HfcNodeId] = None
    gli: Optional[Gli] = None
    w5gbanLineType: Optional[LineType] = None
    gci: Optional[Gci] = None


class BackupAmfInfo(BaseModel):
    backupAmf: AmfName
    guamiList: Optional[List[Guami]] = Field(None, min_items=1)


class RouteToLocation1(BaseModel):
    dnai: Dnai
    routeInfo: RouteInformation
    routeProfId: Optional[str] = None


class RouteToLocation2(BaseModel):
    dnai: Dnai
    routeInfo: Optional[RouteInformation] = None
    routeProfId: str


class RouteToLocation(BaseModel):
    __root__: Optional[Union[RouteToLocation1, RouteToLocation2]] = None


class SubscribedDefaultQos(BaseModel):
    field_5qi: Field5Qi = Field(..., alias='5qi')
    arp: Arp
    priorityLevel: Optional[Field5QiPriorityLevel] = None


class GlobalRanNodeId1(BaseModel):
    plmnId: PlmnId1
    n3IwfId: N3IwfId
    gNbId: Optional[GNbId] = None
    ngeNbId: Optional[NgeNbId] = None
    wagfId: Optional[WAgfId] = None
    tngfId: Optional[TngfId] = None
    nid: Optional[Nid2] = None
    eNbId: Optional[ENbId] = None


class GlobalRanNodeId2(BaseModel):
    plmnId: PlmnId1
    n3IwfId: Optional[N3IwfId] = None
    gNbId: GNbId
    ngeNbId: Optional[NgeNbId] = None
    wagfId: Optional[WAgfId] = None
    tngfId: Optional[TngfId] = None
    nid: Optional[Nid2] = None
    eNbId: Optional[ENbId] = None


class GlobalRanNodeId3(BaseModel):
    plmnId: PlmnId1
    n3IwfId: Optional[N3IwfId] = None
    gNbId: Optional[GNbId] = None
    ngeNbId: NgeNbId
    wagfId: Optional[WAgfId] = None
    tngfId: Optional[TngfId] = None
    nid: Optional[Nid2] = None
    eNbId: Optional[ENbId] = None


class GlobalRanNodeId4(BaseModel):
    plmnId: PlmnId1
    n3IwfId: Optional[N3IwfId] = None
    gNbId: Optional[GNbId] = None
    ngeNbId: Optional[NgeNbId] = None
    wagfId: WAgfId
    tngfId: Optional[TngfId] = None
    nid: Optional[Nid2] = None
    eNbId: Optional[ENbId] = None


class GlobalRanNodeId5(BaseModel):
    plmnId: PlmnId1
    n3IwfId: Optional[N3IwfId] = None
    gNbId: Optional[GNbId] = None
    ngeNbId: Optional[NgeNbId] = None
    wagfId: Optional[WAgfId] = None
    tngfId: TngfId
    nid: Optional[Nid2] = None
    eNbId: Optional[ENbId] = None


class GlobalRanNodeId6(BaseModel):
    plmnId: PlmnId1
    n3IwfId: Optional[N3IwfId] = None
    gNbId: Optional[GNbId] = None
    ngeNbId: Optional[NgeNbId] = None
    wagfId: Optional[WAgfId] = None
    tngfId: Optional[TngfId] = None
    nid: Optional[Nid2] = None
    eNbId: ENbId


class GlobalRanNodeId(BaseModel):
    __root__: Union[
        GlobalRanNodeId1,
        GlobalRanNodeId2,
        GlobalRanNodeId3,
        GlobalRanNodeId4,
        GlobalRanNodeId5,
        GlobalRanNodeId6,
    ]


class Pc5FlowBitRates(BaseModel):
    guaFbr: Optional[BitRate] = None
    maxFbr: Optional[BitRate] = None


class UtraLocation1(BaseModel):
    cgi: CellGlobalId
    sai: Optional[ServiceAreaId] = None
    lai: Optional[LocationAreaId] = None
    rai: Optional[RoutingAreaId] = None
    ageOfLocationInformation: Optional[conint(ge=0, le=32767)] = None
    ueLocationTimestamp: Optional[DateTime] = None
    geographicalInformation: Optional[constr(regex=r'^[0-9A-F]{16}$')] = None
    geodeticInformation: Optional[constr(regex=r'^[0-9A-F]{20}$')] = None


class UtraLocation2(BaseModel):
    cgi: Optional[CellGlobalId] = None
    sai: ServiceAreaId
    lai: Optional[LocationAreaId] = None
    rai: Optional[RoutingAreaId] = None
    ageOfLocationInformation: Optional[conint(ge=0, le=32767)] = None
    ueLocationTimestamp: Optional[DateTime] = None
    geographicalInformation: Optional[constr(regex=r'^[0-9A-F]{16}$')] = None
    geodeticInformation: Optional[constr(regex=r'^[0-9A-F]{20}$')] = None


class UtraLocation3(BaseModel):
    cgi: Optional[CellGlobalId] = None
    sai: Optional[ServiceAreaId] = None
    lai: Optional[LocationAreaId] = None
    rai: RoutingAreaId
    ageOfLocationInformation: Optional[conint(ge=0, le=32767)] = None
    ueLocationTimestamp: Optional[DateTime] = None
    geographicalInformation: Optional[constr(regex=r'^[0-9A-F]{16}$')] = None
    geodeticInformation: Optional[constr(regex=r'^[0-9A-F]{20}$')] = None


class UtraLocation(BaseModel):
    __root__: Union[UtraLocation1, UtraLocation2, UtraLocation3]


class GeraLocation1(BaseModel):
    locationNumber: Optional[str] = None
    cgi: CellGlobalId
    rai: Optional[RoutingAreaId] = None
    sai: Optional[ServiceAreaId] = None
    lai: Optional[LocationAreaId] = None
    vlrNumber: Optional[str] = None
    mscNumber: Optional[str] = None
    ageOfLocationInformation: Optional[conint(ge=0, le=32767)] = None
    ueLocationTimestamp: Optional[DateTime] = None
    geographicalInformation: Optional[constr(regex=r'^[0-9A-F]{16}$')] = None
    geodeticInformation: Optional[constr(regex=r'^[0-9A-F]{20}$')] = None


class GeraLocation2(BaseModel):
    locationNumber: Optional[str] = None
    cgi: Optional[CellGlobalId] = None
    rai: Optional[RoutingAreaId] = None
    sai: ServiceAreaId
    lai: Optional[LocationAreaId] = None
    vlrNumber: Optional[str] = None
    mscNumber: Optional[str] = None
    ageOfLocationInformation: Optional[conint(ge=0, le=32767)] = None
    ueLocationTimestamp: Optional[DateTime] = None
    geographicalInformation: Optional[constr(regex=r'^[0-9A-F]{16}$')] = None
    geodeticInformation: Optional[constr(regex=r'^[0-9A-F]{20}$')] = None


class GeraLocation3(BaseModel):
    locationNumber: Optional[str] = None
    cgi: Optional[CellGlobalId] = None
    rai: RoutingAreaId
    sai: Optional[ServiceAreaId] = None
    lai: Optional[LocationAreaId] = None
    vlrNumber: Optional[str] = None
    mscNumber: Optional[str] = None
    ageOfLocationInformation: Optional[conint(ge=0, le=32767)] = None
    ueLocationTimestamp: Optional[DateTime] = None
    geographicalInformation: Optional[constr(regex=r'^[0-9A-F]{16}$')] = None
    geodeticInformation: Optional[constr(regex=r'^[0-9A-F]{20}$')] = None


class GeraLocation4(BaseModel):
    locationNumber: Optional[str] = None
    cgi: Optional[CellGlobalId] = None
    rai: Optional[RoutingAreaId] = None
    sai: Optional[ServiceAreaId] = None
    lai: LocationAreaId
    vlrNumber: Optional[str] = None
    mscNumber: Optional[str] = None
    ageOfLocationInformation: Optional[conint(ge=0, le=32767)] = None
    ueLocationTimestamp: Optional[DateTime] = None
    geographicalInformation: Optional[constr(regex=r'^[0-9A-F]{16}$')] = None
    geodeticInformation: Optional[constr(regex=r'^[0-9A-F]{20}$')] = None


class GeraLocation(BaseModel):
    __root__: Union[GeraLocation1, GeraLocation2, GeraLocation3, GeraLocation4]


class SnssaiExtension(BaseModel):
    sdRanges: Optional[List[SdRange]] = Field(
        None,
        description='When present, it shall contain the range(s) of Slice Differentiator values supported for the Slice/Service Type value indicated in the sst attribute of the Snssai data type',
        min_items=1,
    )
    wildcardSd: Optional[WildcardSd] = Field(
        None,
        description='When present, it shall be set to true, to indicate that all SD values are supported for the Slice/Service Type value indicated in the sst attribute of the Snssai data type',
    )


class ExtSnssai(Snssai1, SnssaiExtension):
    pass


class AreaScopeModel1(BaseModel):
    eutraCellIdList: Optional[List[EutraCellId]] = Field(None, min_items=1)
    nrCellIdList: Optional[List[NrCellId]] = Field(None, min_items=1)
    tacList: Optional[List[Tac]] = Field(None, min_items=1)
    tacInfoPerPlmn: Optional[Dict[str, TacInfo]] = None


class SecondaryRatUsageReport(BaseModel):
    secondaryRatType: RatType
    qosFlowsUsageData: List[QosFlowUsageReport] = Field()
    @validator('qosFlowsUsageData')
    def validate_min_items_qosFlowsUsageData(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value


class SecondaryRatUsageInfo(BaseModel):
    secondaryRatType: RatType
    qosFlowsUsageData: Optional[List[QosFlowUsageReport]] = Field(None, min_items=1)
    pduSessionUsageData: Optional[List[VolumeTimedReport]] = Field(None, min_items=1)


class QosDataList(BaseModel):
    __root__: List[QosDataModel]


class SteeringModeModel(BaseModel):
    steerModeValue: Optional[SteerModeValue] = None
    active: Optional[AccessType] = None
    standby: Optional[AccessTypeRm] = None
    threeGLoad: Optional[Uinteger] = None
    prioAcc: Optional[AccessType] = None


class SessionRule(BaseModel):
    authSessAmbr: Optional[Ambr] = None
    authDefQos: Optional[AuthorizedDefaultQos] = None
    sessRuleId: str = Field(
        ..., description='Univocally identifies the session rule within a PDU session.'
    )
    refUmData: Optional[str] = Field(
        None,
        description='A reference to UsageMonitoringData policy decision type. It is the umId described in subclause 5.6.2.12.',
    )
    refUmN3gData: Optional[str] = Field(
        None,
        description='A reference to UsageMonitoringData policy decision type to apply for Non-3GPP access. It is the umId described in subclause 5.6.2.12.',
    )
    refCondData: Optional[str] = Field(
        None,
        description='A reference to the condition data. It is the condId described in subclause 5.6.2.9.',
    )


class ChargingData(BaseModel):
    chgId: str = Field(
        ...,
        description='Univocally identifies the charging control policy data within a PDU session.',
    )
    meteringMethod: Optional[MeteringMethod] = None
    offline: Optional[bool] = Field(
        None,
        description='Indicates the offline charging is applicable to the PCC rule when it is included and set to true.',
    )
    online: Optional[bool] = Field(
        None,
        description='Indicates the online charging is applicable to the PCC rule when it is included and set to true.',
    )
    sdfHandl: Optional[bool] = Field(
        None,
        description='Indicates whether the service data flow is allowed to start while the SMF is waiting for the response to the credit request.',
    )
    ratingGroup: Optional[RatingGroup] = None
    reportingLevel: Optional[ReportingLevel] = None
    serviceId: Optional[ServiceId] = None
    sponsorId: Optional[str] = Field(
        None, description='Indicates the sponsor identity.'
    )
    appSvcProvId: Optional[str] = Field(
        None, description='Indicates the application service provider identity.'
    )
    afChargingIdentifier: Optional[ChargingId] = None
    afChargId: Optional[ApplicationChargingId] = None


class RedirectInformation(BaseModel):
    redirectEnabled: Optional[bool] = Field(
        None, description='Indicates the redirect is enable.'
    )
    redirectAddressType: Optional[RedirectAddressType] = None
    redirectServerAddress: Optional[str] = Field(
        None,
        description='Indicates the address of the redirect server. If "redirectAddressType" attribute indicates the IPV4_ADDR, the encoding is the same as the Ipv4Addr data type defined in 3GPP TS 29.571.If "redirectAddressType" attribute indicates the IPV6_ADDR, the encoding is the same as the Ipv6Addr data type defined in 3GPP TS 29.571.If "redirectAddressType" attribute indicates the URL or SIP_URI, the encoding is the same as the Uri data type defined in 3GPP TS 29.571.',
    )


class FlowInformation(BaseModel):
    flowDescription: Optional[FlowDescription] = None
    packFiltId: Optional[str] = Field(
        None, description='An identifier of packet filter.'
    )
    packetFilterUsage: Optional[bool] = Field(
        None, description='The packet shall be sent to the UE.'
    )
    tosTrafficClass: Optional[str] = Field(
        None,
        description='Contains the Ipv4 Type-of-Service and mask field or the Ipv6 Traffic-Class field and mask field.',
    )
    spi: Optional[str] = Field(
        None, description='the security parameter index of the IPSec packet.'
    )
    flowLabel: Optional[str] = Field(
        None, description='the Ipv6 flow label header field.'
    )
    flowDirection: Optional[FlowDirectionRm] = None


class TerminationNotification(BaseModel):
    resourceUri: Uri
    cause: SmPolicyAssociationReleaseCause


class AppDetectionInfo(BaseModel):
    appId: str = Field(
        ...,
        description='A reference to the application detection filter configured at the UPF',
    )
    instanceId: Optional[str] = Field(
        None,
        description='Identifier sent by the SMF in order to allow correlation of application Start and Stop events to the specific service data flow description, if service data flow descriptions are deducible.',
    )
    sdfDescriptions: Optional[List[FlowInformation]] = Field(
        None,
        description='Contains the detected service data flow descriptions if they are deducible.',
        min_items=1,
    )


class RequestedRuleData(BaseModel):
    refPccRuleIds: List[str] = Field(
        ...,
        description='An array of PCC rule id references to the PCC rules associated with the control data.',
        min_items=1,
    )
    reqData: List[RequestedRuleDataType] = Field(
        ...,
        description='Array of requested rule data type elements indicating what type of rule data is requested for the corresponding referenced PCC rules.',
        min_items=1,
    )


class RanNasRelCause(BaseModel):
    ngApCause: Optional[NgApCause] = None
    field_5gMmCause: Optional[Field5GMmCause] = Field(None, alias='5gMmCause')
    field_5gSmCause: Optional[Field5GSmCause] = Field(None, alias='5gSmCause')
    epsCause: Optional[EpsRanNasRelCause] = None


class PacketFilterInfo(BaseModel):
    packFiltId: Optional[str] = Field(
        None, description='An identifier of packet filter.'
    )
    packFiltCont: Optional[PacketFilterContent] = None
    tosTrafficClass: Optional[str] = Field(
        None,
        description='Contains the Ipv4 Type-of-Service and mask field or the Ipv6 Traffic-Class field and mask field.',
    )
    spi: Optional[str] = Field(
        None, description='The security parameter index of the IPSec packet.'
    )
    flowLabel: Optional[str] = Field(
        None, description='The Ipv6 flow label header field.'
    )
    flowDirection: Optional[FlowDirection] = None


class SessionRuleReport(BaseModel):
    ruleIds: List[str] = Field(
        ...,
        description='Contains the identifier of the affected session rule(s).',
        min_items=1,
    )
    ruleStatus: RuleStatus
    sessRuleFailureCode: Optional[SessionRuleFailureCode] = None
    policyDecFailureReports: Optional[List[PolicyDecisionFailureCode]] = Field(
        None,
        description='Contains the type(s) of failed policy decision and/or condition data.',
        min_items=1,
    )


class ServingNfIdentity(BaseModel):
    servNfInstId: Optional[NfInstanceId] = None
    guami: Optional[Guami] = None


class QosMonitoringData(BaseModel):
    qmId: str = Field(
        ...,
        description='Univocally identifies the QoS monitoring policy data within a PDU session.',
    )
    reqQosMonParams: List[RequestedQosMonitoringParameter] = Field(
        ...,
        description='indicates the UL packet delay, DL packet delay and/or round trip packet delay between the UE and the UPF is to be monitored when the QoS Monitoring for URLLC is enabled for the service data flow.',
        min_items=1,
    )
    repFreqs: List[ReportingFrequency] = Field()
    @validator('repFreqs')
    def validate_min_items_repFreqs(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value
    repThreshDl: Optional[int] = Field(
        None,
        description='Indicates the period of time in units of miliiseconds for DL packet delay.',
    )
    repThreshUl: Optional[int] = Field(
        None,
        description='Indicates the period of time in units of miliiseconds for UL packet delay.',
    )
    repThreshRp: Optional[int] = Field(
        None,
        description='Indicates the period of time in units of miliiseconds for round trip packet delay.',
    )
    waitTime: Optional[DurationSecRm] = None
    repPeriod: Optional[DurationSecRm] = None
    notifyUri: Optional[Uri] = None
    notifyCorreId: Optional[str] = None


class TsnBridgeInfo(BaseModel):
    bridgeId: Optional[Uint64] = None
    dsttAddr: Optional[MacAddr48] = None
    dsttPortNum: Optional[TsnPortNumber] = None
    dsttResidTime: Optional[Uinteger] = None


class PortManagementContainer(BaseModel):
    portManCont: Bytes
    portNum: TsnPortNumber


class DownlinkDataNotificationControl(BaseModel):
    notifCtrlInds: Optional[List[NotificationControlIndication]] = Field(
        None, min_items=1
    )
    typesOfNotif: Optional[List[DlDataDeliveryStatus]] = Field(None, min_items=1)


class DownlinkDataNotificationControlRm(BaseModel):
    notifCtrlInds: Optional[List[NotificationControlIndication]] = Field(
        None, min_items=1
    )
    typesOfNotif: Optional[List[DlDataDeliveryStatus]] = Field(None, min_items=1)


class AppSessionContextRespData(BaseModel):
    servAuthInfo: Optional[ServAuthInfo] = None
    ueIds: Optional[List[UeIdentityInfo]] = Field(None, min_items=1)
    suppFeat: Optional[SupportedFeatures] = None


class AfEventSubscription(BaseModel):
    event: AfEvent
    notifMethod: Optional[AfNotifMethod] = None
    repPeriod: Optional[DurationSec] = None
    waitTime: Optional[DurationSec] = None


class TerminationInfo(BaseModel):
    termCause: TerminationCause
    resUri: Uri


class Flows(BaseModel):
    contVers: Optional[List[ContentVersion]] = Field(None, min_items=1)
    fNums: Optional[List[int]] = Field(None, min_items=1)
    medCompN: int


class EthFlowDescription(BaseModel):
    destMacAddr: Optional[MacAddr48] = None
    ethType: str
    fDesc: Optional[FlowDescriptionModel] = None
    fDir: Optional[FlowDirection] = None
    sourceMacAddr: Optional[MacAddr48] = None
    vlanTags: Optional[List[str]] = Field(None, max_items=2, min_items=1)
    srcMacAddrEnd: Optional[MacAddr48] = None
    destMacAddrEnd: Optional[MacAddr48] = None


class ResourcesAllocationInfo(BaseModel):
    mcResourcStatus: Optional[MediaComponentResourcesStatus] = None
    flows: Optional[List[Flows]] = Field(None, min_items=1)
    altSerReq: Optional[str] = None


class QosNotificationControlInfoModel(BaseModel):
    notifType: QosNotifType
    flows: Optional[List[Flows]] = Field(None, min_items=1)
    altSerReq: Optional[str] = None


class AccessNetChargingIdentifier(BaseModel):
    accNetChaIdValue: ChargingId
    flows: Optional[List[Flows]] = Field(None, min_items=1)


class OutOfCreditInformation(BaseModel):
    flows: Optional[List[Flows]] = Field(None, min_items=1)


class PduSessionTsnBridge(BaseModel):
    tsnBridgeInfo: TsnBridgeInfo
    tsnBridgeManCont: Optional[BridgeManagementContainer] = None
    tsnPortManContDstt: Optional[PortManagementContainer] = None
    tsnPortManContNwtts: Optional[List[PortManagementContainer]] = Field(
        None, min_items=1
    )


class QosMonitoringReportModel(BaseModel):
    flows: Optional[List[Flows]] = Field(None, min_items=1)
    ulDelays: Optional[List[int]] = Field(None, min_items=1)
    dlDelays: Optional[List[int]] = Field(None, min_items=1)
    rtDelays: Optional[List[int]] = Field(None, min_items=1)


class TsnQosContainer(BaseModel):
    maxTscBurstSize: Optional[ExtMaxDataBurstVol] = None
    tscPackDelay: Optional[PacketDelBudget] = None
    tscPrioLevel: Optional[TscPriorityLevel] = None


class TsnQosContainerRm(BaseModel):
    maxTscBurstSize: Optional[ExtMaxDataBurstVolRm] = None
    tscPackDelay: Optional[PacketDelBudgetRm] = None
    tscPrioLevel: Optional[TscPriorityLevelRm] = None


class SnssaiInfo(BaseModel):
    plmnInfo: Optional[PlmnInfo] = None
    administrativeState: Optional[AdministrativeState] = None


class NsacfInfoSnssai(BaseModel):
    SnssaiInfo: Optional[SnssaiInfo] = None
    isSubjectToNsac: Optional[bool] = None
    maxNumberofUEs: Optional[int] = None
    eACMode: Optional[EACMode] = None
    activeEacThreshold: Optional[int] = None
    deactiveEacThreshold: Optional[int] = None
    numberofUEs: Optional[int] = None
    uEIdList: Optional[List[str]] = None
    maxNumberofPDUSessions: Optional[int] = None


class SnssaiSmfInfoItem(BaseModel):
    sNSSAI: Optional[Snssai] = None
    dnnSmfInfoList: Optional[List[DnnSmfInfoItem]] = None


class Field5GCNfConnEcmInfoList(BaseModel):
    __root__: List[Field5GCNfConnEcmInfo]


class SnssaiList(BaseModel):
    __root__: List[Snssai]


class SnpnInfo(BaseModel):
    snpnId: Optional[SnpnId] = None
    snssai: Optional[Snssai] = None


class TaiList(BaseModel):
    __root__: List[TaiModel]


class NsacfInfo(BaseModel):
    nsacfCapability: NsacfCapability
    taiList: Optional[TaiList] = None
    taiRangeList: Optional[List[TaiRange]] = Field(None, min_items=1)


class MlAnalyticsInfo(BaseModel):
    mlAnalyticsIds: Optional[List[NwdafEvent]] = Field(None, min_items=1)
    snssaiList: Optional[SnssaiList] = None
    trackingAreaList: Optional[TaiList] = None
    mlModelInterInfo: Optional[List[VendorId]] = Field(None, min_items=0)
    flCapabilityType: Optional[FlCapabilityType] = None
    flTimeInterval: Optional[List[TimeWindow]] = Field(None, min_items=1)


class SliceLoadLevelInformation(BaseModel):
    loadLevelInformation: LoadLevelInformation
    snssais: List[Snssai1] = Field(
        ...,
        description='Identification(s) of network slice to which the subscription applies.',
        min_items=1,
    )


class NsiLoadLevelInfo(BaseModel):
    loadLevelInformation: LoadLevelInformation
    snssai: Snssai1
    resUsage: Optional[ResourceUsage] = None
    numOfExceedLoadLevelThr: Optional[Uinteger] = None
    exceedLoadLevelThrInd: Optional[bool] = None
    numOfUes: Optional[NumberAverage] = None
    numOfPduSess: Optional[NumberAverage] = None
    confidence: Optional[Uinteger] = None


class CongestionInfo(BaseModel):
    congType: CongestionType
    nsi: ThresholdLevel
    confidence: Optional[Uinteger] = None
    topAppListUl: Optional[List[TopApplication]] = Field(None, min_items=1)
    topAppListDl: Optional[List[TopApplication]] = Field(None, min_items=1)


class NfLoadLevelInformation(BaseModel):
    nfInstanceId: NfInstanceId
    nfSetId: Optional[NfSetId] = None
    nfStatus: Optional[NfStatus] = None
    nfCpuUsage: Optional[int] = None
    nfMemoryUsage: Optional[int] = None
    nfStorageUsage: Optional[int] = None
    nfLoadLevelAverage: Optional[int] = None
    nfLoadLevelpeak: Optional[int] = None
    nfLoadAvgInAoi: Optional[int] = None
    snssai: Optional[Snssai1] = None
    confidence: Optional[Uinteger] = None


class Exception(BaseModel):
    excepId: ExceptionId
    excepLevel: Optional[int] = None
    excepTrend: Optional[ExceptionTrend] = None


class IpEthFlowDescription1(BaseModel):
    ipTrafficFilter: FlowDescriptionModel
    ethTrafficFilter: Optional[EthFlowDescription] = None


class IpEthFlowDescription2(BaseModel):
    ipTrafficFilter: Optional[FlowDescriptionModel] = None
    ethTrafficFilter: EthFlowDescription


class IpEthFlowDescription(BaseModel):
    __root__: Union[IpEthFlowDescription1, IpEthFlowDescription2] = Field(
        ...,
        description='Contains the description of an Uplink and/or Downlink Ethernet flow.',
    )


class RetainabilityThreshold1(BaseModel):
    relFlowNum: Uinteger
    relTimeUnit: TimeUnit
    relFlowRatio: Optional[SamplingRatio] = None


class RetainabilityThreshold2(BaseModel):
    relFlowNum: Optional[Uinteger] = None
    relTimeUnit: Optional[TimeUnit] = None
    relFlowRatio: SamplingRatio


class RetainabilityThreshold(BaseModel):
    __root__: Union[RetainabilityThreshold1, RetainabilityThreshold2] = Field(
        ..., description='Represents a QoS flow retainability threshold.'
    )


class NetworkPerfRequirement(BaseModel):
    nwPerfType: NetworkPerfType
    relativeRatio: Optional[SamplingRatio] = None
    absoluteNum: Optional[Uinteger] = None


class NetworkPerfInfo(BaseModel):
    nwPerfType: NetworkPerfType
    relativeRatio: Optional[SamplingRatio] = None
    absoluteNum: Optional[Uinteger] = None
    confidence: Optional[Uinteger] = None


class FailureEventInfo(BaseModel):
    event: NwdafEvent
    failureCode: NwdafFailureCode


class AnalyticsMetadataIndication(BaseModel):
    dataStatProps: Optional[List[DatasetStatisticalProperty]] = Field(None, min_items=1)
    strategy: Optional[OutputStrategy] = None
    aggrNwdafIds: Optional[List[NfInstanceId]] = Field(None, min_items=1)


class AnalyticsMetadataInfo(BaseModel):
    numSamples: Optional[Uinteger] = None
    dataStatProps: Optional[List[DatasetStatisticalProperty]] = Field(None, min_items=1)
    strategy: Optional[OutputStrategy] = None
    accuracy: Optional[Accuracy] = None


class ModelInfo(BaseModel):
    analyticsId: NwdafEvent
    mlModelInfos: List[MLModelInfo] = Field()
    @validator('mlModelInfos')
    def validate_min_items_mlModelInfos(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value


class AnalyticsContextIdentifier(BaseModel):
    subscriptionId: str = Field(..., description='The identifier of a subscription.')
    nfAnaCtxts: Optional[List[NwdafEvent]] = Field(
        None,
        description='List of analytics types for which NF related analytics contexts can be retrieved.\n',
        min_items=1,
    )
    ueAnaCtxts: Optional[List[UeAnalyticsContextDescriptor]] = Field(
        None,
        description='List of objects that indicate for which SUPI and analytics types combinations analytics  context can be retrieved.\n',
        min_items=1,
    )


class DnPerf(BaseModel):
    dnai: Optional[Dnai] = None
    perfData: PerfData


class ClassCriterion(BaseModel):
    disperClass: DispersionClass
    classThreshold: SamplingRatio
    thresMatch: MatchingDirection


class RedundantTransmissionExpReq(BaseModel):
    redTOrderCriter: Optional[RedTransExpOrderingCriterion] = None
    order: Optional[MatchingDirection] = None


class RedundantTransmissionExpInfo(BaseModel):
    dnn: Optional[Dnn] = None
    redTransExps: List[RedundantTransmissionExpPerTS] = Field()
    @validator('redTransExps')
    def validate_min_items_redTransExps(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value


class WlanPerformanceReq(BaseModel):
    ssIds: Optional[List[str]] = Field(None, min_items=1)
    bssIds: Optional[List[str]] = Field(None, min_items=1)
    wlanOrderCriter: Optional[WlanOrderingCriterion] = None
    order: Optional[MatchingDirection] = None


class WlanPerTsPerformanceInfo1(BaseModel):
    tsStart: DateTime
    tsDuration: DurationSec
    rssi: int
    rtt: Optional[Uinteger] = None
    trafficInfo: Optional[TrafficInformation] = None
    numberOfUes: Optional[Uinteger] = None
    confidence: Optional[Uinteger] = None


class WlanPerTsPerformanceInfo2(BaseModel):
    tsStart: DateTime
    tsDuration: DurationSec
    rssi: Optional[int] = None
    rtt: Uinteger
    trafficInfo: Optional[TrafficInformation] = None
    numberOfUes: Optional[Uinteger] = None
    confidence: Optional[Uinteger] = None


class WlanPerTsPerformanceInfo3(BaseModel):
    tsStart: DateTime
    tsDuration: DurationSec
    rssi: Optional[int] = None
    rtt: Optional[Uinteger] = None
    trafficInfo: TrafficInformation
    numberOfUes: Optional[Uinteger] = None
    confidence: Optional[Uinteger] = None


class WlanPerTsPerformanceInfo4(BaseModel):
    tsStart: DateTime
    tsDuration: DurationSec
    rssi: Optional[int] = None
    rtt: Optional[Uinteger] = None
    trafficInfo: Optional[TrafficInformation] = None
    numberOfUes: Uinteger
    confidence: Optional[Uinteger] = None


class WlanPerTsPerformanceInfo(BaseModel):
    __root__: Union[
        WlanPerTsPerformanceInfo1,
        WlanPerTsPerformanceInfo2,
        WlanPerTsPerformanceInfo3,
        WlanPerTsPerformanceInfo4,
    ] = Field(
        ...,
        description='WLAN performance information per Time Slot during the analytics target period.',
    )


class DnPerformanceReq(BaseModel):
    dnPerfOrderCriter: Optional[DnPerfOrderingCriterion] = None
    order: Optional[MatchingDirection] = None
    reportThresholds: Optional[List[ThresholdLevel]] = Field(None, min_items=1)


class RatFreqInformation(BaseModel):
    allFreq: Optional[bool] = Field(
        None,
        description='Set to "true" to indicate to handle all the frequencies the NWDAF received, otherwise  set to "false" or omit. The "allFreq" attribute and the "freq" attribute are mutually  exclusive.\n',
    )
    allRat: Optional[bool] = Field(
        None,
        description='Set to "true" to indicate to handle all the RAT Types the NWDAF received, otherwise  set to "false" or omit. The "allRat" attribute and the "ratType" attribute are mutually  exclusive.\n',
    )
    freq: Optional[ArfcnValueNR] = None
    ratType: Optional[RatType] = None
    svcExpThreshold: Optional[ThresholdLevel] = None
    matchingDir: Optional[MatchingDirection] = None


class NwdafInfo(BaseModel):
    eventIds: Optional[List[EventId]] = Field(None, min_items=1)
    nwdafEvents: Optional[List[NwdafEvent]] = Field(None, min_items=1)
    taiList: Optional[TaiList] = None
    taiRangeList: Optional[List[TaiRange]] = Field(None, min_items=1)
    nwdafCapability: Optional[NwdafCapability] = None
    analyticsDelay: Optional[DurationSec] = None
    servingNfSetIdList: Optional[List[NfSetId]] = Field(None, min_items=1)
    servingNfTypeList: Optional[List[NFType]] = Field(None, min_items=1)
    mlAnalyticsList: Optional[List[MlAnalyticsInfo]] = Field(None, min_items=1)


class ProblemDetailsAnalyticsInfoRequest(
    ProblemDetails, AdditionInfoAnalyticsInfoRequest
):
    pass


class ContextIdList(BaseModel):
    contextIds: List[AnalyticsContextIdentifier] = Field()
    @validator('contextIds')
    def validate_min_items_contextIds(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value


class HistoricalData(BaseModel):
    startTime: Optional[DateTime] = None
    endTime: Optional[DateTime] = None
    subsWithSources: Optional[List[SpecificDataSubscription]] = Field(
        None,
        description='Information about subscriptions with the data sources.',
        min_items=1,
    )
    data: List[str] = Field(
        ..., description='Historical data related to the analytics.', min_items=1
    )


class RequestedContext(BaseModel):
    contexts: List[ContextType] = Field(
        ..., description='List of analytics context types.', min_items=1
    )


class SmcceInfo(BaseModel):
    dnn: Optional[Dnn] = None
    snssai: Optional[Snssai1] = None
    smcceUeList: SmcceUeList


class SnssaiInfoItem(BaseModel):
    sNssai: ExtSnssai
    dnnInfoList: List[DnnInfoItem] = Field()
    @validator('dnnInfoList')
    def validate_min_items_dnnInfoList(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value


class SnssaiEasdfInfoItem(BaseModel):
    sNssai: ExtSnssai
    dnnEasdfInfoList: List[DnnEasdfInfoItem] = Field()
    @validator('dnnEasdfInfoList')
    def validate_min_items_dnnEasdfInfoList(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value


class TrustAfInfo(BaseModel):
    sNssaiInfoList: Optional[List[SnssaiInfoItem]] = Field(None, min_items=1)
    afEvents: Optional[List[AfEvent2]] = Field(None, min_items=1)
    appIds: Optional[List[str]] = Field(None, min_items=1)
    internalGroupId: Optional[List[GroupId]] = Field(None, min_items=1)
    mappingInd: Optional[bool] = False


class DccfInfo(BaseModel):
    servingNfTypeList: Optional[List[NFType]] = Field(None, min_items=1)
    servingNfSetIdList: Optional[List[NfSetId]] = Field(None, min_items=1)
    taiList: Optional[TaiList] = None
    taiRangeList: Optional[List[TaiRange]] = Field(None, min_items=1)


class MfafInfo(BaseModel):
    servingNfTypeList: Optional[List[NFType]] = None
    servingNfSetIdList: Optional[List[NfSetId]] = None
    taiList: Optional[TaiList] = None
    taiRangeList: Optional[List[TaiRange]] = None


class AmfInfo(BaseModel):
    amfSetId: AmfSetId1
    amfRegionId: AmfRegionId1
    guamiList: List[Guami] = Field()
    @validator('guamiList')
    def validate_min_items_guamiList(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value
    taiList: Optional[List[Tai1]] = Field(None, min_items=1)
    taiRangeList: Optional[List[TaiRange]] = Field(None, min_items=1)
    backupInfoAmfFailure: Optional[List[Guami]] = Field(None, min_items=1)
    backupInfoAmfRemoval: Optional[List[Guami]] = Field(None, min_items=1)
    n2InterfaceAmfInfo: Optional[N2InterfaceAmfInfo] = None
    amfOnboardingCapability: Optional[bool] = False
    highLatencyCom: Optional[bool] = None


class SmfInfo(BaseModel):
    sNssaiSmfInfoList: List[SnssaiSmfInfoItem] = Field()
    @validator('sNssaiSmfInfoList')
    def validate_min_items_sNssaiSmfInfoList(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value
    taiList: Optional[List[Tai1]] = Field(None, min_items=1)
    taiRangeList: Optional[List[TaiRange]] = Field(None, min_items=1)
    pgwFqdn: Optional[Fqdn1] = None
    pgwIpAddrList: Optional[List[IpAddr]] = Field(None, min_items=1)
    accessType: Optional[List[AccessType]] = Field(None, min_items=1)
    priority: Optional[conint(ge=0, le=65535)] = None
    vsmfSupportInd: Optional[bool] = None
    pgwFqdnList: Optional[List[Fqdn1]] = Field(None, min_items=1)
    smfOnboardingCapability: Optional[bool] = False
    ismfSupportInd: Optional[bool] = None
    smfUPRPCapability: Optional[bool] = False


class PcfInfo(BaseModel):
    groupId: Optional[NfGroupId] = None
    dnnList: Optional[List[Dnn]] = Field(None, min_items=1)
    supiRanges: Optional[List[SupiRange]] = Field(None, min_items=1)
    gpsiRanges: Optional[List[IdentityRange]] = Field(None, min_items=1)
    rxDiamHost: Optional[DiameterIdentity] = None
    rxDiamRealm: Optional[DiameterIdentity] = None
    v2xSupportInd: Optional[bool] = False
    proseSupportInd: Optional[bool] = False
    proseCapability: Optional[ProseCapability] = None
    v2xCapability: Optional[V2xCapability] = None
    a2xSupportInd: Optional[bool] = False
    a2xCapability: Optional[A2xCapability] = None
    rangingSlPosSupportInd: Optional[bool] = False


class BlockedLocationInfoList(BaseModel):
    blockedLocation: Optional[PlmnId] = None
    blockedDur: Optional[TimeDuration] = None
    blockedSlice: Optional[str] = None


class SnssaiTsctsfInfoItem(BaseModel):
    sNssai: ExtSnssai
    dnnInfoList: List[DnnTsctsfInfoItem] = Field()
    @validator('dnnInfoList')
    def validate_min_items_dnnInfoList(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value


class MbsSessionId1(BaseModel):
    tmgi: Tmgi
    ssm: Optional[Ssm] = None
    nid: Optional[Nid2] = None


class MbsSessionId2(BaseModel):
    tmgi: Optional[Tmgi] = None
    ssm: Ssm
    nid: Optional[Nid2] = None


class MbsSessionId(BaseModel):
    __root__: Union[MbsSessionId1, MbsSessionId2] = Field(
        ..., description='MBS Session Identifier'
    )


class NcgiTai(BaseModel):
    tai: Tai1
    cellList: List[NcgiModel] = Field(
        ..., description='List of List of NR cell ids', min_items=1
    )


class SnssaiMbSmfInfoItem(BaseModel):
    sNssai: ExtSnssai
    dnnInfoList: List[DnnMbSmfInfoItem] = Field()
    @validator('dnnInfoList')
    def validate_min_items_dnnInfoList(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value


class SnssaiUpfInfoItem(BaseModel):
    sNssai: ExtSnssai
    dnnUpfInfoList: List[DnnUpfInfoItem] = Field()
    @validator('dnnUpfInfoList')
    def validate_min_items_dnnUpfInfoList(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value
    redundantTransport: Optional[bool] = False


class Attributes19(ManagedFunctionAttr):
    plmnIdList: Optional[PlmnIdList] = None
    nRTACList: Optional[TACList] = None
    amfSetId: Optional[AmfSetId] = None
    snssaiList: Optional[SnssaiList] = None
    aMFRegionRef: Optional[Dn] = None
    aMFSetMemberList: Optional[DnList] = None


class Attributes20(ManagedFunctionAttr):
    plmnIdList: Optional[PlmnIdList] = None
    nRTACList: Optional[TACList] = None
    amfRegionId: Optional[AmfRegionId] = None
    snssaiList: Optional[SnssaiList] = None
    aMFSetListRef: Optional[DnList] = None


class GeoLoc(BaseModel):
    geographicalCoordinates: Optional[GeographicalCoordinates] = None
    civicLocation: Optional[str] = None


class Attributes45(ManagedFunctionAttr):
    plmnIdList: Optional[PlmnIdList] = None
    amfIdentifier: Optional[AmfIdentifier] = None


class Attributes93(BaseModel):
    gtpUPathQoSMonitoringState: Optional[GtpUPathQoSMonitoringState] = None
    gtpUPathMonitoredSNSSAIs: Optional[List[Snssai]] = None
    monitoredDSCPs: Optional[List[conint(ge=0, le=255)]] = None
    isEventTriggeredGtpUPathMonitoringSupported: Optional[bool] = None
    isPeriodicGtpUMonitoringSupported: Optional[bool] = None
    isImmediateGtpUMonitoringSupported: Optional[bool] = None
    gtpUPathDelayThresholds: Optional[GtpUPathDelayThresholdsType] = None
    gtpUPathMinimumWaitTime: Optional[int] = None
    gtpUPathMeasurementPeriod: Optional[int] = None


class Attributes94(BaseModel):
    qFQoSMonitoringState: Optional[QFQoSMonitoringState] = None
    qFMonitoredSNSSAIs: Optional[List[Snssai]] = None
    qFMonitored5QIs: Optional[List[conint(ge=0, le=255)]] = None
    isEventTriggeredQFMonitoringSupported: Optional[bool] = None
    isPeriodicQFMonitoringSupported: Optional[bool] = None
    isSessionReleasedQFMonitoringSupported: Optional[bool] = None
    qFPacketDelayThresholds: Optional[QFPacketDelayThresholdsType] = None
    qFMinimumWaitTime: Optional[int] = None
    qFMeasurementPeriod: Optional[int] = None


class RrmPolicyAttr(BaseModel):
    resourceType: Optional[ResourceType] = None
    rRMPolicyMemberList: Optional[RrmPolicyMemberList] = None


class Attributes135(ManagedFunctionAttr):
    gnbId: Optional[GnbId] = None
    gnbIdLength: Optional[GnbIdLength] = None
    gnbCuUpId: Optional[GnbCuUpId] = None
    plmnInfoList: Optional[PlmnInfoList] = None
    configurable5QISetRef: Optional[Dn] = None
    dynamic5QISetRef: Optional[Dn] = None


class Attributes136(ManagedFunctionAttr):
    gnbId: Optional[GnbId] = None
    gnbIdLength: Optional[GnbIdLength] = None
    gnbCuName: Optional[GnbName] = None
    plmnId: Optional[PlmnId] = None
    x2BlockList: Optional[GGnbIdList] = None
    xnBlockList: Optional[GGnbIdList] = None
    x2AllowList: Optional[GGnbIdList] = None
    xnAllowList: Optional[GGnbIdList] = None
    x2HOBlockList: Optional[GEnbIdList] = None
    xnHOBlackList: Optional[GGnbIdList] = None
    mappingSetIDBackhaulAddress: Optional[MappingSetIDBackhaulAddress] = None
    tceMappingInfoList: Optional[TceMappingInfoList] = None
    configurable5QISetRef: Optional[Dn] = None
    dynamic5QISetRef: Optional[Dn] = None
    ephemerisInfoSetRef: Optional[Dn] = None
    dCHOControl: Optional[bool] = None
    dDAPSHOControl: Optional[bool] = None


class Attributes137(ManagedFunctionAttr):
    cellLocalId: Optional[int] = None
    plmnInfoList: Optional[PlmnInfoList] = None
    nRFrequencyRef: Optional[Dn] = None


class Attributes138(ManagedFunctionAttr):
    administrativeState: Optional[AdministrativeState] = None
    operationalState: Optional[OperationalState] = None
    cellLocalId: Optional[int] = None
    cellState: Optional[CellState] = None
    plmnInfoList: Optional[PlmnInfoList] = None
    npnIdentityList: Optional[NpnIdentityList] = None
    nrPci: Optional[NrPci] = None
    nrTac: Optional[Tac] = None
    arfcnDL: Optional[int] = None
    arfcnUL: Optional[int] = None
    arfcnSUL: Optional[int] = None
    bSChannelBwDL: Optional[int] = None
    bSChannelBwUL: Optional[int] = None
    bSChannelBwSUL: Optional[int] = None
    ssbFrequency: Optional[conint(ge=0, le=3279165)] = None
    ssbPeriodicity: Optional[SsbPeriodicity] = None
    ssbSubCarrierSpacing: Optional[SsbSubCarrierSpacing] = None
    ssbOffset: Optional[conint(ge=0, le=159)] = None
    ssbDuration: Optional[SsbDuration] = None
    nrSectorCarrierRef: Optional[List[Dn]] = None
    bwpRef: Optional[List[Dn]] = Field(
        None, description='Condition is BWP sets are not supported'
    )
    bwpSetRef: Optional[DnList] = Field(
        None, description='Condition is BWP sets are supported'
    )
    rimRSMonitoringStartTime: Optional[str] = None
    rimRSMonitoringStopTime: Optional[str] = None
    rimRSMonitoringWindowDuration: Optional[int] = None
    rimRSMonitoringWindowStartingOffset: Optional[int] = None
    rimRSMonitoringWindowPeriodicity: Optional[int] = None
    rimRSMonitoringOccasionInterval: Optional[int] = None
    rimRSMonitoringOccasionStartingOffset: Optional[int] = None
    nRFrequencyRef: Optional[Dn] = None
    victimSetRef: Optional[Dn] = None
    aggressorSetRef: Optional[Dn] = None


class Attributes145(RrmPolicyAttr):
    rRMPolicyMaxRatio: Optional[conint(ge=0, le=100)] = 100
    rRMPolicyMinRatio: Optional[conint(ge=0, le=100)] = 0
    rRMPolicyDedicatedRatio: Optional[conint(ge=0, le=100)] = 0


class Attributes178(BaseModel):
    nTNpLMNInfoList: Optional[PlmnInfoList] = None
    nTNTAClist: Optional[NrTacList] = None


class Attributes179(BaseModel):
    ephemerisInfos: Optional[EphemerisInfos] = None


class AnalyticsSchedule1(BaseModel):
    timeDurations: Optional[List[TimeWindowModel]] = None


class AnalyticsSchedule(BaseModel):
    __root__: Union[AnalyticsSchedule1, AnalyticsSchedule2]


class MDAOutputs1(BaseModel):
    mDAType: Optional[str] = None
    mDAOutputList: Optional[List[MDAOutputEntry]] = None
    mDARequestRef: Optional[Dn] = None
    analyticsWindow: Optional[TimeWindowModel] = None
    confidenceDegree: Optional[float] = None


class Attributes180(BaseModel):
    mDAReportID: Optional[str] = None
    mDAOutputs: Optional[MDAOutputs1] = None


class PerformanceRequirements(BaseModel):
    __root__: List[ModelPerformance]


class Attributes184(BaseModel):
    mLEntityId: Optional[str] = None
    inferenceType: Optional[str] = None
    candidateTrainingDataSource: Optional[List[str]] = None
    trainingDataQualityScore: Optional[float] = None
    trainingRequestSource: Optional[Dn] = None
    requestStatus: Optional[RequestStatus] = None
    expectedRuntimeContext: Optional[MLContext] = None
    performanceRequirements: Optional[PerformanceRequirements] = None
    cancelRequest: Optional[bool] = None
    suspendRequest: Optional[bool] = None
    mLEntityToTrainRef: Optional[Dn] = None


class UEGroup(BaseModel):
    fiveQI: Optional[conint(ge=0, le=255)] = None
    sNssai: Optional[Snssai] = None


class ExpectationFulfilmentResult(BaseModel):
    expectaitonId: Optional[str] = None
    expectationFulfilmentInfo: Optional[FulfilmentInfo] = None
    targetFulfilmentResult: Optional[List[TargetFulfilmentResult]] = None


class WeakRSRPRatioTarget(BaseModel):
    targetName: Optional[TargetName] = None
    targetCondition: Optional[TargetCondition] = None
    targetValueRange: Optional[conint(ge=0, le=100)] = None
    targetContexts: Optional[WeakRSRPContext] = None


class LowSINRRatioTarget(BaseModel):
    targetName: Optional[TargetName1] = None
    targetCondition: Optional[TargetCondition] = None
    targetValueRange: Optional[conint(ge=0, le=100)] = None
    targetContexts: Optional[LowSINRContext] = None


class LowULRANUEThptRatioTarget(BaseModel):
    targetName: Optional[TargetName4] = None
    targetCondition: Optional[TargetCondition4] = None
    targetValueRange: Optional[conint(ge=0, le=100)] = None
    targetContexts: Optional[LowULRANUEThptContext] = None


class LowDLRANUEThptRatioTarget(BaseModel):
    targetName: Optional[TargetName5] = None
    targetCondition: Optional[TargetCondition4] = None
    targetValueRange: Optional[conint(ge=0, le=100)] = None
    targetContexts: Optional[LowDLRANUEThptContext] = None


class HighULPrbLoadRatioTarget(BaseModel):
    targetName: Optional[TargetName6] = None
    targetCondition: Optional[TargetCondition4] = None
    targetValueRange: Optional[conint(ge=0, le=100)] = None
    targetContexts: Optional[HighULPrbLoadContext] = None


class HighDLPrbLoadRatioTarget(BaseModel):
    targetName: Optional[TargetName7] = None
    targetCondition: Optional[TargetCondition4] = None
    targetValueRange: Optional[conint(ge=0, le=100)] = None
    targetContexts: Optional[HighDLPrbLoadContext] = None


class MaxNumberofPDUsessionsTarget(BaseModel):
    targetName: Optional[TargetName19] = None
    targetCondition: Optional[TargetCondition18] = None
    targetValueRange: Optional[int] = None
    targetContexts: Optional[Field5GSessionContext] = None


class UEGroupContext(BaseModel):
    contextAttribute: Optional[ContextAttribute13] = None
    contextCondition: Optional[ContextCondition7] = None
    contextValueRange: Optional[List[UEGroup]] = None


class TaiContext(BaseModel):
    contextAttribute: Optional[ContextAttribute19] = None
    contextCondition: Optional[ContextCondition16] = None
    contextValueRange: Optional[List[TaiModel]] = None


class ServiceProfile(BaseModel):
    serviceProfileId: Optional[str] = None
    plmnInfoList: Optional[PlmnInfoList] = None
    maxNumberofUEs: Optional[float] = None
    dLLatency: Optional[float] = None
    uLLatency: Optional[float] = None
    uEMobilityLevel: Optional[MobilityLevel] = None
    sst: Optional[Sst] = None
    networkSliceSharingIndicator: Optional[NetworkSliceSharingIndicator] = None
    availability: Optional[float] = None
    delayTolerance: Optional[DelayTolerance] = None
    dLDeterministicComm: Optional[DeterministicComm] = None
    uLDeterministicComm: Optional[DeterministicComm] = None
    dLThptPerSlice: Optional[XLThpt] = None
    dLThptPerUE: Optional[XLThpt] = None
    uLThptPerSlice: Optional[XLThpt] = None
    uLThptPerUE: Optional[XLThpt] = None
    dLMaxPktSize: Optional[MaxPktSize] = None
    uLMaxPktSize: Optional[MaxPktSize] = None
    maxNumberofPDUSessions: Optional[MaxNumberofPDUSessions] = None
    kPIMonitoring: Optional[KPIMonitoring] = None
    nBIoT: Optional[NBIoT] = None
    radioSpectrum: Optional[RadioSpectrum] = None
    synchronicity: Optional[Synchronicity] = None
    positioning: Optional[Positioning] = None
    userMgmtOpen: Optional[UserMgmtOpen] = None
    v2XCommModels: Optional[V2XCommModels] = None
    coverageArea: Optional[List[GeoArea]] = None
    termDensity: Optional[TermDensity] = None
    activityFactor: Optional[Float] = None
    uESpeed: Optional[int] = None
    jitter: Optional[int] = None
    survivalTime: Optional[float] = None
    dLReliability: Optional[float] = None
    uLReliability: Optional[float] = None
    maxDLDataVolume: Optional[float] = None
    maxULDataVolume: Optional[float] = None
    sliceSimultaneousUse: Optional[SliceSimultaneousUse] = None
    energyEfficiency: Optional[EnergyEfficiency] = None
    nssaaSupport: Optional[NSSAASupport] = None
    n6Protection: Optional[N6Protection] = None
    nonIPSupport: Optional[NonIPSupport] = None
    supportedDataNetworks: Optional[DataNetwork] = None
    dataNetworkAccess: Optional[DataNetworkAccess] = None


class ServiceProfileList(BaseModel):
    __root__: List[ServiceProfile]


class Attributes192(BaseModel):
    networkSliceSubnetRef: Optional[Dn] = None
    operationalState: Optional[OperationalState] = None
    administrativeState: Optional[AdministrativeState] = None
    serviceProfileList: Optional[ServiceProfileList] = None
    networkSliceControllerRef: Optional[DnList] = None
    isolationProfileRef: Optional[Dn] = None


class Attributes197(BaseModel):
    inputServiceProfile: Optional[ServiceProfile] = None
    serviceProfileId: Optional[str] = None
    operationalState: Optional[OperationalState] = None
    administrativeState: Optional[AdministrativeState] = None
    availabilityStatus: Optional[AvailabilityStatus] = None
    processMonitor: Optional[ProcessMonitor] = None
    networkSliceRef: Optional[Dn] = None


class NotifyMoiCreation(NotificationHeader):
    correlatedNotifications: Optional[List[CorrelatedNotification1]] = None
    additionalText: Optional[str] = None
    sourceIndicator: Optional[SourceIndicator] = None
    attributeList: Optional[AttributeNameValuePairSet] = None


class NotifyMoiDeletion(NotificationHeader):
    correlatedNotifications: Optional[List[CorrelatedNotification1]] = None
    additionalText: Optional[str] = None
    sourceIndicator: Optional[SourceIndicator] = None
    attributeList: Optional[AttributeNameValuePairSet] = None


class NotifyMoiAttributeValueChanges(NotificationHeader):
    correlatedNotifications: Optional[List[CorrelatedNotification1]] = None
    additionalText: Optional[str] = None
    sourceIndicator: Optional[SourceIndicator] = None
    attributeListValueChanges: AttributeValueChangeSet


class NotifyMoiChanges(NotificationHeader):
    moiChanges: List[MoiChange]


class NotifyThresholdCrossing(NotificationHeader):
    observedPerfMetricName: Optional[str] = None
    observedPerfMetricValue: Optional[PerfMetricValue] = None
    observedPerfMetricDirection: Optional[PerfMetricDirection] = None
    thresholdValue: Optional[PerfMetricValue] = None
    hysteresis: Optional[PerfMetricValue] = None
    monitorGranularityPeriod: Optional[int] = None
    additionalText: Optional[str] = None


class NotifyHeartbeat(NotificationHeader):
    heartbeatNtfPeriod: Optional[int] = None


class NotifyFileReady(NotificationHeader):
    fileInfoList: Optional[List[FileInfo]] = None
    additionalText: Optional[str] = None


class NotifyFilePreparationError(NotificationHeader):
    fileInfoList: Optional[List[FileInfo]] = None
    reason: Optional[str] = None
    additionalText: Optional[str] = None


class NotifyNewAlarm(NotificationHeader):
    alarmId: AlarmId
    alarmType: AlarmType
    probableCause: ProbableCause
    specificProblem: Optional[SpecificProblem] = None
    perceivedSeverity: PerceivedSeverity
    backedUpStatus: Optional[bool] = None
    backUpObject: Optional[Dn] = None
    trendIndication: Optional[TrendIndication] = None
    thresholdInfo: Optional[ThresholdInfo] = None
    correlatedNotifications: Optional[CorrelatedNotifications] = None
    stateChangeDefinition: Optional[AttributeValueChangeSet] = None
    monitoredAttributes: Optional[AttributeNameValuePairSet] = None
    proposedRepairActions: Optional[str] = None
    additionalText: Optional[str] = None
    additionalInformation: Optional[AttributeNameValuePairSet] = None
    rootCauseIndicator: Optional[bool] = None


class LoggedMDTConfigType(BaseModel):
    traceCollectionEntityId: Optional[TraceCollectionEntityIdType] = None
    loggingDuration: Optional[LoggingDurationType] = None
    loggingInterval: Optional[LoggingIntervalType] = None
    eventThresholdL1: Optional[EventThresholdL1Type] = None
    hysteresisL1: Optional[HysteresisL1Type] = None
    timeToTriggerL1: Optional[TimeToTriggerL1Type] = None
    mbsfnAreaList: Optional[List[MbsfnArea]] = None
    reportType: Optional[ReportTypeType] = None
    plmnList: Optional[PlmnListType] = None
    eventListForEventTriggeredMeasurement: Optional[
        EventListForEventTriggeredMeasurementType
    ] = None
    areaConfigurationForNeighCell: Optional[AreaConfig] = None
    nPNIdentityList: Optional[List[NpnIdType]] = None


class MdtConfigType(BaseModel):
    anonymizationOfMdtData: Optional[AnonymizationOfMdtDataType] = None
    areaScope: Optional[List[AreaScopeModel]] = None
    sensorInformation: Optional[SensorInformationType] = None
    immediateMDTConfig: Optional[ImmediateMDTConfigType] = None
    loggedMDTConfig: Optional[LoggedMDTConfigType] = None


class TraceJobAttr(BaseModel):
    jobType: Optional[JobTypeType] = None
    plmnTarget: Optional[PlmnTargetType] = None
    nPNTarget: Optional[NpnIdType] = None
    traceReportingConsumerUri: Optional[Uri] = None
    traceCollectionEntityIpAddress: Optional[IpAddr1] = None
    traceReference: Optional[TraceReferenceType] = None
    jobId: Optional[str] = None
    traceReportingFormat: Optional[TraceReportingFormatType] = None
    traceTarget: Optional[TraceTargetType] = None
    traceConfig: Optional[TraceConfigType] = None
    mdtConfig: Optional[MdtConfigType] = None


class Attributes17(BaseModel):
    serviceType: Optional[ServiceType] = None
    areaScope: Optional[List[AreaScope]] = None
    qoECollectionEntityAddress: Optional[IpAddr1] = None
    pLMNTarget: Optional[PlmnId] = None
    qoETarget: Optional[str] = None
    qoEReference: Optional[str] = None
    jobId: Optional[str] = None
    sliceScope: Optional[List[Snssai]] = None
    qMCConfigFile: Optional[str] = None
    mDTAlignmentInformation: Optional[TraceReferenceType] = None
    availableRANqoEMetrics: Optional[List[AvailableRANqoEMetric]] = Field(
        None, max_items=2, min_items=0
    )


class NFProfile(BaseModel):
    nFInstanceId: Optional[str] = Field(None, description='uuid of NF instance')
    nFType: Optional[NFType] = None
    nFStatus: Optional[NFStatus] = None
    plmn: Optional[PlmnId] = None
    sNssais: Optional[Snssai] = None
    fqdn: Optional[Fqdn] = None
    interPlmnFqdn: Optional[Fqdn] = None
    nfServices: Optional[List[NFService]] = None


class ManagedNFProfile(BaseModel):
    nfInstanceID: Optional[str] = None
    nfType: Optional[NFType] = None
    heartbeatTimer: Optional[int] = None
    authzInfo: Optional[str] = None
    hostAddr: Optional[HostAddr] = None
    allowedPLMNs: Optional[List[PlmnId]] = None
    allowedSNPNs: Optional[List[SnpnInfo]] = None
    allowedNfTypes: Optional[List[NFType]] = None
    allowedNfDomains: Optional[List[str]] = None
    allowedNSSAIs: Optional[List[Snssai]] = None
    locality: Optional[str] = None
    capacity: Optional[int] = None
    nfSetIdList: Optional[List[str]] = None
    servingScope: Optional[List[str]] = None
    lcHSupportInd: Optional[bool] = None
    olcHSupportInd: Optional[bool] = None
    nfSetRecoveryTimeList: Optional[List[DateTime]] = None
    scpDomains: Optional[List[str]] = None
    recoveryTime: Optional[DateTime] = None
    nfServicePersistence: Optional[bool] = None
    nfProfileChangesSupportInd: Optional[bool] = None
    defaultNotificationSubscriptions: Optional[
        List[DefaultNotificationSubscription]
    ] = Field(None, min_items=1)
    serviceSetRecoveryTimeList: Optional[List[DateTime]] = Field(None, min_items=1)
    vendorId: Optional[VendorId] = None


class Cnf(BaseModel):
    cnfUnits: List[CnfUnit] = Field()
    @validator('cnfUnits')
    def validate_min_items_cnfUnits(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value


class Dnf(BaseModel):
    dnfUnits: List[DnfUnit] = Field()
    @validator('dnfUnits')
    def validate_min_items_dnfUnits(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value


class EutraLocation(BaseModel):
    tai: Tai1
    ignoreTai: Optional[bool] = False
    ecgi: Ecgi
    ignoreEcgi: Optional[bool] = False
    ageOfLocationInformation: Optional[conint(ge=0, le=32767)] = None
    ueLocationTimestamp: Optional[DateTime] = None
    geographicalInformation: Optional[constr(regex=r'^[0-9A-F]{16}$')] = None
    geodeticInformation: Optional[constr(regex=r'^[0-9A-F]{20}$')] = None
    globalNgenbId: Optional[GlobalRanNodeId] = None
    globalENbId: Optional[GlobalRanNodeId] = None


class EutraLocationRm(BaseModel):
    __root__: Union[EutraLocation, NullValue]


class NrLocation(BaseModel):
    tai: Tai1
    ncgi: Ncgi
    ageOfLocationInformation: Optional[conint(ge=0, le=32767)] = None
    ueLocationTimestamp: Optional[DateTime] = None
    geographicalInformation: Optional[constr(regex=r'^[0-9A-F]{16}$')] = None
    geodeticInformation: Optional[constr(regex=r'^[0-9A-F]{20}$')] = None
    globalGnbId: Optional[GlobalRanNodeId] = None


class NrLocationRm(BaseModel):
    __root__: Union[NrLocation, NullValue]


class PresenceInfo(BaseModel):
    praId: Optional[str] = None
    additionalPraId: Optional[str] = None
    presenceState: Optional[PresenceState] = None
    trackingAreaList: Optional[List[Tai1]] = Field(None, min_items=1)
    ecgiList: Optional[List[Ecgi]] = Field(None, min_items=1)
    ncgiList: Optional[List[Ncgi]] = Field(None, min_items=1)
    globalRanNodeIdList: Optional[List[GlobalRanNodeId]] = Field(None, min_items=1)
    globaleNbIdList: Optional[List[GlobalRanNodeId]] = Field(None, min_items=1)


class PresenceInfoRm(BaseModel):
    praId: Optional[str] = None
    additionalPraId: Optional[str] = None
    presenceState: Optional[PresenceState] = None
    trackingAreaList: Optional[List[Tai1]] = Field(None, min_items=0)
    ecgiList: Optional[List[Ecgi]] = Field(None, min_items=0)
    ncgiList: Optional[List[Ncgi]] = Field(None, min_items=0)
    globalRanNodeIdList: Optional[List[GlobalRanNodeId]] = None
    globaleNbIdList: Optional[List[GlobalRanNodeId]] = Field(None, min_items=1)


class Pc5QosFlowItem(BaseModel):
    pqi: Field5Qi
    pc5FlowBitRates: Optional[Pc5FlowBitRates] = None
    range: Optional[Uinteger] = None


class MdtConfiguration(BaseModel):
    jobType: JobType
    reportType: Optional[ReportTypeMdt] = None
    areaScope: Optional[AreaScopeModel1] = None
    measurementLteList: Optional[List[MeasurementLteForMdt]] = None
    measurementNrList: Optional[List[MeasurementNrForMdt]] = Field(None, min_items=1)
    sensorMeasurementList: Optional[List[SensorMeasurement]] = Field(None, min_items=1)
    reportingTriggerList: Optional[List[ReportingTrigger]] = Field(None, min_items=1)
    reportInterval: Optional[ReportIntervalMdt] = None
    reportIntervalNr: Optional[ReportIntervalNrMdt] = None
    reportAmount: Optional[ReportAmountMdt] = None
    eventThresholdRsrp: Optional[conint(ge=0, le=97)] = None
    eventThresholdRsrpNr: Optional[conint(ge=0, le=127)] = None
    eventThresholdRsrq: Optional[conint(ge=0, le=34)] = None
    eventThresholdRsrqNr: Optional[conint(ge=0, le=127)] = None
    eventList: Optional[List[EventForMdt]] = Field(None, min_items=1)
    loggingInterval: Optional[LoggingIntervalMdt] = None
    loggingIntervalNr: Optional[LoggingIntervalNrMdt] = None
    loggingDuration: Optional[LoggingDurationMdt] = None
    loggingDurationNr: Optional[LoggingDurationNrMdt] = None
    positioningMethod: Optional[PositioningMethodMdt] = None
    addPositioningMethodList: Optional[List[PositioningMethodMdt]] = Field(
        None, min_items=1
    )
    collectionPeriodRmmLte: Optional[CollectionPeriodRmmLteMdt] = None
    collectionPeriodRmmNr: Optional[CollectionPeriodRmmNrMdt] = None
    measurementPeriodLte: Optional[MeasurementPeriodLteMdt] = None
    mdtAllowedPlmnIdList: Optional[List[PlmnId1]] = Field(
        None, max_items=16, min_items=1
    )
    mbsfnAreaList: Optional[List[MbsfnAreaModel]] = Field(
        None, max_items=8, min_items=1
    )
    interFreqTargetList: Optional[List[InterFreqTargetInfo]] = Field(
        None, max_items=8, min_items=1
    )


class PccRule(BaseModel):
    flowInfos: Optional[List[FlowInformation]] = Field(
        None, description='An array of IP flow packet filter information.', min_items=1
    )
    appId: Optional[str] = Field(
        None,
        description='A reference to the application detection filter configured at the UPF.',
    )
    appDescriptor: Optional[ApplicationDescriptor] = None
    pccRuleId: str = Field(
        ..., description='Univocally identifies the PCC rule within a PDU session.'
    )
    precedence: Optional[Uinteger] = None
    afSigProtocol: Optional[AfSigProtocol] = None
    appReloc: Optional[bool] = Field(
        None, description='Indication of application relocation possibility.'
    )
    refQosData: Optional[List[str]] = Field(
        None,
        description='A reference to the QosData policy decision type. It is the qosId described in subclause 5.6.2.8.',
        max_items=1,
        min_items=1,
    )
    refAltQosParams: Optional[List[str]] = Field(
        None,
        description='A Reference to the QosData policy decision type for the Alternative QoS parameter sets of the service data flow.',
        min_items=1,
    )
    refTcData: Optional[List[str]] = Field(
        None,
        description='A reference to the TrafficControlData policy decision type. It is the tcId described in subclause 5.6.2.10.',
        max_items=1,
        min_items=1,
    )
    refChgData: Optional[List[str]] = Field(
        None,
        description='A reference to the ChargingData policy decision type. It is the chgId described in subclause 5.6.2.11.',
        max_items=1,
        min_items=1,
    )
    refChgN3gData: Optional[List[str]] = Field(
        None,
        description='A reference to the ChargingData policy decision type only applicable to Non-3GPP access if "ATSSS" feature is supported. It is the chgId described in subclause 5.6.2.11.',
        max_items=1,
        min_items=1,
    )
    refUmData: Optional[List[str]] = Field(
        None,
        description='A reference to UsageMonitoringData policy decision type. It is the umId described in subclause 5.6.2.12.',
        max_items=1,
        min_items=1,
    )
    refUmN3gData: Optional[List[str]] = Field(
        None,
        description='A reference to UsageMonitoringData policy decision type only applicable to Non-3GPP access if "ATSSS" feature is supported. It is the umId described in subclause 5.6.2.12.',
        max_items=1,
        min_items=1,
    )
    refCondData: Optional[str] = Field(
        None,
        description='A reference to the condition data. It is the condId described in subclause 5.6.2.9.',
    )
    refQosMon: Optional[List[str]] = Field(
        None,
        description='A reference to the QosMonitoringData policy decision type. It is the qmId described in subclause 5.6.2.40.',
        max_items=1,
        min_items=1,
    )
    addrPreserInd: Optional[bool] = None
    ddNotifCtrl: Optional[DownlinkDataNotificationControl] = None
    ddNotifCtrl2: Optional[DownlinkDataNotificationControlRm] = None
    disUeNotif: Optional[bool] = None


class TrafficControlData(BaseModel):
    tcId: str = Field(
        ...,
        description='Univocally identifies the traffic control policy data within a PDU session.',
    )
    redirectInfo: Optional[RedirectInformation] = None
    addRedirectInfo: Optional[List[RedirectInformation]] = Field(None, min_items=1)
    muteNotif: Optional[bool] = Field(
        None,
        description="Indicates whether applicat'on's start or stop notification is to be muted.",
    )
    trafficSteeringPolIdDl: Optional[str] = Field(
        None,
        description='Reference to a pre-configured traffic steering policy for downlink traffic at the SMF.',
    )
    trafficSteeringPolIdUl: Optional[str] = Field(
        None,
        description='Reference to a pre-configured traffic steering policy for uplink traffic at the SMF.',
    )
    routeToLocs: Optional[List[RouteToLocation]] = Field(
        None,
        description='A list of location which the traffic shall be routed to for the AF request',
        min_items=1,
    )
    traffCorreInd: Optional[bool] = None
    upPathChgEvent: Optional[UpPathChgEvent] = None
    steerFun: Optional[SteeringFunctionality] = None
    steerModeDl: Optional[SteeringMode] = None
    steerModeUl: Optional[SteeringMode] = None
    mulAccCtrl: Optional[MulticastAccessControl] = None


class RuleReport(BaseModel):
    pccRuleIds: List[str] = Field(
        ...,
        description='Contains the identifier of the affected PCC rule(s).',
        min_items=1,
    )
    ruleStatus: RuleStatus
    failureCode: Optional[FailureCode] = None
    ranNasRelCauses: Optional[List[RanNasRelCause]] = Field(
        None,
        description='indicates the RAN or NAS release cause code information.',
        min_items=1,
    )


class UeInitiatedResourceRequest(BaseModel):
    pccRuleId: Optional[str] = None
    ruleOp: RuleOperation
    precedence: Optional[int] = None
    packFiltInfo: List[PacketFilterInfo] = Field()
    @validator('packFiltInfo')
    def validate_min_items_packFiltInfo(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value
    reqQos: Optional[RequestedQos] = None


class ErrorReport(BaseModel):
    error: Optional[ProblemDetails] = None
    ruleReports: Optional[List[RuleReport]] = Field(
        None, description='Used to report the PCC rule failure.', min_items=1
    )
    sessRuleReports: Optional[List[SessionRuleReport]] = Field(
        None, description='Used to report the session rule failure.', min_items=1
    )
    polDecFailureReports: Optional[List[PolicyDecisionFailureCode]] = Field(
        None,
        description='Used to report failure of the policy decision and/or condition data.',
        min_items=1,
    )
    altQosParamId: Optional[str] = None


class TrafficControlData1(BaseModel):
    tcId: Optional[str] = None
    flowStatus: Optional[FlowStatus] = None
    redirectInfo: Optional[RedirectInformation] = None
    addRedirectInfo: Optional[List[RedirectInformation]] = Field(None, min_items=1)
    muteNotif: Optional[bool] = None
    trafficSteeringPolIdDl: Optional[str] = None
    trafficSteeringPolIdUl: Optional[str] = None
    routeToLocs: Optional[List[RouteToLocation]] = None
    traffCorreInd: Optional[bool] = None
    upPathChgEvent: Optional[UpPathChgEvent] = None
    steerFun: Optional[SteeringFunctionality] = None
    steerModeDl: Optional[SteeringModeModel] = None
    steerModeUl: Optional[SteeringModeModel] = None
    mulAccCtrl: Optional[MulticastAccessControl] = None
    snssaiList: Optional[SnssaiList] = None


class EventsSubscReqData(BaseModel):
    events: List[AfEventSubscription] = Field()
    @validator('events')
    def validate_min_items_events(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value
    notifUri: Optional[Uri] = None
    reqQosMonParams: Optional[List[RequestedQosMonitoringParameter]] = Field(
        None, min_items=1
    )
    qosMon: Optional[QosMonitoringInformation] = None
    reqAnis: Optional[List[RequiredAccessInfo]] = Field(None, min_items=1)
    notifCorreId: Optional[str] = None


class EventsSubscReqDataRm(BaseModel):
    events: List[AfEventSubscription]
    notifUri: Optional[Uri] = None
    reqQosMonParams: Optional[List[RequestedQosMonitoringParameter]] = Field(
        None, min_items=1
    )
    qosMon: Optional[QosMonitoringInformationRm] = None
    reqAnis: Optional[List[RequiredAccessInfo]] = Field(None, min_items=1)
    notifCorreId: Optional[str] = None


class MediaSubComponent(BaseModel):
    afSigProtocol: Optional[AfSigProtocol] = None
    ethfDescs: Optional[List[EthFlowDescription]] = Field(
        None, max_items=2, min_items=1
    )
    fNum: int
    fDescs: Optional[List[FlowDescriptionModel]] = Field(None, max_items=2, min_items=1)
    fStatus: Optional[FlowStatus] = None
    marBwDl: Optional[BitRate] = None
    marBwUl: Optional[BitRate] = None
    tosTrCl: Optional[TosTrafficClass] = None
    flowUsage: Optional[FlowUsage] = None


class MediaSubComponentRm(BaseModel):
    afSigProtocol: Optional[AfSigProtocol] = None
    ethfDescs: Optional[List[EthFlowDescription]] = Field(
        None, max_items=2, min_items=1
    )
    fNum: int
    fDescs: Optional[List[FlowDescriptionModel]] = Field(None, max_items=2, min_items=1)
    fStatus: Optional[FlowStatus] = None
    marBwDl: Optional[BitRateRm] = None
    marBwUl: Optional[BitRateRm] = None
    tosTrCl: Optional[TosTrafficClassRm] = None
    flowUsage: Optional[FlowUsage] = None


class AfEventNotification(BaseModel):
    event: AfEvent
    flows: Optional[List[Flows]] = Field(None, min_items=1)


class SpatialValidity(BaseModel):
    presenceInfoList: Dict[str, PresenceInfo]


class SpatialValidityRm(BaseModel):
    presenceInfoList: Dict[str, PresenceInfo]


class AfRoutingRequirementRm(BaseModel):
    appReloc: Optional[bool] = None
    routeToLocs: Optional[List[RouteToLocation]] = Field(None, min_items=1)
    spVal: Optional[SpatialValidityRm] = None
    tempVals: Optional[List[TemporalValidity]] = Field(None, min_items=1)
    upPathChgSub: Optional[UpPathChgEvent] = None
    addrPreserInd: Optional[bool] = None


class TrafficControlDataList(BaseModel):
    __root__: List[TrafficControlData1]


class PccRule1(BaseModel):
    pccRuleId: Optional[str] = Field(
        None, description='Univocally identifies the PCC rule within a PDU session.'
    )
    flowInfoList: Optional[List[FlowInformation]] = None
    applicationId: Optional[str] = None
    appDescriptor: Optional[ApplicationDescriptor] = None
    contentVersion: Optional[ContentVersion] = None
    precedence: Optional[Uinteger] = None
    afSigProtocol: Optional[AfSigProtocol] = None
    isAppRelocatable: Optional[bool] = None
    isUeAddrPreserved: Optional[bool] = None
    qosData: Optional[List[QosDataList]] = None
    altQosParams: Optional[List[QosDataList]] = None
    trafficControlData: Optional[List[TrafficControlDataList]] = None
    conditionData: Optional[ConditionData] = None
    tscaiInputDl: Optional[TscaiInputContainer] = None
    tscaiInputUl: Optional[TscaiInputContainer] = None


class EventReportingRequirement(BaseModel):
    accuracy: Optional[Accuracy] = None
    accPerSubset: Optional[List[Accuracy]] = Field(
        None,
        description='Each element indicates the preferred accuracy level per analytics subset. It may be present if the "listOfAnaSubsets" attribute is present in the subscription request when the subscription event is NF_LOAD, UE_COMM, DISPERSION, NETWORK_PERFORMANCE, WLAN_PERFORMANCE, DN_PERFORMANCE or SERVICE_EXPERIENCE.\n',
        min_items=1,
    )
    startTs: Optional[DateTime] = None
    endTs: Optional[DateTime] = None
    offsetPeriod: Optional[int] = Field(
        None,
        description='Offset period in units of seconds to the reporting time, if the value is negative means  statistics in the past offset period, otherwise a positive value means prediction in the  future offset period. May be present if the "repPeriod" attribute is included within the  "evtReq" attribute.\n',
    )
    sampRatio: Optional[SamplingRatio] = None
    maxObjectNbr: Optional[Uinteger] = None
    maxSupiNbr: Optional[Uinteger] = None
    timeAnaNeeded: Optional[DateTime] = None
    anaMeta: Optional[List[AnalyticsMetadata]] = Field(None, min_items=1)
    anaMetaInd: Optional[AnalyticsMetadataIndication] = None


class TrafficCharacterization(BaseModel):
    dnn: Optional[Dnn] = None
    snssai: Optional[Snssai1] = None
    appId: Optional[ApplicationId] = None
    fDescs: Optional[List[IpEthFlowDescription]] = Field(None, max_items=2, min_items=1)
    ulVolVariance: Optional[Float] = None
    dlVolVariance: Optional[Float] = None


class UserDataCongestionInfo(BaseModel):
    congestionInfo: CongestionInfo
    snssai: Optional[Snssai1] = None


class QosSustainabilityInfo1(BaseModel):
    startTs: Optional[DateTime] = None
    endTs: Optional[DateTime] = None
    qosFlowRetThd: RetainabilityThreshold
    ranUeThrouThd: Optional[BitRate] = None
    snssai: Optional[Snssai1] = None
    confidence: Optional[Uinteger] = None


class QosSustainabilityInfo2(BaseModel):
    startTs: Optional[DateTime] = None
    endTs: Optional[DateTime] = None
    qosFlowRetThd: Optional[RetainabilityThreshold] = None
    ranUeThrouThd: BitRate
    snssai: Optional[Snssai1] = None
    confidence: Optional[Uinteger] = None


class QosSustainabilityInfo(BaseModel):
    __root__: Union[QosSustainabilityInfo1, QosSustainabilityInfo2] = Field(
        ..., description='Represents the QoS Sustainability information.'
    )


class AdditionalMeasurement(BaseModel):
    unexpFlowTeps: Optional[List[IpEthFlowDescription]] = Field(None, min_items=1)
    unexpWakes: Optional[List[DateTime]] = Field(None, min_items=1)
    ddosAttack: Optional[AddressList] = None
    wrgDest: Optional[AddressList] = None
    circums: Optional[List[CircumstanceDescription]] = Field(None, min_items=1)


class DnPerfInfo(BaseModel):
    appId: Optional[ApplicationId] = None
    dnn: Optional[Dnn] = None
    snssai: Optional[Snssai1] = None
    dnPerf: List[DnPerf] = Field()
    @validator('dnPerf')
    def validate_min_items_dnPerf(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value
    confidence: Optional[Uinteger] = None


class DispersionRequirement(BaseModel):
    disperType: DispersionType
    classCriters: Optional[List[ClassCriterion]] = Field(None, min_items=1)
    rankCriters: Optional[List[RankingCriterion]] = Field(None, min_items=1)
    dispOrderCriter: Optional[DispersionOrderingCriterion] = None
    order: Optional[MatchingDirection] = None


class WlanPerSsIdPerformanceInfo(BaseModel):
    ssId: str
    wlanPerTsInfos: List[WlanPerTsPerformanceInfo] = Field()
    @validator('wlanPerTsInfos')
    def validate_min_items_wlanPerTsInfos(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value


class EventFilter(BaseModel):
    anySlice: Optional[AnySlice] = None
    snssais: Optional[List[Snssai1]] = Field(
        None, description='Identification(s) of network slice.', min_items=1
    )
    appIds: Optional[List[ApplicationId]] = Field(None, min_items=1)
    dnns: Optional[List[Dnn]] = Field(None, min_items=1)
    dnais: Optional[List[Dnai]] = Field(None, min_items=1)
    ladnDnns: Optional[List[Dnn]] = Field(
        None,
        description='Identification(s) of LADN DNN to indicate the LADN service area as the AOI.',
        min_items=1,
    )
    maxTopAppUlNbr: Optional[Uinteger] = None
    maxTopAppDlNbr: Optional[Uinteger] = None
    nfInstanceIds: Optional[List[NfInstanceId]] = Field(None, min_items=1)
    nfSetIds: Optional[List[NfSetId]] = Field(None, min_items=1)
    nsiIdInfos: Optional[List[NsiIdInfo]] = Field(None, min_items=1)
    qosRequ: Optional[QosRequirement] = None
    nwPerfTypes: Optional[List[NetworkPerfType]] = Field(None, min_items=1)
    bwRequs: Optional[List[BwRequirement]] = Field(None, min_items=1)
    excepIds: Optional[List[ExceptionId]] = Field(None, min_items=1)
    exptAnaType: Optional[ExpectedAnalyticsType] = None
    ratFreqs: Optional[List[RatFreqInformation]] = Field(None, min_items=1)
    disperReqs: Optional[List[DispersionRequirement]] = Field(None, min_items=1)
    redTransReqs: Optional[List[RedundantTransmissionExpReq]] = Field(None, min_items=1)
    wlanReqs: Optional[List[WlanPerformanceReq]] = Field(None, min_items=1)
    listOfAnaSubsets: Optional[List[AnalyticsSubset]] = Field(None, min_items=1)
    dnPerfReqs: Optional[List[DnPerformanceReq]] = Field(None, min_items=1)


class UnTrustAfInfo(BaseModel):
    afId: str
    sNssaiInfoList: Optional[List[SnssaiInfoItem]] = Field(None, min_items=1)
    mappingInd: Optional[bool] = False


class EasdfInfo(BaseModel):
    sNssaiEasdfInfoList: Optional[List[SnssaiEasdfInfoItem]] = Field(None, min_items=1)
    easdfN6IpAddressList: Optional[List[IpAddr]] = Field(None, min_items=1)
    upfN6IpAddressList: Optional[List[IpAddr]] = Field(None, min_items=1)


class UpfInfo(BaseModel):
    sNssaiUpfInfoList: List[SnssaiUpfInfoItem] = Field()
    @validator('sNssaiUpfInfoList')
    def validate_min_items_sNssaiUpfInfoList(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value
    smfServingArea: Optional[List[str]] = Field(None, min_items=1)
    interfaceUpfInfoList: Optional[List[InterfaceUpfInfoItem]] = Field(
        None, min_items=1
    )
    iwkEpsInd: Optional[bool] = False
    sxaInd: Optional[bool] = None
    pduSessionTypes: Optional[List[PduSessionType]] = Field(None, min_items=1)
    atsssCapability: Optional[AtsssCapability] = None
    ueIpAddrInd: Optional[bool] = False
    taiList: Optional[List[Tai1]] = Field(None, min_items=1)
    taiRangeList: Optional[List[TaiRange]] = Field(None, min_items=1)
    wAgfInfo: Optional[IpInterface] = None
    tngfInfo: Optional[IpInterface] = None
    twifInfo: Optional[IpInterface] = None
    priority: Optional[conint(ge=0, le=65535)] = None
    redundantGtpu: Optional[bool] = False
    ipups: Optional[bool] = False
    dataForwarding: Optional[bool] = False
    supportedPfcpFeatures: Optional[str] = None


class NefInfo(BaseModel):
    nefId: Optional[str] = None
    pfdData: Optional[PfdData] = None
    afEeData: Optional[AfEventExposureData] = None
    gpsiRanges: Optional[List[IdentityRange]] = Field(None, min_items=1)
    externalGroupIdentifiersRanges: Optional[List[IdentityRange]] = Field(
        None, min_items=1
    )
    servedFqdnList: Optional[List[str]] = Field(None, min_items=1)
    taiList: Optional[TaiList] = None
    taiRangeList: Optional[List[TaiRange]] = Field(None, min_items=1)
    dnaiList: Optional[List[Dnai]] = Field(None, min_items=1)
    unTrustAfInfoList: Optional[List[UnTrustAfInfo]] = Field(None, min_items=1)
    uasNfFunctionalityInd: Optional[bool] = False
    multiMemAfSessQosInd: Optional[bool] = False
    memberUESelAssistInd: Optional[bool] = False


class NTNPLMNRestrictionsInfo(BaseModel):
    pLMNId: Optional[PlmnId] = None
    blockedLocationInfoList: Optional[List[BlockedLocationInfoList]] = Field(
        None, min_items=1
    )


class MbsSession(BaseModel):
    mbsSessionId: MbsSessionId
    mbsAreaSessions: Optional[Any] = Field(
        None,
        description='A map (list of key-value pairs) where the key identifies an areaSessionId',
    )


class MbsServiceArea1(BaseModel):
    ncgiList: List[NcgiTai] = Field(..., description='List of NR cell Ids', min_items=1)
    taiList: Optional[List[Tai1]] = Field(
        None, description='List of tracking area Ids', min_items=1
    )


class MbsServiceArea2(BaseModel):
    ncgiList: Optional[List[NcgiTai]] = Field(
        None, description='List of NR cell Ids', min_items=1
    )
    taiList: List[Tai1] = Field(
        ..., description='List of tracking area Ids', min_items=1
    )


class MbsServiceArea(BaseModel):
    __root__: Union[MbsServiceArea1, MbsServiceArea2] = Field(
        ..., description='MBS Service Area'
    )


class MbUpfInfo(BaseModel):
    sNssaiMbUpfInfoList: List[SnssaiUpfInfoItem] = Field()
    @validator('sNssaiMbUpfInfoList')
    def validate_min_items_sNssaiMbUpfInfoList(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value
    mbSmfServingArea: Optional[List[str]] = Field(None, min_items=1)
    interfaceMbUpfInfoList: Optional[List[InterfaceUpfInfoItem]] = Field(
        None, min_items=1
    )
    taiList: Optional[List[Tai1]] = Field(None, min_items=1)
    taiRangeList: Optional[List[TaiRange]] = Field(None, min_items=1)
    priority: Optional[conint(ge=0, le=65535)] = None
    supportedPfcpFeatures: Optional[str] = None


class Attributes18(ManagedFunctionAttr):
    pLMNInfoList: Optional[PlmnInfoList] = None
    amfIdentifier: Optional[AmfIdentifier] = None
    sBIFqdn: Optional[str] = None
    interPlmnFQDN: Optional[str] = None
    weightFactor: Optional[WeightFactor] = None
    cNSIIdList: Optional[CNSIIdList] = None
    amfSetRef: Optional[Dn] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[CommModelList] = None
    nTNPLMNInfoList: Optional[NTNPLMNRestrictionsInfo] = None
    amfInfo: Optional[AmfInfo] = None


class Attributes21(ManagedFunctionAttr):
    pLMNInfoList: Optional[PlmnInfoList] = None
    nRTACList: Optional[TACList] = None
    sBIFqdn: Optional[str] = None
    cNSIIdList: Optional[CNSIIdList] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[CommModelList] = None
    SmfInfo: Optional[SmfInfo] = None
    configurable5QISetRef: Optional[Dn] = None
    dynamic5QISetRef: Optional[Dn] = None


class Attributes22(ManagedFunctionAttr):
    pLMNInfoList: Optional[PlmnInfoList] = None
    nRTACList: Optional[TACList] = None
    cNSIIdList: Optional[CNSIIdList] = None
    energySavingControl: Optional[EnergySavingControl] = None
    energySavingState: Optional[EnergySavingState] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    supportedBMOList: Optional[SupportedBMOList] = None
    upfInfo: Optional[UpfInfo] = None


class Attributes24(ManagedFunctionAttr):
    pLMNInfoList: Optional[PlmnInfoList] = None
    sBIFqdn: Optional[str] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[CommModelList] = None
    supportedBMOList: Optional[SupportedBMOList] = None
    PcfInfo: Optional[PcfInfo] = None
    configurable5QISetRef: Optional[Dn] = None
    dynamic5QISetRef: Optional[Dn] = None


class Attributes25(ManagedFunctionAttr):
    plmnInfoList: Optional[PlmnInfoList] = None
    sBIFqdn: Optional[str] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[CommModelList] = None
    ausfInfo: Optional[AusfInfo] = None


class Attributes26(ManagedFunctionAttr):
    pLMNInfoList: Optional[PlmnInfoList] = None
    sBIFqdn: Optional[str] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[CommModelList] = None
    eCSAddrConfigInfo: Optional[ECSAddrConfigInfo] = None
    udmInfo: Optional[UdmInfo] = None


class Attributes27(ManagedFunctionAttr):
    pLMNInfoList: Optional[PlmnInfoList] = None
    sBIFqdn: Optional[str] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    udrInfo: Optional[UdrInfo] = None


class Attributes28(ManagedFunctionAttr):
    plmnInfoList: Optional[PlmnInfoList] = None
    sBIFqdn: Optional[str] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    udsfInfo: Optional[UdsfInfo] = None


class Attributes30(ManagedFunctionAttr):
    pLMNInfoList: Optional[PlmnInfoList] = None
    sBIFqdn: Optional[str] = None
    cNSIIdList: Optional[CNSIIdList] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[CommModelList] = None


class Attributes31(ManagedFunctionAttr):
    plmnIdList: Optional[PlmnIdList] = None
    sBIFqdn: Optional[str] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[CommModelList] = None
    smsfInfo: Optional[SmsfInfo] = None


class Attributes32(ManagedFunctionAttr):
    plmnIdList: Optional[PlmnIdList] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[CommModelList] = None
    lmfInfo: Optional[LmfInfo] = None


class Attributes33(ManagedFunctionAttr):
    plmnIdList: Optional[PlmnIdList] = None
    sBIFqdn: Optional[str] = None
    snssaiList: Optional[SnssaiList] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[CommModelList] = None


class Attributes35(ManagedFunctionAttr):
    plmnIdList: Optional[PlmnIdList] = None
    sBIFqdn: Optional[str] = None
    snssaiList: Optional[SnssaiList] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[CommModelList] = None
    networkSliceInfoList: Optional[NetworkSliceInfoList] = None
    administrativeState: Optional[AdministrativeState] = None
    nwdafInfo: Optional[NwdafInfo] = None
    nwdafLogicalFuncSupported: Optional[NwdafLogicalFuncSupported] = None


class Attributes37(ManagedFunctionAttr):
    sBIFqdn: Optional[str] = None
    snssaiList: Optional[SnssaiList] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    capabilityList: Optional[CapabilityList] = None
    isCAPIFSup: Optional[bool] = None
    nefInfo: Optional[NefInfo] = None


class Attributes38(ManagedFunctionAttr):
    managedNFProfile: Optional[ManagedNFProfile] = None
    nsacfInfoSnssai: Optional[List[NsacfInfoSnssai]] = None
    nsacfInfo: Optional[NsacfInfo] = None


class Attributes39(ManagedFunctionAttr):
    plmnId: Optional[PlmnId] = None
    sBIFqdn: Optional[str] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[CommModelList] = None


class Attributes40(ManagedFunctionAttr):
    plmnId: Optional[PlmnId] = None
    sBIFqdn: Optional[str] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    serverAddr: Optional[str] = None
    easdfInfo: Optional[EasdfInfo] = None


class TopologicalServiceArea(BaseModel):
    cellIdList: Optional[List[int]] = None
    trackingAreaIdList: Optional[TaiList] = None
    servingPLMN: Optional[PlmnId] = None


class Attributes95(BaseModel):
    predefinedPccRules: Optional[List[PccRule1]] = None


class Attributes96(ManagedFunctionAttr):
    plmnIdList: Optional[PlmnIdList] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[CommModelList] = None
    trustAfInfo: Optional[TrustAfInfo] = None


class Attributes100(ManagedFunctionAttr):
    pLMNInfoList: Optional[PlmnInfoList] = None
    sBIFqdn: Optional[str] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[CommModelList] = None
    dccfInfo: Optional[DccfInfo] = None


class Attributes101(ManagedFunctionAttr):
    pLMNInfoList: Optional[PlmnInfoList] = None
    sBIFqdn: Optional[str] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[CommModelList] = None
    mfafInfo: Optional[MfafInfo] = None


class Attributes102(ManagedFunctionAttr):
    pLMNInfoList: Optional[PlmnInfoList] = None
    sBIFqdn: Optional[str] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[CommModelList] = None
    chfInfo: Optional[ChfInfo] = None


class Attributes107(ManagedFunctionAttr):
    pLMNInfoList: Optional[PlmnInfoList] = None
    sBIFqdn: Optional[str] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[CommModelList] = None
    aanfInfo: Optional[AanfInfo] = None


class Attributes111(ManagedFunctionAttr):
    pLMNInfoList: Optional[PlmnInfoList] = None
    sBIFqdn: Optional[str] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[CommModelList] = None
    gmlcInfo: Optional[GmlcInfo] = None


class Attributes112(ManagedFunctionAttr):
    pLMNInfoList: Optional[PlmnInfoList] = None
    sBIFqdn: Optional[str] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[CommModelList] = None
    tsctsfInfo: Optional[TsctsfInfo] = None


class Attributes119(ManagedFunctionAttr):
    pLMNInfoList: Optional[PlmnInfoList] = None
    sBIFqdn: Optional[str] = None
    cNSIIdList: Optional[CNSIIdList] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[CommModelList] = None
    bsfInfo: Optional[BsfInfo] = None


class Attributes120(ManagedFunctionAttr):
    plmnIdList: Optional[PlmnIdList] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[CommModelList] = None
    mbSmfInfo: Optional[MbSmfInfo] = None


class Attributes124(ManagedFunctionAttr):
    plmnIdList: Optional[PlmnIdList] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[CommModelList] = None
    mbUpfInfo: Optional[MbUpfInfo] = None


class Attributes125(ManagedFunctionAttr):
    pLMNInfoList: Optional[PlmnInfoList] = None
    managedNFProfile: Optional[ManagedNFProfile] = None
    commModelList: Optional[CommModelList] = None
    mnpfInfo: Optional[MnpfInfo] = None


class MDAOutputIEFilter(BaseModel):
    mDAOutputIEName: Optional[str] = None
    filterValue: Optional[str] = None
    threshold: Optional[ThresholdInfoModel] = None
    analyticsPeriod: Optional[AnalyticsSchedule] = None
    timeOut: Optional[DateTime] = None


class ValueRangeType(BaseModel):
    __root__: Union[
        float,
        str,
        bool,
        int,
        TimeWindow,
        DateTime,
        GeoArea,
        PlmnId,
        GeoCoordinate,
        UEGroup,
        Frequency,
    ]


class Context(BaseModel):
    contextAttribute: Optional[str] = None
    contextCondition: Optional[Condition] = None
    contextValueRange: Optional[Union[List[ValueRangeType], ValueRangeType]] = None


class IntentFulfilmentReport(BaseModel):
    intentFulfilmentInfo: Optional[FulfilmentInfo] = None
    expectationFulfilmentResult: Optional[List[ExpectationFulfilmentResult]] = None


class RadioNetworkExpectationObject(BaseModel):
    objectType: Optional[ObjectType1] = None
    objectInstance: Optional[Dn] = None
    objectContexts: Optional[
        List[
            Union[
                CoverageAreaPolygonContext,
                CoverageTACContext,
                PLMNContext,
                DlFrequencyContext,
                UlFrequencyContext,
                RATContext,
                UEGroupContext,
                Context,
            ]
        ]
    ] = None


class RadioServiceExpectationObject(BaseModel):
    objectType: Optional[ObjectType2] = None
    objectInstance: Optional[Dn] = None
    objectContexts: Optional[
        List[Union[CoverageAreaPolygonContext, ServiceTypeContext, Context]]
    ] = None


class ServiceSupportExpectationObject(BaseModel):
    objectType: Optional[ObjectType3] = None
    objectInstance: Optional[Dn] = None
    objectContexts: Optional[
        List[
            Union[
                EdgeIdenfiticationIdContext,
                EdgeIdentificationLocContext,
                CoverageAreaTAContext,
                Context,
            ]
        ]
    ] = None


class Field5GCNetworkExpectationObject(BaseModel):
    objectType: Optional[ObjectType4] = None
    objectInstance: Optional[Dn] = None
    objectContexts: Optional[
        List[
            Union[
                NfTypeContext,
                NfInstanceLocationContext,
                PLMNContext,
                TaiContext,
                ServingScopeContext,
                DnnContext,
                Context,
            ]
        ]
    ] = None


class AssuranceScope(BaseModel):
    taiList: Optional[TaiList] = None


class Attributes190(BaseModel):
    observationTime: Optional[ObservationTime] = None
    assuranceTargetList: Optional[AssuranceTargetList] = None
    assuranceScope: Optional[AssuranceScope] = None
    serviceProfileId: Optional[str] = None
    sliceProfileId: Optional[str] = None


class RANSliceSubnetProfile(BaseModel):
    coverageAreaTAList: Optional[TaiList] = None
    dLLatency: Optional[float] = None
    uLLatency: Optional[float] = None
    uEMobilityLevel: Optional[MobilityLevel] = None
    resourceSharingLevel: Optional[SharingLevel] = None
    maxNumberofUEs: Optional[int] = None
    activityFactor: Optional[int] = None
    dLThptPerSliceSubnet: Optional[XLThpt] = None
    dLThptPerUE: Optional[XLThpt] = None
    uLThptPerSliceSubnet: Optional[XLThpt] = None
    uLThptPerUE: Optional[XLThpt] = None
    uESpeed: Optional[int] = None
    dLReliability: Optional[float] = None
    uLReliability: Optional[float] = None
    dLMaxPktSize: Optional[int] = None
    uLMaxPktSize: Optional[int] = None
    nROperatingBands: Optional[List[str]] = None
    delayTolerance: Optional[DelayTolerance] = None
    positioning: Optional[Positioning] = None
    sliceSimultaneousUse: Optional[SliceSimultaneousUse] = None
    energyEfficiency: Optional[float] = None
    termDensity: Optional[TermDensity] = None
    survivalTime: Optional[float] = None
    synchronicity: Optional[Synchronicity] = None
    dLDeterministicComm: Optional[DeterministicComm] = None
    uLDeterministicComm: Optional[DeterministicComm] = None
    nonIPSupport: Optional[NonIPSupport] = None
    availability: Optional[float] = None
    maxDLDataVolume: Optional[float] = None
    maxULDataVolume: Optional[float] = None
    kPIMonitoring: Optional[KPIMonitoring] = None


class TopSliceSubnetProfile(BaseModel):
    dLLatency: Optional[int] = None
    uLLatency: Optional[int] = None
    maxNumberofUEs: Optional[int] = None
    dLThptPerSliceSubnet: Optional[XLThpt] = None
    dLThptPerUE: Optional[XLThpt] = None
    uLThptPerSliceSubnet: Optional[XLThpt] = None
    uLThptPerUE: Optional[XLThpt] = None
    dLMaxPktSize: Optional[int] = None
    uLMaxPktSize: Optional[int] = None
    maxNumberOfPDUSessions: Optional[int] = None
    nROperatingBands: Optional[List[str]] = None
    sliceSimultaneousUse: Optional[SliceSimultaneousUse] = None
    energyEfficiency: Optional[EnergyEfficiency] = None
    synchronicity: Optional[Synchronicity] = None
    delayTolerance: Optional[DelayTolerance] = None
    positioning: Optional[Positioning] = None
    termDensity: Optional[TermDensity] = None
    activityFactor: Optional[int] = None
    coverageAreaTAList: Optional[TaiList] = None
    resourceSharingLevel: Optional[SharingLevel] = None
    uEMobilityLevel: Optional[MobilityLevel] = None
    uESpeed: Optional[int] = None
    dLReliability: Optional[float] = None
    uLReliability: Optional[float] = None
    dLDeterministicComm: Optional[DeterministicComm] = None
    uLDeterministicComm: Optional[DeterministicComm] = None
    survivalTime: Optional[float] = None
    nssaaSupport: Optional[NSSAASupport] = None
    n6Protection: Optional[N6Protection] = None
    nonIPSupport: Optional[NonIPSupport] = None
    availability: Optional[float] = None
    maxDLDataVolume: Optional[float] = None
    maxULDataVolume: Optional[float] = None
    kPIMonitoring: Optional[KPIMonitoring] = None
    supportedDataNetworks: Optional[DataNetwork] = None
    dataNetworkAccess: Optional[DataNetworkAccess] = None


class Attributes195(BaseModel):
    dLlatency: Optional[int] = None
    uLlatency: Optional[int] = None
    dLThptPerSliceSubnet: Optional[XLThpt] = None
    uLThptPerSliceSubnet: Optional[XLThpt] = None
    coverageAreaTAList: Optional[TaiList] = None


class CNSliceSubnetProfile(BaseModel):
    maxNumberofUEs: Optional[int] = None
    dLLatency: Optional[float] = None
    uLLatency: Optional[float] = None
    dLThptPerSliceSubnet: Optional[XLThpt] = None
    dLThptPerUE: Optional[XLThpt] = None
    uLThptPerSliceSubnet: Optional[XLThpt] = None
    uLThptPerUE: Optional[XLThpt] = None
    maxNumberOfPDUSessions: Optional[int] = None
    coverageAreaTAList: Optional[TaiList] = None
    resourceSharingLevel: Optional[SharingLevel] = None
    dLMaxPktSize: Optional[int] = None
    uLMaxPktSize: Optional[int] = None
    delayTolerance: Optional[DelayTolerance] = None
    sliceSimultaneousUse: Optional[SliceSimultaneousUse] = None
    dLReliability: Optional[float] = None
    uLReliability: Optional[float] = None
    energyEfficiency: Optional[float] = None
    dLDeterministicComm: Optional[DeterministicComm] = None
    uLDeterministicComm: Optional[DeterministicComm] = None
    survivalTime: Optional[float] = None
    nssaaSupport: Optional[NSSAASupport] = None
    n6Protection: Optional[N6Protection] = None
    nonIPSupport: Optional[NonIPSupport] = None
    availability: Optional[float] = None
    maxDLDataVolume: Optional[float] = None
    maxULDataVolume: Optional[float] = None
    supportedDataNetworks: Optional[DataNetwork] = None
    dataNetworkAccess: Optional[DataNetworkAccess] = None


class NFProfileList(BaseModel):
    __root__: List[NFProfile] = Field(..., description='List of NF profile')


class ComplexQuery(BaseModel):
    __root__: Union[Cnf, Dnf]


class UserLocation(BaseModel):
    eutraLocation: Optional[EutraLocation] = None
    nrLocation: Optional[NrLocation] = None
    n3gaLocation: Optional[N3gaLocation] = None
    utraLocation: Optional[UtraLocation] = None
    geraLocation: Optional[GeraLocation] = None


class Pc5QoSPara(BaseModel):
    pc5QosFlowList: List[Pc5QosFlowItem]
    pc5LinkAmbr: Optional[BitRate] = None


class SmPolicyContextData(BaseModel):
    accNetChId: Optional[AccNetChId] = None
    chargEntityAddr: Optional[AccNetChargingAddress] = None
    gpsi: Optional[Gpsi] = None
    supi: Supi
    invalidSupi: Optional[bool] = Field(
        None,
        description='When this attribute is included and set to true, it indicates that the supi attribute contains an invalid value.This attribute shall be present if the SUPI is not available in the SMF or the SUPI is unauthenticated. When present it shall be set to true for an invalid SUPI and false (default) for a valid SUPI.',
    )
    interGrpIds: Optional[List[GroupId]] = Field(None, min_items=1)
    pduSessionId: PduSessionId
    pduSessionType: PduSessionType
    chargingcharacteristics: Optional[str] = None
    dnn: Dnn
    notificationUri: Uri
    accessType: Optional[AccessType] = None
    ratType: Optional[RatType] = None
    addAccessInfo: Optional[AdditionalAccessInfo] = None
    servingNetwork: Optional[PlmnIdNid] = None
    userLocationInfo: Optional[UserLocation] = None
    ueTimeZone: Optional[TimeZone] = None
    pei: Optional[Pei] = None
    ipv4Address: Optional[Ipv4Addr] = None
    ipv6AddressPrefix: Optional[Ipv6Prefix] = None
    ipDomain: Optional[str] = Field(
        None, description='Indicates the IPv4 address domain'
    )
    subsSessAmbr: Optional[Ambr] = None
    authProfIndex: Optional[str] = Field(
        None, description='Indicates the DN-AAA authorization profile index'
    )
    subsDefQos: Optional[SubscribedDefaultQos] = None
    numOfPackFilter: Optional[int] = Field(
        None,
        description='Contains the number of supported packet filter for signalled QoS rules.',
    )
    online: Optional[bool] = Field(
        None,
        description='If it is included and set to true, the online charging is applied to the PDU session.',
    )
    offline: Optional[bool] = Field(
        None,
        description='If it is included and set to true, the offline charging is applied to the PDU session.',
    )
    field_3gppPsDataOffStatus: Optional[bool] = Field(
        None,
        alias='3gppPsDataOffStatus',
        description='If it is included and set to true, the 3GPP PS Data Off is activated by the UE.',
    )
    refQosIndication: Optional[bool] = Field(
        None,
        description='If it is included and set to true, the reflective QoS is supported by the UE.',
    )
    traceReq: Optional[TraceData] = None
    sliceInfo: Snssai1
    qosFlowUsage: Optional[QosFlowUsage] = None
    servNfId: Optional[ServingNfIdentity] = None
    suppFeat: Optional[SupportedFeatures] = None
    smfId: Optional[NfInstanceId] = None
    recoveryTime: Optional[DateTime] = None
    maPduInd: Optional[MaPduIndication] = None
    atsssCapab: Optional[AtsssCapabilityModel] = None
    ipv4FrameRouteList: Optional[List[Ipv4AddrMask]] = Field(None, min_items=1)
    ipv6FrameRouteList: Optional[List[Ipv6Prefix]] = Field(None, min_items=1)


class SmPolicyDecision(BaseModel):
    sessRules: Optional[Dict[str, SessionRule]] = Field(
        None,
        description='A map of Sessionrules with the content being the SessionRule as described in subclause 5.6.2.7.',
    )
    pccRules: Optional[Dict[str, PccRule]] = Field(
        None,
        description='A map of PCC rules with the content being the PCCRule as described in subclause 5.6.2.6.',
    )
    pcscfRestIndication: Optional[bool] = Field(
        None,
        description='If it is included and set to true, it indicates the P-CSCF Restoration is requested.',
    )
    qosDecs: Optional[Dict[str, QosData]] = Field(
        None, description='Map of QoS data policy decisions.'
    )
    chgDecs: Optional[Dict[str, ChargingData]] = Field(
        None, description='Map of Charging data policy decisions.'
    )
    chargingInfo: Optional[ChargingInformation] = None
    traffContDecs: Optional[Dict[str, TrafficControlData]] = Field(
        None, description='Map of Traffic Control data policy decisions.'
    )
    umDecs: Optional[Dict[str, UsageMonitoringData]] = Field(
        None, description='Map of Usage Monitoring data policy decisions.'
    )
    qosChars: Optional[Dict[str, QosCharacteristics]] = Field(
        None,
        description='Map of QoS characteristics for non standard 5QIs. This map uses the 5QI values as keys.',
    )
    qosMonDecs: Optional[Dict[str, QosMonitoringData]] = Field(
        None, description='Map of QoS Monitoring data policy decisions.'
    )
    reflectiveQoSTimer: Optional[DurationSec] = None
    conds: Optional[Dict[str, ConditionData]] = Field(
        None,
        description='A map of condition data with the content being as described in subclause 5.6.2.9.',
    )
    revalidationTime: Optional[DateTime] = None
    offline: Optional[bool] = Field(
        None,
        description='Indicates the offline charging is applicable to the PDU session when it is included and set to true.',
    )
    online: Optional[bool] = Field(
        None,
        description='Indicates the online charging is applicable to the PDU session when it is included and set to true.',
    )
    policyCtrlReqTriggers: Optional[List[PolicyControlRequestTrigger]] = Field(
        None,
        description='Defines the policy control request triggers subscribed by the PCF.',
        min_items=1,
    )
    lastReqRuleData: Optional[List[RequestedRuleData]] = Field(
        None,
        description='Defines the last list of rule control data requested by the PCF.',
        min_items=1,
    )
    lastReqUsageData: Optional[RequestedUsageData] = None
    praInfos: Optional[Dict[str, PresenceInfoRm]] = Field(
        None, description='Map of PRA information.'
    )
    qosFlowUsage: Optional[QosFlowUsage] = None
    relCause: Optional[SmPolicyAssociationReleaseCause] = None
    suppFeat: Optional[SupportedFeatures] = None
    tsnBridgeManCont: Optional[BridgeManagementContainer] = None
    tsnPortManContDstt: Optional[PortManagementContainer] = None
    tsnPortManContNwtts: Optional[List[PortManagementContainer]] = Field(
        None, min_items=1
    )
    redSessIndication: Optional[bool] = Field(
        None,
        description='Indicates whether the PDU session is a redundant PDU session. If absent it means the PDU session is not a redundant PDU session.',
    )


class SmPolicyNotification(BaseModel):
    resourceUri: Optional[Uri] = None
    smPolicyDecision: Optional[SmPolicyDecision] = None


class SmPolicyDeleteData(BaseModel):
    userLocationInfo: Optional[UserLocation] = None
    ueTimeZone: Optional[TimeZone] = None
    servingNetwork: Optional[PlmnIdNid] = None
    userLocationInfoTime: Optional[DateTime] = None
    ranNasRelCauses: Optional[List[RanNasRelCause]] = Field(
        None, description='Contains the RAN and/or NAS release cause.', min_items=1
    )
    accuUsageReports: Optional[List[AccuUsageReport]] = Field(
        None, description='Contains the usage report', min_items=1
    )
    pduSessRelCause: Optional[PduSessionRelCause] = None
    qosMonReports: Optional[List[QosMonitoringReport]] = Field(None, min_items=1)


class SmPolicyUpdateContextData(BaseModel):
    repPolicyCtrlReqTriggers: Optional[List[PolicyControlRequestTrigger]] = Field(
        None,
        description='The policy control reqeust trigges which are met.',
        min_items=1,
    )
    accNetChIds: Optional[List[AccNetChId]] = Field(
        None,
        description='Indicates the access network charging identifier for the PCC rule(s) or whole PDU session.',
        min_items=1,
    )
    accessType: Optional[AccessType] = None
    ratType: Optional[RatType] = None
    addAccessInfo: Optional[AdditionalAccessInfo] = None
    relAccessInfo: Optional[AdditionalAccessInfo] = None
    servingNetwork: Optional[PlmnIdNid] = None
    userLocationInfo: Optional[UserLocation] = None
    ueTimeZone: Optional[TimeZone] = None
    relIpv4Address: Optional[Ipv4Addr] = None
    ipv4Address: Optional[Ipv4Addr] = None
    ipDomain: Optional[str] = Field(
        None, description='Indicates the IPv4 address domain'
    )
    ipv6AddressPrefix: Optional[Ipv6Prefix] = None
    relIpv6AddressPrefix: Optional[Ipv6Prefix] = None
    addIpv6AddrPrefixes: Optional[Ipv6Prefix] = None
    addRelIpv6AddrPrefixes: Optional[Ipv6Prefix] = None
    relUeMac: Optional[MacAddr48] = None
    ueMac: Optional[MacAddr48] = None
    subsSessAmbr: Optional[Ambr] = None
    authProfIndex: Optional[str] = Field(
        None, description='Indicates the DN-AAA authorization profile index'
    )
    subsDefQos: Optional[SubscribedDefaultQos] = None
    vplmnQosNotApp: Optional[bool] = Field(
        None,
        description='If it is included and set to true, indicates that the QoS constraints in the VPLMN are not applicable.',
    )
    numOfPackFilter: Optional[int] = Field(
        None,
        description='Contains the number of supported packet filter for signalled QoS rules.',
    )
    accuUsageReports: Optional[List[AccuUsageReport]] = Field(
        None, description='Contains the usage report', min_items=1
    )
    field_3gppPsDataOffStatus: Optional[bool] = Field(
        None,
        alias='3gppPsDataOffStatus',
        description='If it is included and set to true, the 3GPP PS Data Off is activated by the UE.',
    )
    appDetectionInfos: Optional[List[AppDetectionInfo]] = Field(
        None,
        description='Report the start/stop of the application traffic and detected SDF descriptions if applicable.',
        min_items=1,
    )
    ruleReports: Optional[List[RuleReport]] = Field(
        None, description='Used to report the PCC rule failure.', min_items=1
    )
    sessRuleReports: Optional[List[SessionRuleReport]] = Field(
        None, description='Used to report the session rule failure.', min_items=1
    )
    qncReports: Optional[List[QosNotificationControlInfo]] = Field(
        None, description='QoS Notification Control information.', min_items=1
    )
    qosMonReports: Optional[List[QosMonitoringReport]] = Field(None, min_items=1)
    userLocationInfoTime: Optional[DateTime] = None
    repPraInfos: Optional[Dict[str, PresenceInfo]] = Field(
        None, description='Reports the changes of presence reporting area.'
    )
    ueInitResReq: Optional[UeInitiatedResourceRequest] = None
    refQosIndication: Optional[bool] = Field(
        None,
        description='If it is included and set to true, the reflective QoS is supported by the UE. If it is included and set to false, the reflective QoS is revoked by the UE.',
    )
    qosFlowUsage: Optional[QosFlowUsage] = None
    creditManageStatus: Optional[CreditManagementStatus] = None
    servNfId: Optional[ServingNfIdentity] = None
    traceReq: Optional[TraceData] = None
    maPduInd: Optional[MaPduIndication] = None
    atsssCapab: Optional[AtsssCapabilityModel] = None
    tsnBridgeInfo: Optional[TsnBridgeInfo] = None
    tsnBridgeManCont: Optional[BridgeManagementContainer] = None
    tsnPortManContDstt: Optional[PortManagementContainer] = None
    tsnPortManContNwtts: Optional[List[PortManagementContainer]] = Field(
        None, min_items=1
    )
    mulAddrInfos: Optional[List[IpMulticastAddressInfo]] = Field(None, min_items=1)
    policyDecFailureReports: Optional[List[PolicyDecisionFailureCode]] = Field(
        None,
        description='Contains the type(s) of failed policy decision and/or condition data.',
        min_items=1,
    )
    trafficDescriptors: Optional[List[DddTrafficDescriptor]] = Field(None, min_items=1)
    pccRuleId: Optional[str] = Field(
        None,
        description='Contains the identifier of the PCC rule which is used for traffic detection of event.',
    )
    interGrpIds: Optional[List[GroupId]] = Field(None, min_items=1)
    typesOfNotif: Optional[List[DlDataDeliveryStatus]] = Field(None, min_items=1)


class UeCampingRep(BaseModel):
    accessType: Optional[AccessType] = None
    ratType: Optional[RatType] = None
    servNfId: Optional[ServingNfIdentity] = None
    servingNetwork: Optional[PlmnIdNid] = None
    userLocationInfo: Optional[UserLocation] = None
    ueTimeZone: Optional[TimeZone] = None
    netLocAccSupp: Optional[NetLocAccessSupport] = None


class PartialSuccessReport(BaseModel):
    failureCause: FailureCause
    ruleReports: Optional[List[RuleReport]] = Field(
        None,
        description='Information about the PCC rules provisioned by the PCF not successfully installed/activated.',
        min_items=1,
    )
    sessRuleReports: Optional[List[SessionRuleReport]] = Field(
        None,
        description='Information about the session rules provisioned by the PCF not successfully installed.',
        min_items=1,
    )
    ueCampingRep: Optional[UeCampingRep] = None
    policyDecFailureReports: Optional[List[PolicyDecisionFailureCode]] = Field(
        None,
        description='Contains the type(s) of failed policy decision and/or condition data.',
        min_items=1,
    )


class MediaComponentRm(BaseModel):
    afAppId: Optional[AfAppId] = None
    afRoutReq: Optional[AfRoutingRequirementRm] = None
    qosReference: Optional[str] = None
    altSerReqs: Optional[List[str]] = Field(None, min_items=1)
    disUeNotif: Optional[bool] = None
    contVer: Optional[ContentVersion] = None
    codecs: Optional[List[CodecData]] = Field(None, max_items=2, min_items=1)
    desMaxLatency: Optional[FloatRm] = None
    desMaxLoss: Optional[FloatRm] = None
    flusId: Optional[str] = None
    fStatus: Optional[FlowStatus] = None
    marBwDl: Optional[BitRateRm] = None
    marBwUl: Optional[BitRateRm] = None
    maxPacketLossRateDl: Optional[PacketLossRateRm] = None
    maxPacketLossRateUl: Optional[PacketLossRateRm] = None
    maxSuppBwDl: Optional[BitRateRm] = None
    maxSuppBwUl: Optional[BitRateRm] = None
    medCompN: int
    medSubComps: Optional[Dict[str, MediaSubComponentRm]] = None
    medType: Optional[MediaType] = None
    minDesBwDl: Optional[BitRateRm] = None
    minDesBwUl: Optional[BitRateRm] = None
    mirBwDl: Optional[BitRateRm] = None
    mirBwUl: Optional[BitRateRm] = None
    preemptCap: Optional[PreemptionCapabilityRm] = None
    preemptVuln: Optional[PreemptionVulnerabilityRm] = None
    prioSharingInd: Optional[PrioritySharingIndicator] = None
    resPrio: Optional[ReservPriority] = None
    rrBw: Optional[BitRateRm] = None
    rsBw: Optional[BitRateRm] = None
    sharingKeyDl: Optional[Uint32Rm] = None
    sharingKeyUl: Optional[Uint32Rm] = None
    tsnQos: Optional[TsnQosContainerRm] = None
    tscaiInputDl: Optional[TscaiInputContainer] = None
    tscaiInputUl: Optional[TscaiInputContainer] = None


class EventsNotification(BaseModel):
    accessType: Optional[AccessType] = None
    addAccessInfo: Optional[AdditionalAccessInfo] = None
    relAccessInfo: Optional[AdditionalAccessInfo] = None
    anChargAddr: Optional[AccNetChargingAddress] = None
    anChargIds: Optional[List[AccessNetChargingIdentifier]] = Field(None, min_items=1)
    anGwAddr: Optional[AnGwAddress] = None
    evSubsUri: Uri
    evNotifs: List[AfEventNotification] = Field()
    @validator('evNotifs')
    def validate_min_items_evNotifs(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value
    failedResourcAllocReports: Optional[List[ResourcesAllocationInfo]] = Field(
        None, min_items=1
    )
    succResourcAllocReports: Optional[List[ResourcesAllocationInfo]] = Field(
        None, min_items=1
    )
    noNetLocSupp: Optional[NetLocAccessSupport] = None
    outOfCredReports: Optional[List[OutOfCreditInformation]] = Field(None, min_items=1)
    plmnId: Optional[PlmnIdNid] = None
    qncReports: Optional[List[QosNotificationControlInfoModel]] = Field(
        None, min_items=1
    )
    qosMonReports: Optional[List[QosMonitoringReportModel]] = Field(None, min_items=1)
    ranNasRelCauses: Optional[List[RanNasRelCause]] = Field(
        None, description='Contains the RAN and/or NAS release cause.', min_items=1
    )
    ratType: Optional[RatType] = None
    ueLoc: Optional[UserLocation] = None
    ueLocTime: Optional[DateTime] = None
    ueTimeZone: Optional[TimeZone] = None
    tsnBridgeManCont: Optional[BridgeManagementContainer] = None
    tsnPortManContDstt: Optional[PortManagementContainer] = None
    tsnPortManContNwtts: Optional[List[PortManagementContainer]] = Field(
        None, min_items=1
    )


class AfRoutingRequirement(BaseModel):
    appReloc: Optional[bool] = None
    routeToLocs: Optional[List[RouteToLocation]] = Field(None, min_items=1)
    spVal: Optional[SpatialValidity] = None
    tempVals: Optional[List[TemporalValidity]] = Field(None, min_items=1)
    upPathChgSub: Optional[UpPathChgEvent] = None
    addrPreserInd: Optional[bool] = None


class EventsSubscPutData(BaseModel):
    __root__: Union[EventsSubscReqData, EventsNotification] = Field(
        ...,
        description='Identifies the events the application subscribes to within an Events Subscription sub-resource data. It may contain the notification of the already met events',
    )


class EventSubscription(BaseModel):
    anySlice: Optional[AnySlice] = None
    appIds: Optional[List[ApplicationId]] = Field(
        None,
        description='Identification(s) of application to which the subscription applies.',
        min_items=1,
    )
    dnns: Optional[List[Dnn]] = Field(
        None,
        description='Identification(s) of DNN to which the subscription applies.',
        min_items=1,
    )
    dnais: Optional[List[Dnai]] = Field(None, min_items=1)
    event: NwdafEvent
    extraReportReq: Optional[EventReportingRequirement] = None
    ladnDnns: Optional[List[Dnn]] = Field(
        None,
        description='Identification(s) of LADN DNN to indicate the LADN service area as the AOI.',
        min_items=1,
    )
    loadLevelThreshold: Optional[int] = Field(
        None,
        description='Indicates that the NWDAF shall report the corresponding network slice load level to the NF  service consumer where the load level of the network slice identified by snssais is  reached.\n',
    )
    notificationMethod: Optional[NotificationMethod] = None
    matchingDir: Optional[MatchingDirection] = None
    nfLoadLvlThds: Optional[List[ThresholdLevel]] = Field(
        None,
        description='Shall be supplied in order to start reporting when an average load level is reached.\n',
        min_items=1,
    )
    nfInstanceIds: Optional[List[NfInstanceId]] = Field(None, min_items=1)
    nfSetIds: Optional[List[NfSetId]] = Field(None, min_items=1)
    maxTopAppUlNbr: Optional[Uinteger] = None
    maxTopAppDlNbr: Optional[Uinteger] = None
    nsiIdInfos: Optional[List[NsiIdInfo]] = Field(None, min_items=1)
    nsiLevelThrds: Optional[List[Uinteger]] = Field(None, min_items=1)
    qosRequ: Optional[QosRequirement] = None
    qosFlowRetThds: Optional[List[RetainabilityThreshold]] = Field(None, min_items=1)
    ranUeThrouThds: Optional[List[BitRate]] = Field(None, min_items=1)
    repetitionPeriod: Optional[DurationSec] = None
    snssaia: Optional[List[Snssai1]] = Field(
        None,
        description='Identification(s) of network slice to which the subscription applies. It corresponds to  snssais in the data model definition of 3GPP TS 29.520. \n',
        min_items=1,
    )
    tgtUe: Optional[TargetUeInformation] = None
    congThresholds: Optional[List[ThresholdLevel]] = Field(None, min_items=1)
    nwPerfRequs: Optional[List[NetworkPerfRequirement]] = Field(None, min_items=1)
    bwRequs: Optional[List[BwRequirement]] = Field(None, min_items=1)
    excepRequs: Optional[List[Exception]] = Field(None, min_items=1)
    exptAnaType: Optional[ExpectedAnalyticsType] = None
    ratFreqs: Optional[List[RatFreqInformation]] = Field(None, min_items=1)
    listOfAnaSubsets: Optional[List[AnalyticsSubset]] = Field(None, min_items=1)
    disperReqs: Optional[List[DispersionRequirement]] = Field(None, min_items=1)
    redTransReqs: Optional[List[RedundantTransmissionExpReq]] = Field(None, min_items=1)
    wlanReqs: Optional[List[WlanPerformanceReq]] = Field(None, min_items=1)
    dnPerfReqs: Optional[List[DnPerformanceReq]] = Field(None, min_items=1)


class LocationInfo(BaseModel):
    loc: UserLocation
    ratio: Optional[SamplingRatio] = None
    confidence: Optional[Uinteger] = None


class UeCommunication(BaseModel):
    commDur: DurationSec
    commDurVariance: Optional[Float] = None
    perioTime: Optional[DurationSec] = None
    perioTimeVariance: Optional[Float] = None
    ts: Optional[DateTime] = None
    tsVariance: Optional[Float] = None
    trafChar: TrafficCharacterization
    ratio: Optional[SamplingRatio] = None
    perioCommInd: Optional[bool] = None
    confidence: Optional[Uinteger] = None
    anaOfAppList: Optional[AppListForUeComm] = None
    sessInactTimer: Optional[SessInactTimerForUeComm] = None


class AbnormalBehaviour(BaseModel):
    supis: Optional[List[Supi]] = Field(None, min_items=1)
    excep: Exception
    dnn: Optional[Dnn] = None
    snssai: Optional[Snssai1] = None
    ratio: Optional[SamplingRatio] = None
    confidence: Optional[Uinteger] = None
    addtMeasInfo: Optional[AdditionalMeasurement] = None


class DispersionCollection(BaseModel):
    ueLoc: Optional[UserLocation] = None
    snssai: Optional[Snssai1] = None
    supis: Optional[List[Supi]] = Field(None, min_items=1)
    gpsis: Optional[List[Gpsi]] = Field(None, min_items=1)
    appVolumes: Optional[List[ApplicationVolume]] = Field(None, min_items=1)
    disperAmount: Optional[Uinteger] = None
    disperClass: Optional[DispersionClass] = None
    usageRank: Optional[conint(ge=1, le=3)] = Field(
        None, description='Integer where the allowed values correspond to 1, 2, 3 only.'
    )
    percentileRank: Optional[SamplingRatio] = None
    ueRatio: Optional[SamplingRatio] = None
    confidence: Optional[Uinteger] = None


class WlanPerformanceInfo(BaseModel):
    wlanPerSsidInfos: List[WlanPerSsIdPerformanceInfo] = Field()
    @validator('wlanPerSsidInfos')
    def validate_min_items_wlanPerSsidInfos(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value


class NrfInfo(BaseModel):
    servedUdrInfo: Optional[Dict[str, Union[UdrInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedUdrInfoList: Optional[
        Dict[str, Dict[str, Union[UdrInfo, EmptyObject]]]
    ] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedUdmInfo: Optional[Dict[str, Union[UdmInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedUdmInfoList: Optional[
        Dict[str, Dict[str, Union[UdmInfo, EmptyObject]]]
    ] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedAusfInfo: Optional[Dict[str, Union[AusfInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedAusfInfoList: Optional[
        Dict[str, Dict[str, Union[AusfInfo, EmptyObject]]]
    ] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedAmfInfo: Optional[Dict[str, Union[AmfInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedAmfInfoList: Optional[
        Dict[str, Dict[str, Union[AmfInfo, EmptyObject]]]
    ] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedSmfInfo: Optional[Dict[str, Union[SmfInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedSmfInfoList: Optional[
        Dict[str, Dict[str, Union[SmfInfo, EmptyObject]]]
    ] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedUpfInfo: Optional[Dict[str, Union[UpfInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedUpfInfoList: Optional[
        Dict[str, Dict[str, Union[UpfInfo, EmptyObject]]]
    ] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedPcfInfo: Optional[Dict[str, Union[PcfInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedPcfInfoList: Optional[
        Dict[str, Dict[str, Union[PcfInfo, EmptyObject]]]
    ] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedBsfInfo: Optional[Dict[str, Union[BsfInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedBsfInfoList: Optional[
        Dict[str, Dict[str, Union[BsfInfo, EmptyObject]]]
    ] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedChfInfo: Optional[Dict[str, Union[ChfInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedChfInfoList: Optional[
        Dict[str, Dict[str, Union[ChfInfo, EmptyObject]]]
    ] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedNefInfo: Optional[Dict[str, Union[NefInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedNwdafInfo: Optional[Dict[str, Union[NwdafInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedNwdafInfoList: Optional[Dict[str, Dict[str, NwdafInfo]]] = Field(
        None,
        description='A map (list of key-value pairs) where NF Instance Id serves as key',
    )
    servedGmlcInfo: Optional[Dict[str, Union[GmlcInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedLmfInfo: Optional[Dict[str, Union[LmfInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedHssInfoList: Optional[
        Dict[str, Dict[str, Union[HssInfo, EmptyObject]]]
    ] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedUdsfInfo: Optional[Dict[str, Union[UdsfInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedUdsfInfoList: Optional[
        Dict[str, Dict[str, Union[UdsfInfo, EmptyObject]]]
    ] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedScpInfoList: Optional[Dict[str, Union[ScpInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedSeppInfoList: Optional[Dict[str, Union[SeppInfo, EmptyObject]]] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedAanfInfoList: Optional[
        Dict[str, Dict[str, Union[AanfInfo, EmptyObject]]]
    ] = Field(
        None,
        description='A map (list of key-value pairs) where NF Instance Id serves as key',
    )
    served5gDdnmfInfo: Optional[Dict[str, Field5GDdnmfInfo]] = None
    servedMfafInfoList: Optional[Dict[str, MfafInfo]] = Field(
        None,
        description='A map (list of key-value pairs) where NF Instance Id serves as key',
    )
    servedEasdfInfoList: Optional[Dict[str, Dict[str, EasdfInfo]]] = Field(
        None,
        description='A map (list of key-value pairs) where NF Instance Id serves as key',
    )
    servedDccfInfoList: Optional[Dict[str, DccfInfo]] = Field(
        None,
        description='A map (list of key-value pairs) where NF Instance Id serves as key',
    )
    servedMbSmfInfoList: Optional[
        Dict[str, Dict[str, Union[MbSmfInfo, EmptyObject]]]
    ] = Field(
        None,
        description='A map (list of key-value pairs) where nfInstanceId serves as key',
    )
    servedTsctsfInfoList: Optional[Dict[str, Dict[str, TsctsfInfo]]] = Field(
        None,
        description='A map (list of key-value pairs) where NF Instance Id serves as key',
    )
    servedMbUpfInfoList: Optional[Dict[str, Dict[str, MbUpfInfo]]] = Field(
        None,
        description='A map (list of key-value pairs) where NF Instance Id serves as key',
    )
    servedTrustAfInfo: Optional[Dict[str, TrustAfInfo]] = Field(
        None,
        description='A map (list of key-value pairs) where NF Instance Id serves as key',
    )
    servedNssaafInfo: Optional[Dict[str, NssaafInfo]] = Field(
        None,
        description='A map (list of key-value pairs) where NF Instance Id serves as key',
    )


class MbsServiceAreaInfo(BaseModel):
    areaSessionId: conint(ge=0, le=65535)
    mbsServiceArea: MbsServiceArea


class Attributes29(ManagedFunctionAttr):
    plmnInfoList: Optional[PlmnInfoList] = None
    sBIFqdn: Optional[str] = None
    cNSIIdList: Optional[CNSIIdList] = None
    nFProfileList: Optional[NFProfileList] = None
    nrfInfo: Optional[NrfInfo] = None


class ServingLocation(BaseModel):
    geographicalLocation: Optional[GeoLoc] = None
    topologicalLocation: Optional[TopologicalServiceArea] = None


class EDNConnectionInfo(BaseModel):
    dNN: Optional[str] = None
    eDNServiceArea: Optional[ServingLocation] = None


class Attributes43(ManagedFunctionAttr):
    eESIdentifier: Optional[str] = None
    eESServingLocation: Optional[List[ServingLocation]] = None
    eESAddress: Optional[List[str]] = None
    softwareImageInfo: Optional[SoftwareImageInfo] = None
    serviceContinuitySupport: Optional[bool] = None
    eASFunctonRef: Optional[DnList] = None


class Attributes97(ManagedFunctionAttr):
    pLMNInfoList: Optional[PlmnInfoList] = None
    sBIFqdn: Optional[str] = None
    cNSIIdList: Optional[CNSIIdList] = None
    nFProfileList: Optional[NFProfileList] = None
    commModelList: Optional[CommModelList] = None
    nssafInfo: Optional[NssaafInfo] = None


class MDAOutputPerMDAType(BaseModel):
    mDAType: Optional[str] = None
    mDAOutputIEFilters: Optional[List[MDAOutputIEFilter]] = None


class ExpectationObject(BaseModel):
    objectType: Optional[ObjectType] = None
    objectInstance: Optional[Dn] = None
    contextSelectivity: Optional[Selectivity] = None
    objectContexts: Optional[List[Context]] = Field(
        None,
        description='It describes the list of Context(s) which represents the constraints and conditions to be  used as filter information to identify the object(s) to which a given intentExpectation should apply.',
    )


class ExpectationTarget(BaseModel):
    targetName: Optional[str] = None
    targetCondition: Optional[Condition] = None
    targetValueRange: Optional[Union[List[ValueRangeType], ValueRangeType]] = None
    contextSelectivity: Optional[Selectivity] = None
    targetContexts: Optional[List[Context]] = Field(
        None,
        description='It describes the list of constraints and conditions that should apply for a specific expectationTarget.',
    )


class RadioServiceExpectation(BaseModel):
    expectationId: str
    expectationVerb: Optional[ExpectationVerb] = None
    expectationObject: Optional[RadioServiceExpectationObject] = None
    expectationTargets: Optional[
        List[
            Union[
                DLLatencyTarget,
                ULLatencyTarget,
                DLThptPerUETarget,
                ULThptPerUETarget,
                ExpectationTarget,
            ]
        ]
    ] = None
    expectationContexts: Optional[List[Context]] = None


class EdgeServiceSupportExpectation(BaseModel):
    expectationId: str
    expectationVerb: Optional[ExpectationVerb] = None
    expectationObject: Optional[ServiceSupportExpectationObject] = None
    expectationTargets: Optional[
        List[
            Union[
                DLThptPerUETarget,
                ULThptPerUETarget,
                DLLatencyTarget,
                ULLatencyTarget,
                MaxNumberofUEsTarget,
                ActivityFactorTarget,
                UESpeedTarget,
                ExpectationTarget,
            ]
        ]
    ] = None
    expectationContexts: Optional[
        List[
            Union[
                ServiceStartTimeContext,
                ServiceEndTimeContext,
                UEMobilityLevelContext,
                ResourceSharingLevelContext,
                Context,
            ]
        ]
    ] = None


class Field5GCNetworkExpectation(BaseModel):
    expectationId: str
    expectationVerb: Optional[ExpectationVerb] = None
    expectationObjects: Optional[List[Field5GCNetworkExpectationObject]] = None
    expectationTargets: Optional[
        List[
            Union[
                MaxNumberofPDUsessionsTarget,
                MaxNumberofRegisteredsubscribersTarget,
                IncomingDataTarget,
                OutgoingDataTarget,
                ExpectationTarget,
            ]
        ]
    ] = None
    expectationContexts: Optional[
        List[Union[StartTimeContext, ResourceSharingLevelContext, Context]]
    ] = None
    expectationfulfilmentInfo: Optional[FulfilmentInfo] = None


class SliceProfile(BaseModel):
    sliceProfileId: Optional[str] = None
    plmnInfoList: Optional[PlmnInfoList] = None
    cNSliceSubnetProfile: Optional[CNSliceSubnetProfile] = None
    rANSliceSubnetProfile: Optional[RANSliceSubnetProfile] = None
    topSliceSubnetProfile: Optional[TopSliceSubnetProfile] = None


class SliceProfileList(BaseModel):
    __root__: List[SliceProfile]


class Attributes193(BaseModel):
    managedFunctionRefList: Optional[DnList] = None
    networkSliceSubnetRefList: Optional[DnList] = None
    operationalState: Optional[OperationalState] = None
    administrativeState: Optional[AdministrativeState] = None
    nsInfo: Optional[NsInfo] = None
    sliceProfileList: Optional[SliceProfileList] = None
    epTransportRefList: Optional[DnList] = None
    priorityLabel: Optional[int] = None
    networkSliceSubnetType: Optional[NetworkSliceSubnetType] = None
    networkSliceSubnetControllerRef: Optional[DnList] = None
    isolationProfileRef: Optional[Dn] = None


class Attributes196(BaseModel):
    profile: Optional[Union[SliceProfile, ServiceProfile]] = None
    resourceReservation: Optional[ResourceReservation] = None
    recommendationRequest: Optional[RecommendationRequest] = None
    requestedReservationExpiration: Optional[RequestedReservationExpiration] = None
    feasibilityTimeWindow: Optional[TimeWindow] = None
    processMonitor: Optional[ProcessMonitor] = None
    feasibilityResult: Optional[FeasibilityResult] = None
    inFeasibleReason: Optional[InFeasibleReason] = None
    resourceReservationStatus: Optional[ResourceReservationStatus1] = None
    reservationFailureReason: Optional[ReservationFailureReason] = None
    reservationExpiration: Optional[ReservationExpiration] = None
    recommendedRequirements: Optional[RecommendedRequirements] = None


class Attributes198(BaseModel):
    inputSliceProfile: Optional[SliceProfile] = None
    sliceProfileId: Optional[str] = None
    operationalState: Optional[OperationalState] = None
    administrativeState: Optional[AdministrativeState] = None
    availabilityStatus: Optional[AvailabilityStatus] = None
    processMonitor: Optional[ProcessMonitor] = None
    networkSliceSubnetRef: Optional[Dn] = None


class SmPolicyControl(BaseModel):
    context: SmPolicyContextData
    policy: SmPolicyDecision


class AppSessionContextUpdateData(BaseModel):
    afAppId: Optional[AfAppId] = None
    afRoutReq: Optional[AfRoutingRequirementRm] = None
    aspId: Optional[AspId] = None
    evSubsc: Optional[EventsSubscReqDataRm] = None
    mcpttId: Optional[str] = Field(
        None, description='indication of MCPTT service request'
    )
    mcVideoId: Optional[str] = Field(
        None, description='indication of modification of MCVideo service'
    )
    medComponents: Optional[Dict[str, MediaComponentRm]] = None
    mpsId: Optional[str] = Field(None, description='indication of MPS service request')
    mcsId: Optional[str] = Field(None, description='indication of MCS service request')
    preemptControlInfo: Optional[PreemptionControlInformationRm] = None
    resPrio: Optional[ReservPriority] = None
    servInfStatus: Optional[ServiceInfoStatus] = None
    sipForkInd: Optional[SipForkingIndication] = None
    sponId: Optional[SponId] = None
    sponStatus: Optional[SponsoringStatus] = None
    tsnBridgeManCont: Optional[BridgeManagementContainer] = None
    tsnPortManContDstt: Optional[PortManagementContainer] = None
    tsnPortManContNwtts: Optional[List[PortManagementContainer]] = Field(
        None, min_items=1
    )


class MediaComponent(BaseModel):
    afAppId: Optional[AfAppId] = None
    afRoutReq: Optional[AfRoutingRequirement] = None
    qosReference: Optional[str] = None
    disUeNotif: Optional[bool] = None
    altSerReqs: Optional[List[str]] = Field(None, min_items=1)
    contVer: Optional[ContentVersion] = None
    codecs: Optional[List[CodecData]] = Field(None, max_items=2, min_items=1)
    desMaxLatency: Optional[Float] = None
    desMaxLoss: Optional[Float] = None
    flusId: Optional[str] = None
    fStatus: Optional[FlowStatus] = None
    marBwDl: Optional[BitRate] = None
    marBwUl: Optional[BitRate] = None
    maxPacketLossRateDl: Optional[PacketLossRateRm] = None
    maxPacketLossRateUl: Optional[PacketLossRateRm] = None
    maxSuppBwDl: Optional[BitRate] = None
    maxSuppBwUl: Optional[BitRate] = None
    medCompN: int
    medSubComps: Optional[Dict[str, MediaSubComponent]] = None
    medType: Optional[MediaType] = None
    minDesBwDl: Optional[BitRate] = None
    minDesBwUl: Optional[BitRate] = None
    mirBwDl: Optional[BitRate] = None
    mirBwUl: Optional[BitRate] = None
    preemptCap: Optional[PreemptionCapability] = None
    preemptVuln: Optional[PreemptionVulnerability] = None
    prioSharingInd: Optional[PrioritySharingIndicator] = None
    resPrio: Optional[ReservPriority] = None
    rrBw: Optional[BitRate] = None
    rsBw: Optional[BitRate] = None
    sharingKeyDl: Optional[Uint32] = None
    sharingKeyUl: Optional[Uint32] = None
    tsnQos: Optional[TsnQosContainer] = None
    tscaiInputDl: Optional[TscaiInputContainer] = None
    tscaiInputUl: Optional[TscaiInputContainer] = None


class AcceptableServiceInfo(BaseModel):
    accBwMedComps: Optional[Dict[str, MediaComponent]] = None
    marBwUl: Optional[BitRate] = None
    marBwDl: Optional[BitRate] = None


class ExtendedProblemDetails(ProblemDetails):
    acceptableServInfo: Optional[AcceptableServiceInfo] = None


class ServiceExperienceInfo(BaseModel):
    svcExprcVariance: Optional[Float] = None
    supis: Optional[List[Supi]] = Field(None, min_items=1)
    snssai: Optional[Snssai1] = None
    appId: Optional[ApplicationId] = None
    srvExpcType: Optional[ServiceExperienceType] = None
    ueLocs: Optional[List[LocationInfo]] = Field(None, min_items=1)
    dnai: Optional[Dnai] = None
    confidence: Optional[Uinteger] = None
    dnn: Optional[Dnn] = None
    ratio: Optional[SamplingRatio] = None
    ratFreq: Optional[RatFreqInformation] = None


class UeMobility(BaseModel):
    ts: Optional[DateTime] = None
    duration: DurationSec
    durationVariance: Optional[Float] = None
    locInfos: List[LocationInfo] = Field()
    @validator('locInfos')
    def validate_min_items_locInfos(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value


class DispersionInfo(BaseModel):
    tsStart: DateTime
    tsDuration: DurationSec
    disperCollects: List[DispersionCollection] = Field()
    @validator('disperCollects')
    def validate_min_items_disperCollects(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value
    disperType: DispersionType


class AnalyticsData(BaseModel):
    start: Optional[DateTime] = None
    expiry: Optional[DateTime] = None
    timeStampGen: Optional[DateTime] = None
    anaMetaInfo: Optional[AnalyticsMetadataInfo] = None
    sliceLoadLevelInfos: Optional[List[SliceLoadLevelInformation]] = Field(
        None, description='The slices and their load level information.', min_items=1
    )
    nsiLoadLevelInfos: Optional[List[NsiLoadLevelInfo]] = Field(None, min_items=1)
    nfLoadLevelInfos: Optional[List[NfLoadLevelInformation]] = Field(None, min_items=1)
    nwPerfs: Optional[List[NetworkPerfInfo]] = Field(None, min_items=1)
    svcExps: Optional[List[ServiceExperienceInfo]] = Field(None, min_items=1)
    qosSustainInfos: Optional[List[QosSustainabilityInfo]] = Field(None, min_items=1)
    ueMobs: Optional[List[UeMobility]] = Field(None, min_items=1)
    ueComms: Optional[List[UeCommunication]] = Field(None, min_items=1)
    userDataCongInfos: Optional[List[UserDataCongestionInfo]] = Field(None, min_items=1)
    abnorBehavrs: Optional[List[AbnormalBehaviour]] = Field(None, min_items=1)
    smccExps: Optional[List[SmcceInfo]] = Field(None, min_items=1)
    disperInfos: Optional[List[DispersionInfo]] = Field(None, min_items=1)
    redTransInfos: Optional[List[RedundantTransmissionExpInfo]] = Field(
        None, min_items=1
    )
    wlanInfos: Optional[List[WlanPerformanceInfo]] = Field(None, min_items=1)
    dnPerfInfos: Optional[List[DnPerfInfo]] = Field(None, min_items=1)
    suppFeat: Optional[SupportedFeatures] = None


class Attributes41(BaseModel):
    eASServiceArea: Optional[ServingLocation] = None
    eESServiceArea: Optional[ServingLocation] = None
    eDNServiceArea: Optional[ServingLocation] = None
    eASIpAddress: Optional[str] = None
    eESIpAddress: Optional[str] = None
    eCSIpAddress: Optional[str] = None
    ednIdentifier: Optional[str] = None
    ecmConnectionType: Optional[EcmConnectionType] = None
    field_5GCNfConnEcmInfoList: Optional[Field5GCNfConnEcmInfoList] = Field(
        None, alias='5GCNfConnEcmInfoList'
    )
    uPFConnectionInfo: Optional[UPFConnectionInfo] = None


class MDAOutputs(BaseModel):
    __root__: List[MDAOutputPerMDAType]


class Attributes182(BaseModel):
    requestedMDAOutputs: Optional[MDAOutputs] = None
    reportingMethod: Optional[ReportingMethod1] = None
    reportingTarget: Optional[ReportingTarget] = None
    analyticsScope: Optional[AnalyticsScopeType] = None
    startTime: Optional[DateTime] = None
    stopTime: Optional[DateTime] = None


class RadioNetworkExpectation(BaseModel):
    expectationId: str
    expectationVerb: Optional[ExpectationVerb] = None
    expectationObject: Optional[RadioNetworkExpectationObject] = None
    expectationTargets: Optional[
        List[
            Union[
                WeakRSRPRatioTarget,
                LowSINRRatioTarget,
                AveULRANUEThptTarget,
                AveDLRANUEThptTarget,
                LowULRANUEThptRatioTarget,
                LowDLRANUEThptRatioTarget,
                HighULPrbLoadRatioTarget,
                HighDLPrbLoadRatioTarget,
                AveULPrbLoadTarget,
                AveDLPrbLoadTarget,
                RANEnergyConsumptionTarget,
                RANEnergyEfficiencyTarget,
                ExpectationTarget,
            ]
        ]
    ] = None
    expectationContexts: Optional[
        List[Union[TargetAssuranceTimeContext, Context]]
    ] = None


class IntentExpectation(BaseModel):
    expectationId: str = Field(
        ...,
        description='A unique identifier of the intentExpectation within the intent.',
    )
    expectationVerb: Optional[ExpectationVerb] = None
    expectationObject: Optional[ExpectationObject] = None
    expectationTargets: Optional[List[ExpectationTarget]] = None
    contextSelectivity: Optional[Selectivity] = None
    expectationContexts: Optional[List[Context]] = None


class AppSessionContextReqData1(BaseModel):
    afAppId: Optional[AfAppId] = None
    afChargId: Optional[ApplicationChargingId] = None
    afReqData: Optional[AfRequestedData] = None
    afRoutReq: Optional[AfRoutingRequirement] = None
    aspId: Optional[AspId] = None
    dnn: Optional[Dnn] = None
    evSubsc: Optional[EventsSubscReqData] = None
    mcpttId: Optional[str] = Field(
        None, description='indication of MCPTT service request'
    )
    mcVideoId: Optional[str] = Field(
        None, description='indication of MCVideo service request'
    )
    medComponents: Optional[Dict[str, MediaComponent]] = None
    ipDomain: Optional[str] = None
    mpsId: Optional[str] = Field(None, description='indication of MPS service request')
    mcsId: Optional[str] = Field(None, description='indication of MCS service request')
    preemptControlInfo: Optional[PreemptionControlInformation] = None
    resPrio: Optional[ReservPriority] = None
    servInfStatus: Optional[ServiceInfoStatus] = None
    notifUri: Uri
    servUrn: Optional[ServiceUrn] = None
    sliceInfo: Optional[Snssai1] = None
    sponId: Optional[SponId] = None
    sponStatus: Optional[SponsoringStatus] = None
    supi: Optional[Supi] = None
    gpsi: Optional[Gpsi] = None
    suppFeat: SupportedFeatures
    ueIpv4: Ipv4Addr
    ueIpv6: Optional[Ipv6Addr] = None
    ueMac: Optional[MacAddr48] = None
    tsnBridgeManCont: Optional[BridgeManagementContainer] = None
    tsnPortManContDstt: Optional[PortManagementContainer] = None
    tsnPortManContNwtts: Optional[List[PortManagementContainer]] = Field(
        None, min_items=1
    )


class AppSessionContextReqData2(BaseModel):
    afAppId: Optional[AfAppId] = None
    afChargId: Optional[ApplicationChargingId] = None
    afReqData: Optional[AfRequestedData] = None
    afRoutReq: Optional[AfRoutingRequirement] = None
    aspId: Optional[AspId] = None
    dnn: Optional[Dnn] = None
    evSubsc: Optional[EventsSubscReqData] = None
    mcpttId: Optional[str] = Field(
        None, description='indication of MCPTT service request'
    )
    mcVideoId: Optional[str] = Field(
        None, description='indication of MCVideo service request'
    )
    medComponents: Optional[Dict[str, MediaComponent]] = None
    ipDomain: Optional[str] = None
    mpsId: Optional[str] = Field(None, description='indication of MPS service request')
    mcsId: Optional[str] = Field(None, description='indication of MCS service request')
    preemptControlInfo: Optional[PreemptionControlInformation] = None
    resPrio: Optional[ReservPriority] = None
    servInfStatus: Optional[ServiceInfoStatus] = None
    notifUri: Uri
    servUrn: Optional[ServiceUrn] = None
    sliceInfo: Optional[Snssai1] = None
    sponId: Optional[SponId] = None
    sponStatus: Optional[SponsoringStatus] = None
    supi: Optional[Supi] = None
    gpsi: Optional[Gpsi] = None
    suppFeat: SupportedFeatures
    ueIpv4: Optional[Ipv4Addr] = None
    ueIpv6: Ipv6Addr
    ueMac: Optional[MacAddr48] = None
    tsnBridgeManCont: Optional[BridgeManagementContainer] = None
    tsnPortManContDstt: Optional[PortManagementContainer] = None
    tsnPortManContNwtts: Optional[List[PortManagementContainer]] = Field(
        None, min_items=1
    )


class AppSessionContextReqData3(BaseModel):
    afAppId: Optional[AfAppId] = None
    afChargId: Optional[ApplicationChargingId] = None
    afReqData: Optional[AfRequestedData] = None
    afRoutReq: Optional[AfRoutingRequirement] = None
    aspId: Optional[AspId] = None
    dnn: Optional[Dnn] = None
    evSubsc: Optional[EventsSubscReqData] = None
    mcpttId: Optional[str] = Field(
        None, description='indication of MCPTT service request'
    )
    mcVideoId: Optional[str] = Field(
        None, description='indication of MCVideo service request'
    )
    medComponents: Optional[Dict[str, MediaComponent]] = None
    ipDomain: Optional[str] = None
    mpsId: Optional[str] = Field(None, description='indication of MPS service request')
    mcsId: Optional[str] = Field(None, description='indication of MCS service request')
    preemptControlInfo: Optional[PreemptionControlInformation] = None
    resPrio: Optional[ReservPriority] = None
    servInfStatus: Optional[ServiceInfoStatus] = None
    notifUri: Uri
    servUrn: Optional[ServiceUrn] = None
    sliceInfo: Optional[Snssai1] = None
    sponId: Optional[SponId] = None
    sponStatus: Optional[SponsoringStatus] = None
    supi: Optional[Supi] = None
    gpsi: Optional[Gpsi] = None
    suppFeat: SupportedFeatures
    ueIpv4: Optional[Ipv4Addr] = None
    ueIpv6: Optional[Ipv6Addr] = None
    ueMac: MacAddr48
    tsnBridgeManCont: Optional[BridgeManagementContainer] = None
    tsnPortManContDstt: Optional[PortManagementContainer] = None
    tsnPortManContNwtts: Optional[List[PortManagementContainer]] = Field(
        None, min_items=1
    )


class AppSessionContextReqData(BaseModel):
    __root__: Union[
        AppSessionContextReqData1, AppSessionContextReqData2, AppSessionContextReqData3
    ] = Field(
        ...,
        description='Identifies the service requirements of an Individual Application Session Context.',
    )


class AppSessionContextUpdateDataPatch(BaseModel):
    ascReqData: Optional[AppSessionContextUpdateData] = None


class EventNotification(BaseModel):
    event: NwdafEvent
    start: Optional[DateTime] = None
    expiry: Optional[DateTime] = None
    timeStampGen: Optional[DateTime] = None
    failNotifyCode: Optional[NwdafFailureCode] = None
    rvWaitTime: Optional[DurationSec] = None
    anaMetaInfo: Optional[AnalyticsMetadataInfo] = None
    nfLoadLevelInfos: Optional[List[NfLoadLevelInformation]] = Field(None, min_items=1)
    nsiLoadLevelInfos: Optional[List[NsiLoadLevelInfo]] = Field(None, min_items=1)
    sliceLoadLevelInfo: Optional[SliceLoadLevelInformation] = None
    svcExps: Optional[List[ServiceExperienceInfo]] = Field(None, min_items=1)
    qosSustainInfos: Optional[List[QosSustainabilityInfo]] = Field(None, min_items=1)
    ueComms: Optional[List[UeCommunication]] = Field(None, min_items=1)
    ueMobs: Optional[List[UeMobility]] = Field(None, min_items=1)
    userDataCongInfos: Optional[List[UserDataCongestionInfo]] = Field(None, min_items=1)
    abnorBehavrs: Optional[List[AbnormalBehaviour]] = Field(None, min_items=1)
    nwPerfs: Optional[List[NetworkPerfInfo]] = Field(None, min_items=1)
    dnPerfInfos: Optional[List[DnPerfInfo]] = Field(None, min_items=1)
    disperInfos: Optional[List[DispersionInfo]] = Field(None, min_items=1)
    redTransInfos: Optional[List[RedundantTransmissionExpInfo]] = Field(
        None, min_items=1
    )
    wlanInfos: Optional[List[WlanPerformanceInfo]] = Field(None, min_items=1)


class AppSessionContext(BaseModel):
    ascReqData: Optional[AppSessionContextReqData] = None
    ascRespData: Optional[AppSessionContextRespData] = None
    evsNotif: Optional[EventsNotification] = None


class NnwdafEventsSubscription(BaseModel):
    eventSubscriptions: List[EventSubscription] = Field(
        ..., description='Subscribed events', min_items=1
    )
    notificationURI: Optional[Uri] = None
    notifCorrId: Optional[str] = Field(
        None, description='Notification correlation identifier.'
    )
    supportedFeatures: Optional[SupportedFeatures] = None
    eventNotifications: Optional[List[EventNotification]] = Field(None, min_items=1)
    failEventReports: Optional[List[FailureEventInfo]] = Field(None, min_items=1)
    prevSub: Optional[PrevSubInfo] = None
    consNfInfo: Optional[ConsumerNfInformation] = None


class NnwdafEventsSubscriptionNotification1(BaseModel):
    eventNotifications: List[EventNotification] = Field(
        ..., description='Notifications about Individual Events', min_items=1
    )
    subscriptionId: str = Field(
        ...,
        description='String identifying a subscription to the Nnwdaf_EventsSubscription Service',
    )
    notifCorrId: Optional[str] = Field(
        None, description='Notification correlation identifier.'
    )
    oldSubscriptionId: Optional[str] = Field(
        None,
        description='Subscription ID which was allocated by the source NWDAF. This parameter shall be present if the notification is for informing the assignment of a new Subscription Id by the target NWDAF.\n',
    )


class NnwdafEventsSubscriptionNotification2(BaseModel):
    eventNotifications: Optional[List[EventNotification]] = Field(
        None, description='Notifications about Individual Events', min_items=1
    )
    subscriptionId: str = Field(
        ...,
        description='String identifying a subscription to the Nnwdaf_EventsSubscription Service',
    )
    notifCorrId: Optional[str] = Field(
        None, description='Notification correlation identifier.'
    )
    oldSubscriptionId: str = Field(
        ...,
        description='Subscription ID which was allocated by the source NWDAF. This parameter shall be present if the notification is for informing the assignment of a new Subscription Id by the target NWDAF.\n',
    )


class NnwdafEventsSubscriptionNotification(BaseModel):
    __root__: Union[
        NnwdafEventsSubscriptionNotification1, NnwdafEventsSubscriptionNotification2
    ] = Field(
        ...,
        description='Represents an Individual NWDAF Event Subscription Notification resource.',
    )


class SubscriptionTransferInfo(BaseModel):
    transReqType: TransferRequestType
    nwdafEvSub: NnwdafEventsSubscription
    consumerId: NfInstanceId
    contextId: Optional[AnalyticsContextIdentifier] = None
    sourceNfIds: Optional[List[NfInstanceId]] = Field(None, min_items=1)
    sourceSetIds: Optional[List[NfSetId]] = Field(None, min_items=1)
    modelInfo: Optional[List[ModelInfo]] = Field(None, min_items=1)


class SpecificAnalyticsSubscription(BaseModel):
    subscriptionId: str
    producerId: Optional[NfInstanceId] = None
    producerSetId: Optional[NfSetId] = None
    nwdafEvSub: NnwdafEventsSubscription


class AnalyticsSubscriptionsTransfer(BaseModel):
    subsTransInfos: List[SubscriptionTransferInfo] = Field()
    @validator('subsTransInfos')
    def validate_min_items_subsTransInfos(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value


class ContextElement(BaseModel):
    contextId: AnalyticsContextIdentifier
    pendAnalytics: Optional[List[EventNotification]] = Field(
        None,
        description='Output analytics for the analytics subscription which have not yet been sent to the  analytics consumer.\n',
        min_items=1,
    )
    histAnalytics: Optional[List[EventNotification]] = Field(
        None, description='Historical output analytics.', min_items=1
    )
    lastOutputTime: Optional[DateTime] = None
    aggrSubs: Optional[List[SpecificAnalyticsSubscription]] = Field(
        None,
        description='Information about analytics subscriptions that the NWDAF has with other NWDAFs to perform  aggregation.\n',
        min_items=1,
    )
    histData: Optional[List[HistoricalData]] = Field(
        None,
        description='Historical data related to the analytics subscription.',
        min_items=1,
    )
    adrfId: Optional[NfInstanceId] = None
    adrfDataTypes: Optional[List[AdrfDataType]] = Field(
        None,
        description='Type(s) of data stored in the ADRF by the NWDAF.',
        min_items=1,
    )
    aggrNwdafIds: Optional[List[NfInstanceId]] = Field(
        None,
        description='NWDAF identifiers of NWDAF instances used by the NWDAF service consumer when aggregating  multiple analytics subscriptions.\n',
        min_items=1,
    )
    modelInfo: Optional[List[ModelInfo]] = Field(
        None,
        description='Contains information identifying the ML model(s) that the consumer NWDAF is currently subscribing for the analytics.\n',
        min_items=1,
    )


class ContextData(BaseModel):
    contextElems: List[ContextElement] = Field(
        ...,
        description='List of items that contain context information corresponding with a context identifier.\n',
        min_items=1,
    )


class Resource(BaseModel):
    __root__: Union[
        Resource1,
        Union[
            ResourcesGenericNrm,
            ResourcesNrNrm,
            Resources5gcNrm,
            ResourcesSliceNrm,
            ResourcesCoslaNrm,
            ResourcesIntentNrm,
            ResourcesMdaNrm,
            ResourcesAiMlNrm,
            ResourcesEdgeNrm,
            ResourcesRanScNrm,
        ],
    ]


class ResourcesGenericNrm(BaseModel):
    __root__: Union[
        VsDataContainerSingle,
        ManagementNodeSingle,
        MnsAgentSingle,
        MeContextSingle,
        ManagedNFServiceSingle,
        PerfMetricJobSingle,
        ThresholdMonitorSingle,
        ManagementDataCollectionSingle,
        NtfSubscriptionControlSingle,
        HeartbeatControlSingle,
        AlarmListSingle,
        FileDownloadJobSingle,
        FilesSingle,
        FileSingle,
        MnsRegistrySingle,
        MnsInfoSingle,
        SchedulerSingle,
        ConditionMonitorSingle,
        SupportedNotificationsSingle,
        QMCJobSingle,
        SubNetworkSingle,
        ManagedElementSingle,
    ]


class TopAttr(BaseModel):
    id: str
    objectClass: Optional[str] = None
    objectInstance: Optional[Dn] = None
    VsDataContainer: Optional[VsDataContainerMultiple] = None


class Top(BaseModel):
    id: str
    objectClass: Optional[str] = None
    objectInstance: Optional[Dn] = None
    VsDataContainer: Optional[VsDataContainerMultiple] = None


class SubNetworkNcO(BaseModel):
    ManagementNode: Optional[ManagementNodeMultiple] = None
    MnsAgent: Optional[MnsAgentMultiple] = None
    MeContext: Optional[MeContextMultiple] = None
    PerfMetricJob: Optional[PerfMetricJobMultiple] = None
    ThresholdMonitor: Optional[ThresholdMonitorMultiple] = None
    TraceJob: Optional[TraceJobMultiple] = None
    ManagementDataCollection: Optional[ManagementDataCollectionMultiple] = None
    NtfSubscriptionControl: Optional[NtfSubscriptionControlMultiple] = None
    AlarmList: Optional[AlarmListSingle] = None
    FileDownloadJob: Optional[FileDownloadJobMultiple] = None
    Files: Optional[FilesMultiple] = None
    MnsRegistry: Optional[MnsRegistrySingle] = None
    Scheduler: Optional[SchedulerMultiple] = None
    ConditionMonitor: Optional[ConditionMonitorMultiple] = None
    SupportedNotifications: Optional[SupportedNotificationsSingle] = None
    QMCJobs: Optional[QMCJobMultiple] = None


class TraceJobMultiple(BaseModel):
    __root__: List[TraceJobSingle]


class FilesMultiple(BaseModel):
    __root__: List[FilesSingle]


class ManagedElementNcO(BaseModel):
    MnsAgent: Optional[MnsAgentMultiple] = None
    PerfMetricJob: Optional[PerfMetricJobMultiple] = None
    ThresholdMonitor: Optional[ThresholdMonitorMultiple] = None
    TraceJob: Optional[TraceJobMultiple] = None
    NtfSubscriptionControl: Optional[NtfSubscriptionControlMultiple] = None
    AlarmList: Optional[AlarmListSingle] = None
    FileDownloadJob: Optional[FileDownloadJobMultiple] = None
    Files: Optional[FilesMultiple] = None
    Scheduler: Optional[SchedulerMultiple] = None
    ConditionMonitor: Optional[ConditionMonitorMultiple] = None
    SupportedNotifications: Optional[SupportedNotificationsSingle] = None
    QMCJobs: Optional[QMCJobMultiple] = None


class ManagedFunctionNcO(BaseModel):
    PerfMetricJob: Optional[PerfMetricJobMultiple] = None
    ThresholdMonitor: Optional[ThresholdMonitorMultiple] = None
    ManagedNFService: Optional[ManagedNFServiceMultiple] = None
    TraceJob: Optional[TraceJobMultiple] = None


class VsDataContainerSingle(BaseModel):
    id: Optional[str] = None
    attributes: Optional[Attributes] = None
    VsDataContainer: Optional[VsDataContainerMultiple] = None


class Attributes12(BaseModel):
    numberOfFiles: Optional[int] = None
    jobRef: Optional[Dn] = None
    jobId: Optional[str] = None
    File: Optional[FileMultiple] = None


class SubNetworkNcONrNrm(BaseModel):
    NRFrequency: Optional[NRFrequencyMultiple] = None
    ExternalGnbCuCpFunction: Optional[ExternalGnbCuCpFunctionMultiple] = None
    ExternalENBFunction: Optional[ExternalENBFunctionMultiple] = None
    EUtranFrequency: Optional[EUtranFrequencyMultiple] = None
    DESManagementFunction: Optional[DESManagementFunctionSingle] = None
    DRACHOptimizationFunction: Optional[DRACHOptimizationFunctionSingle] = None
    DMROFunction: Optional[DMROFunctionSingle] = None
    DLBOFunction: Optional[DLBOFunctionSingle] = None
    DPCIConfigurationFunction: Optional[DPCIConfigurationFunctionSingle] = None
    CPCIConfigurationFunction: Optional[CPCIConfigurationFunctionSingle] = None
    CESManagementFunction: Optional[CESManagementFunctionSingle] = None
    Configurable5QISet: Optional[Configurable5QISetMultiple] = None
    RimRSGlobal: Optional[RimRSGlobalSingle] = None
    Dynamic5QISet: Optional[Dynamic5QISetMultiple] = None
    CCOFunction: Optional[CCOFunctionSingle] = None


class Configurable5QISetMultiple(BaseModel):
    __root__: List[Configurable5QISetSingle]


class SubNetworkNcO5GcNrm(BaseModel):
    ExternalAmfFunction: Optional[ExternalAmfFunctionMultiple] = None
    ExternalNrfFunction: Optional[ExternalNrfFunctionMultiple] = None
    ExternalNssfFunction: Optional[ExternalNssfFunctionMultiple] = None
    AmfSet: Optional[AmfSetMultiple] = None
    AmfRegion: Optional[AmfRegionMultiple] = None
    Configurable5QISet: Optional[Configurable5QISetMultiple] = None
    Dynamic5QISet: Optional[Dynamic5QISetMultiple] = None
    EcmConnectionInfo: Optional[EcmConnectionInfoMultiple] = None


class ManagedElementNcO5GcNrm(BaseModel):
    AmfFunction: Optional[AmfFunctionMultiple] = None
    SmfFunction: Optional[SmfFunctionMultiple] = None
    UpfFunction: Optional[UpfFunctionMultiple] = None
    N3iwfFunction: Optional[N3iwfFunctionMultiple] = None
    PcfFunction: Optional[PcfFunctionMultiple] = None
    AusfFunction: Optional[AusfFunctionMultiple] = None
    UdmFunction: Optional[UdmFunctionMultiple] = None
    UdrFunction: Optional[UdrFunctionMultiple] = None
    UdsfFunction: Optional[UdsfFunctionMultiple] = None
    NrfFunction: Optional[NrfFunctionMultiple] = None
    NssfFunction: Optional[NssfFunctionMultiple] = None
    SmsfFunction: Optional[SmsfFunctionMultiple] = None
    LmfFunction: Optional[LmfFunctionMultiple] = None
    NgeirFunction: Optional[NgeirFunctionMultiple] = None
    SeppFunction: Optional[SeppFunctionMultiple] = None
    NwdafFunction: Optional[NwdafFunctionMultiple] = None
    ScpFunction: Optional[ScpFunctionMultiple] = None
    NefFunction: Optional[NefFunctionMultiple] = None
    Configurable5QISet: Optional[Configurable5QISetMultiple] = None
    Dynamic5QISet: Optional[Dynamic5QISetMultiple] = None
    EcmConnectionInfo: Optional[EcmConnectionInfoMultiple] = None
    EASDFFunction: Optional[EASDFFunctionMultiple] = None
    NSSAAFFunction: Optional[NssaafFunctionMultiple] = None
    AFFunction: Optional[AfFunctionMultiple] = None
    DCCFFunction: Optional[DccfFunctionMultiple] = None
    ChfFunction: Optional[ChfFunctionMultiple] = None
    MFAFFunction: Optional[MfafFunctionMultiple] = None
    GMLCFunction: Optional[GmlcFunctionMultiple] = None
    TSCTSFFunction: Optional[TsctsfFunctionMultiple] = None
    AANFFunction: Optional[AanfFunctionMultiple] = None
    BSFFunction: Optional[BsfFunctionMultiple] = None
    MBSMFFunction: Optional[MbSmfFunctionMultiple] = None
    MBUPFFunction: Optional[MbUpfFunctionMultiple] = None
    MNPFFunction: Optional[MnpfFunctionMultiple] = None


class MnS1(BaseModel):
    SubNetwork: Optional[List[SubNetworkNcO5GcNrm]] = None


class MnS2(BaseModel):
    ManagedElement: Optional[List[ManagedElementNcO5GcNrm]] = None


class MnS(BaseModel):
    __root__: Union[MnS1, MnS2]


class SubNetworkNcOEdgeNrm(BaseModel):
    ECSFunction: Optional[ECSFunctionMultiple] = None
    EdgeDataNetwork: Optional[EdgeDataNetworkMultiple] = None


class MnS4(BaseModel):
    SubNetwork: Optional[List[SubNetworkNcOEdgeNrm]] = None


class MnS3(BaseModel):
    __root__: MnS4


class EASFunctionMultiple(BaseModel):
    __root__: List[EASFunctionSingle]


class ECSFunctionMultiple(BaseModel):
    __root__: List[ECSFunctionSingle]


class EESFunctionMultiple(BaseModel):
    __root__: List[EESFunctionSingle]


class EdgeDataNetworkMultiple(BaseModel):
    __root__: List[EdgeDataNetworkSingle]


class EASProfileMultiple(BaseModel):
    __root__: List[EASProfileSingle]


class EdgeFederationMultiple(BaseModel):
    __root__: List[EASProfileSingle]


class OperatorEdgeFederationMultiple(BaseModel):
    __root__: List[OperatorEdgeFederationSingle]


class OperatorEdgeDataNetworkMultiple(BaseModel):
    __root__: List[OperatorEdgeDataNetworkSingle]


class ResourcesEdgeNrm(BaseModel):
    __root__: Union[
        MnS3,
        EASFunctionSingle,
        ECSFunctionSingle,
        EESFunctionSingle,
        EdgeDataNetworkSingle,
        EASRequirementsSingle,
        EASProfileSingle,
        EdgeFederationSingle,
        OperatorEdgeFederationSingle,
        OperatorEdgeDataNetworkSingle,
    ]


class FiveQICharacteristicsMultiple(BaseModel):
    __root__: List[FiveQICharacteristicsSingle]


class Attributes91(BaseModel):
    configurable5QIs: Optional[FiveQICharacteristicsMultiple] = None


class Attributes92(BaseModel):
    dynamic5QIs: Optional[FiveQICharacteristicsMultiple] = None


class AmfFunctionMultiple(BaseModel):
    __root__: List[AmfFunctionSingle]


class SmfFunctionMultiple(BaseModel):
    __root__: List[SmfFunctionSingle]


class UpfFunctionMultiple(BaseModel):
    __root__: List[UpfFunctionSingle]


class N3iwfFunctionMultiple(BaseModel):
    __root__: List[N3iwfFunctionSingle]


class PcfFunctionMultiple(BaseModel):
    __root__: List[PcfFunctionSingle]


class AusfFunctionMultiple(BaseModel):
    __root__: List[AusfFunctionSingle]


class UdmFunctionMultiple(BaseModel):
    __root__: List[UdmFunctionSingle]


class UdrFunctionMultiple(BaseModel):
    __root__: List[UdrFunctionSingle]


class UdsfFunctionMultiple(BaseModel):
    __root__: List[UdsfFunctionSingle]


class NrfFunctionMultiple(BaseModel):
    __root__: List[NrfFunctionSingle]


class NssfFunctionMultiple(BaseModel):
    __root__: List[NssfFunctionSingle]


class SmsfFunctionMultiple(BaseModel):
    __root__: List[SmsfFunctionSingle]


class LmfFunctionMultiple(BaseModel):
    __root__: List[LmfFunctionSingle]


class NgeirFunctionMultiple(BaseModel):
    __root__: List[NgeirFunctionSingle]


class SeppFunctionMultiple(BaseModel):
    __root__: List[SeppFunctionSingle]


class NwdafFunctionMultiple(BaseModel):
    __root__: List[NwdafFunctionSingle]


class ScpFunctionMultiple(BaseModel):
    __root__: List[ScpFunctionSingle]


class NefFunctionMultiple(BaseModel):
    __root__: List[NefFunctionSingle]


class NsacfFunctionMultiple(BaseModel):
    __root__: List[NsacfFunctionSingle]


class ExternalAmfFunctionMultiple(BaseModel):
    __root__: List[ExternalAmfFunctionSingle]


class ExternalNrfFunctionMultiple(BaseModel):
    __root__: List[ExternalNrfFunctionSingle]


class ExternalNssfFunctionMultiple(BaseModel):
    __root__: List[ExternalNssfFunctionSingle]


class ExternalSeppFunctionNultiple(BaseModel):
    __root__: List[ExternalSeppFunctionSingle]


class AmfSetMultiple(BaseModel):
    __root__: List[AmfSetSingle]


class AmfRegionMultiple(BaseModel):
    __root__: List[AmfRegionSingle]


class EASDFFunctionMultiple(BaseModel):
    __root__: List[EASDFFunctionSingle]


class EPN2Multiple(BaseModel):
    __root__: List[EPN2Single]


class EPN3Multiple(BaseModel):
    __root__: List[EPN3Single]


class EPN4Multiple(BaseModel):
    __root__: List[EPN4Single]


class EPN5Multiple(BaseModel):
    __root__: List[EPN5Single]


class EPN6Multiple(BaseModel):
    __root__: List[EPN6Single]


class EPN7Multiple(BaseModel):
    __root__: List[EPN7Single]


class EPN8Multiple(BaseModel):
    __root__: List[EPN8Single]


class EPN9Multiple(BaseModel):
    __root__: List[EPN9Single]


class EPN10Multiple(BaseModel):
    __root__: List[EPN10Single]


class EPN11Multiple(BaseModel):
    __root__: List[EPN11Single]


class EPN12Multiple(BaseModel):
    __root__: List[EPN12Single]


class EPN13Multiple(BaseModel):
    __root__: List[EPN13Single]


class EPN14Multiple(BaseModel):
    __root__: List[EPN14Single]


class EPN15Multiple(BaseModel):
    __root__: List[EPN15Single]


class EPN16Multiple(BaseModel):
    __root__: List[EPN16Single]


class EPN17Multiple(BaseModel):
    __root__: List[EPN17Single]


class EPN20Multiple(BaseModel):
    __root__: List[EPN20Single]


class EPN21Multiple(BaseModel):
    __root__: List[EPN21Single]


class EPN22Multiple(BaseModel):
    __root__: List[EPN22Single]


class EPN26Multiple(BaseModel):
    __root__: List[EPN26Single]


class EPN27Multiple(BaseModel):
    __root__: List[EPN27Single]


class EPN28Multiple(BaseModel):
    __root__: List[EPN28Single]


class EPN31Multiple(BaseModel):
    __root__: List[EPN31Single]


class EPN32Multiple(BaseModel):
    __root__: List[EPN32Single]


class EPN33Multiple(BaseModel):
    __root__: List[EPN33Single]


class EPN34Multiple(BaseModel):
    __root__: List[EPN34Single]


class EPN40Multiple(BaseModel):
    __root__: List[EPN40Single]


class EPN41Multiple(BaseModel):
    __root__: List[EPN41Single]


class EPN42Multiple(BaseModel):
    __root__: List[EPN42Single]


class EPS5CMultiple(BaseModel):
    __root__: List[EPS5CSingle]


class EPS5UMultiple(BaseModel):
    __root__: List[EPS5USingle]


class EPRxMultiple(BaseModel):
    __root__: List[EPRxSingle]


class EPMAPSMSCMultiple(BaseModel):
    __root__: List[EPMAPSMSCSingle]


class EPNLSMultiple(BaseModel):
    __root__: List[EPNLSSingle]


class EPNL2Multiple(BaseModel):
    __root__: List[EPNL2Single]


class EPNL3Multiple(BaseModel):
    __root__: List[EPNL3Single]


class EPNL5Multiple(BaseModel):
    __root__: List[EPNL5Single]


class EPNL6Multiple(BaseModel):
    __root__: List[EPNL6Single]


class EPNL9Multiple(BaseModel):
    __root__: List[EPNL9Single]


class EPN60Multiple(BaseModel):
    __root__: List[EPN60Single]


class EPN61Multiple(BaseModel):
    __root__: List[EPN61Single]


class EPN62Multiple(BaseModel):
    __root__: List[EPN62Single]


class EPN63Multiple(BaseModel):
    __root__: List[EPN63Single]


class EPNpc4Multiple(BaseModel):
    __root__: List[EPNpc4Single]


class EPNpc6Multiple(BaseModel):
    __root__: List[EPNpc6Single]


class EPNpc7Multiple(BaseModel):
    __root__: List[EPNpc7Single]


class EPNpc8Multiple(BaseModel):
    __root__: List[EPNpc8Single]


class EPN84Multiple(BaseModel):
    __root__: List[EPN84Single]


class EPN85Multiple(BaseModel):
    __root__: List[EPN85Single]


class EPN86Multiple(BaseModel):
    __root__: List[EPN86Single]


class EPN87Multiple(BaseModel):
    __root__: List[EPN87Single]


class EPN88Multiple(BaseModel):
    __root__: List[EPN88Single]


class EPN89Multiple(BaseModel):
    __root__: List[EPN89Single]


class EPN96Multiple(BaseModel):
    __root__: List[EPN96Single]


class EPN11mbMultiple(BaseModel):
    __root__: List[EPN11mbSingle]


class EPN16mbMultiple(BaseModel):
    __root__: List[EPN16mbSingle]


class EPNmb1Multiple(BaseModel):
    __root__: List[EPNmb1Single]


class EPN3mbMultiple(BaseModel):
    __root__: List[EPN3mbSingle]


class EPN4mbMultiple(BaseModel):
    __root__: List[EPN4mbSingle]


class EPN19mbMultiple(BaseModel):
    __root__: List[EPN19mbSingle]


class EPNmb9Multiple(BaseModel):
    __root__: List[EPNmb9Single]


class EPSM12Multiple(BaseModel):
    __root__: List[EPSM12Single]


class EPSM13Multiple(BaseModel):
    __root__: List[EPSM13Single]


class EPSM14Multiple(BaseModel):
    __root__: List[EPSM14Single]


class Dynamic5QISetMultiple(BaseModel):
    __root__: List[Dynamic5QISetSingle]


class EcmConnectionInfoMultiple(BaseModel):
    __root__: List[EcmConnectionInfoSingle]


class NssaafFunctionMultiple(BaseModel):
    __root__: List[NssaafFunctionSingle]


class EPN58Multiple(BaseModel):
    __root__: List[EPN58Single]


class EPN59Multiple(BaseModel):
    __root__: List[EPN59Single]


class AfFunctionMultiple(BaseModel):
    __root__: List[AfFunctionSingle]


class DccfFunctionMultiple(BaseModel):
    __root__: List[DccfFunctionSingle]


class ChfFunctionMultiple(BaseModel):
    __root__: List[ChfFunctionSingle]


class MfafFunctionMultiple(BaseModel):
    __root__: List[MfafFunctionSingle]


class GmlcFunctionMultiple(BaseModel):
    __root__: List[GmlcFunctionSingle]


class TsctsfFunctionMultiple(BaseModel):
    __root__: List[TsctsfFunctionSingle]


class AanfFunctionMultiple(BaseModel):
    __root__: List[AanfFunctionSingle]


class BsfFunctionMultiple(BaseModel):
    __root__: List[BsfFunctionSingle]


class MbSmfFunctionMultiple(BaseModel):
    __root__: List[MbSmfFunctionSingle]


class MbUpfFunctionMultiple(BaseModel):
    __root__: List[MbUpfFunctionSingle]


class MnpfFunctionMultiple(BaseModel):
    __root__: List[MnpfFunctionSingle]


class Resources5gcNrm(BaseModel):
    __root__: Union[
        MnS,
        AmfFunctionSingle,
        SmfFunctionSingle,
        UpfFunctionSingle,
        N3iwfFunctionSingle,
        PcfFunctionSingle,
        AusfFunctionSingle,
        UdmFunctionSingle,
        UdrFunctionSingle,
        UdsfFunctionSingle,
        NrfFunctionSingle,
        NssfFunctionSingle,
        SmsfFunctionSingle,
        LmfFunctionSingle,
        NgeirFunctionSingle,
        SeppFunctionSingle,
        NwdafFunctionSingle,
        ScpFunctionSingle,
        NefFunctionSingle,
        NsacfFunctionSingle,
        DDNMFFunctionSingle,
        ExternalAmfFunctionSingle,
        ExternalNrfFunctionSingle,
        ExternalNssfFunctionSingle,
        ExternalSeppFunctionSingle,
        AmfSetSingle,
        AmfRegionSingle,
        QFQoSMonitoringControlSingle,
        GtpUPathQoSMonitoringControlSingle,
        EPN2Single,
        EPN3Single,
        EPN4Single,
        EPN5Single,
        EPN6Single,
        EPN7Single,
        EPN8Single,
        EPN9Single,
        EPN10Single,
        EPN11Single,
        EPN12Single,
        EPN13Single,
        EPN14Single,
        EPN15Single,
        EPN16Single,
        EPN17Single,
        EPN20Single,
        EPN21Single,
        EPN22Single,
        EPN26Single,
        EPN27Single,
        EPN28Single,
        EPN31Single,
        EPN32Single,
        EPN33Single,
        EPN34Single,
        EPN40Single,
        EPN41Single,
        EPN42Single,
        EPN58Single,
        EPN59Single,
        EPN60Single,
        EPN61Single,
        EPN62Single,
        EPN63Single,
        EPN84Single,
        EPN85Single,
        EPN86Single,
        EPN87Single,
        EPN88Single,
        EPN89Single,
        EPN96Single,
        EPNpc4Single,
        EPNpc6Single,
        EPNpc7Single,
        EPNpc8Single,
        EPN3mbSingle,
        EPN4mbSingle,
        EPN19mbSingle,
        EPNmb9Single,
        EPS5CSingle,
        EPS5USingle,
        EPRxSingle,
        EPMAPSMSCSingle,
        EPNLSSingle,
        EPNL2Single,
        EPNL3Single,
        EPNL5Single,
        EPNL6Single,
        EPNL9Single,
        EPN11mbSingle,
        EPN16mbSingle,
        EPNmb1Single,
        EPSM12Single,
        EPSM13Single,
        EPSM14Single,
        Configurable5QISetSingle,
        FiveQiDscpMappingSetSingle,
        PredefinedPccRuleSetSingle,
        Dynamic5QISetSingle,
        EASDFFunctionSingle,
        EcmConnectionInfoSingle,
        NssaafFunctionSingle,
        AfFunctionSingle,
        DccfFunctionSingle,
        ChfFunctionSingle,
        MfafFunctionSingle,
        GmlcFunctionSingle,
        TsctsfFunctionSingle,
        AanfFunctionSingle,
        BsfFunctionSingle,
        MbSmfFunctionSingle,
        MbUpfFunctionSingle,
        MnpfFunctionSingle,
    ]


class ManagedElementNcONrNrm(BaseModel):
    GnbDuFunction: Optional[GnbDuFunctionMultiple] = None
    GnbCuUpFunction: Optional[GnbCuUpFunctionMultiple] = None
    GnbCuCpFunction: Optional[GnbCuCpFunctionMultiple] = None
    DESManagementFunction: Optional[DESManagementFunctionSingle] = None
    DRACHOptimizationFunction: Optional[DRACHOptimizationFunctionSingle] = None
    DMROFunction: Optional[DMROFunctionSingle] = None
    DLBOFunction: Optional[DLBOFunctionSingle] = None
    DPCIConfigurationFunction: Optional[DPCIConfigurationFunctionSingle] = None
    CPCIConfigurationFunction: Optional[CPCIConfigurationFunctionSingle] = None
    CESManagementFunction: Optional[CESManagementFunctionSingle] = None
    Configurable5QISet: Optional[Configurable5QISetMultiple] = None
    Dynamic5QISet: Optional[Dynamic5QISetMultiple] = None


class MnS6(BaseModel):
    SubNetwork: Optional[List[SubNetworkNcONrNrm]] = None


class MnS7(BaseModel):
    ManagedElement: Optional[List[ManagedElementNcONrNrm]] = None


class MnS5(BaseModel):
    __root__: Union[MnS6, MnS7]


class Attributes176(BaseModel):
    cCOControl: Optional[bool] = None
    cCOWeakCoverageParameters: Optional[CCOWeakCoverageParametersSingle] = None
    cCOPilotPollutionParameters: Optional[CCOPilotPollutionParametersSingle] = None
    cCOOvershootCoverageParameters_Single: Optional[
        CCOOvershootCoverageParametersSingle
    ] = Field(None, alias='cCOOvershootCoverageParameters-Single')


class GnbDuFunctionMultiple(BaseModel):
    __root__: List[GnbDuFunctionSingle]


class OperatorDuMultiple(BaseModel):
    __root__: List[OperatorDuSingle]


class GnbCuUpFunctionMultiple(BaseModel):
    __root__: List[GnbCuUpFunctionSingle]


class GnbCuCpFunctionMultiple(BaseModel):
    __root__: List[GnbCuCpFunctionSingle]


class BWPSetMultiple(BaseModel):
    __root__: List[BWPSetSingle]


class NrCellDuMultiple(BaseModel):
    __root__: List[NrCellDuSingle]


class NrOperatorCellDuMultiple(BaseModel):
    __root__: List[NrOperatorCellDuSingle]


class NrCellCuMultiple(BaseModel):
    __root__: List[NrCellCuSingle]


class NRFrequencyMultiple(BaseModel):
    __root__: List[NRFrequencySingle] = Field()
    @validator('__root__')
    def validate_min_items___root__(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value


class EUtranFrequencyMultiple(BaseModel):
    __root__: List[EUtranFrequencySingle] = Field()
    @validator('__root__')
    def validate_min_items___root__(cls, value):
        min_items_required = 1
        if len(value) < min_items_required:
            raise ValidationError(f'Minimum {min_items_required} items required in my_list')
        return value


class NrSectorCarrierMultiple(BaseModel):
    __root__: List[NrSectorCarrierSingle]


class BwpMultiple(BaseModel):
    __root__: List[BwpSingle]


class BeamMultiple(BaseModel):
    __root__: List[BeamSingle]


class RRMPolicyRatioMultiple(BaseModel):
    __root__: List[RRMPolicyRatioSingle]


class NRCellRelationMultiple(BaseModel):
    __root__: List[NRCellRelationSingle]


class EUtranCellRelationMultiple(BaseModel):
    __root__: List[EUtranCellRelationSingle]


class NRFreqRelationMultiple(BaseModel):
    __root__: List[NRFreqRelationSingle]


class EUtranFreqRelationMultiple(BaseModel):
    __root__: List[EUtranFreqRelationSingle]


class RimRSSetMultiple(BaseModel):
    __root__: List[RimRSSetSingle]


class ExternalGnbDuFunctionMultiple(BaseModel):
    __root__: List[ExternalGnbDuFunctionSingle]


class ExternalGnbCuUpFunctionMultiple(BaseModel):
    __root__: List[ExternalGnbCuUpFunctionSingle]


class ExternalGnbCuCpFunctionMultiple(BaseModel):
    __root__: List[ExternalGnbCuCpFunctionSingle]


class ExternalNrCellCuMultiple(BaseModel):
    __root__: List[ExternalNrCellCuSingle]


class ExternalENBFunctionMultiple(BaseModel):
    __root__: List[ExternalENBFunctionSingle]


class ExternalEUTranCellMultiple(BaseModel):
    __root__: List[ExternalEUTranCellSingle]


class EPE1Multiple(BaseModel):
    __root__: List[EPE1Single]


class EPXnCMultiple(BaseModel):
    __root__: List[EPXnCSingle]


class EPF1CMultiple(BaseModel):
    __root__: List[EPF1CSingle]


class EPNgCMultiple(BaseModel):
    __root__: List[EPNgCSingle]


class EPX2CMultiple(BaseModel):
    __root__: List[EPX2CSingle]


class EPXnUMultiple(BaseModel):
    __root__: List[EPXnUSingle]


class EPF1UMultiple(BaseModel):
    __root__: List[EPF1USingle]


class EPNgUMultiple(BaseModel):
    __root__: List[EPNgUSingle]


class EPX2UMultiple(BaseModel):
    __root__: List[EPX2USingle]


class EPS1UMultiple(BaseModel):
    __root__: List[EPS1USingle]


class EphemerisInfoSetMultiple(BaseModel):
    __root__: List[EphemerisInfoSetSingle]


class ResourcesNrNrm(BaseModel):
    __root__: Union[
        MnS5,
        GnbDuFunctionSingle,
        GnbCuUpFunctionSingle,
        GnbCuCpFunctionSingle,
        OperatorDuSingle,
        NrCellCuSingle,
        NrCellDuSingle,
        NrOperatorCellDuSingle,
        NRFrequencySingle,
        EUtranFrequencySingle,
        NrSectorCarrierSingle,
        BwpSingle,
        BWPSetSingle,
        CommonBeamformingFunctionSingle,
        BeamSingle,
        RRMPolicyRatioSingle,
        NRCellRelationSingle,
        EUtranCellRelationSingle,
        NRFreqRelationSingle,
        EUtranFreqRelationSingle,
        DANRManagementFunctionSingle,
        DESManagementFunctionSingle,
        DRACHOptimizationFunctionSingle,
        DMROFunctionSingle,
        DLBOFunctionSingle,
        DPCIConfigurationFunctionSingle,
        CPCIConfigurationFunctionSingle,
        CESManagementFunctionSingle,
        RimRSGlobalSingle,
        RimRSSetSingle,
        ExternalGnbDuFunctionSingle,
        ExternalGnbCuUpFunctionSingle,
        ExternalGnbCuCpFunctionSingle,
        ExternalNrCellCuSingle,
        ExternalENBFunctionSingle,
        ExternalEUTranCellSingle,
        EPXnCSingle,
        EPE1Single,
        EPF1CSingle,
        EPNgCSingle,
        EPX2CSingle,
        EPXnUSingle,
        EPF1USingle,
        EPNgUSingle,
        EPX2USingle,
        EPS1USingle,
        CCOFunctionSingle,
        CCOWeakCoverageParametersSingle,
        CCOPilotPollutionParametersSingle,
        CCOOvershootCoverageParametersSingle,
        NTNFunctionSingle,
        EphemerisInfoSetSingle,
    ]


class SubNetworkNcOMdaNrm(BaseModel):
    MDAFunction: Optional[MDAFunctionMultiple] = None
    MDAReport: Optional[MDAReportMultiple] = None


class ManagedElementNcOMdaNrm(BaseModel):
    MDAFunction: Optional[MDAFunctionMultiple] = None


class MDAReportSingle(BaseModel):
    __root__: MDAReport


class MDAFunctionMultiple(BaseModel):
    __root__: List[MDAFunctionSingle]


class MDARequestMultiple(BaseModel):
    __root__: List[MDARequestSingle]


class MDAReportMultiple(BaseModel):
    __root__: List[MDAReportSingle]


class ResourcesMdaNrm(BaseModel):
    __root__: Union[MDAFunctionSingle, MDARequestSingle, MDAReportSingle]


class SubNetworkNcOAiMlNrm(BaseModel):
    MLTrainingFunction: Optional[MLTrainingFunctionMultiple] = None
    MLEntityRepository: Optional[MLEntityRepositoryMultiple] = None


class ManagedElementNcOAiMlNrm(BaseModel):
    MLTrainingFunction: Optional[MLTrainingFunctionMultiple] = None
    MLEntityRepository: Optional[MLEntityRepositoryMultiple] = None


class MLTrainingFunctionMultiple(BaseModel):
    __root__: List[MLTrainingFunctionSingle]


class MLTrainingRequestMultiple(BaseModel):
    __root__: List[MLTrainingRequestSingle]


class MLTrainingProcessMultiple(BaseModel):
    __root__: List[MLTrainingProcessSingle]


class MLTrainingReportMultiple(BaseModel):
    __root__: List[MLTrainingReportSingle]


class MLEntityMultiple(BaseModel):
    __root__: List[MLEntitySingle]


class MLEntityRepositoryMultiple(BaseModel):
    __root__: List[MLEntityRepositorySingle]


class ResourcesAiMlNrm(BaseModel):
    __root__: Union[
        MLTrainingFunctionSingle,
        MLTrainingRequestSingle,
        MLTrainingProcessSingle,
        MLTrainingReportSingle,
        MLEntitySingle,
        MLEntityRepositorySingle,
    ]


class SubNetworkNcOIntentNrm(BaseModel):
    IntentHandlingFunction: Optional[IntentHandlingFunctionMultiple] = None


class IntentMultiple(BaseModel):
    __root__: List[IntentSingle]


class IntentReportMultiple(BaseModel):
    __root__: List[IntentReportSingle]


class IntentHandlingFunctionMultiple(BaseModel):
    __root__: List[IntentHandlingFunctionSingle]


class ResourcesIntentNrm(BaseModel):
    __root__: Union[IntentHandlingFunctionSingle, IntentSingle, IntentReportSingle]


class SubNetworkNcORanScNrm(BaseModel):
    ScMgmtProfile: Optional[ScMgmtProfileMultiple] = None
    Sc_Process: Optional[ScProcessMultiple] = None


class ScMgmtProfileMultiple(BaseModel):
    __root__: List[ScMgmtProfileSingle]


class ScProcessMultiple(BaseModel):
    __root__: List[ScProcessSingle]


class ResourcesRanScNrm(BaseModel):
    __root__: Union[ScMgmtProfileSingle, ScProcessSingle]


class SubNetworkNcOCoslaNrm(BaseModel):
    AssuranceClosedControlLoop: Optional[AssuranceClosedControlLoopMultiple] = None


class ManagedElementNcOCoslaNrm(BaseModel):
    AssuranceClosedControlLoop: Optional[AssuranceClosedControlLoopMultiple] = None


class MnS9(BaseModel):
    SubNetwork: Optional[List[SubNetworkNcOCoslaNrm]] = None


class MnS10(BaseModel):
    ManagedElement: Optional[List[ManagedElementNcOCoslaNrm]] = None


class MnS8(BaseModel):
    __root__: Union[MnS9, MnS10]


class AssuranceClosedControlLoopMultiple(BaseModel):
    __root__: List[AssuranceClosedControlLoopSingle]


class AssuranceGoalMultiple(BaseModel):
    __root__: List[AssuranceGoalSingle]


class ResourcesCoslaNrm(BaseModel):
    __root__: Union[
        MnS8,
        AssuranceClosedControlLoopSingle,
        AssuranceGoalSingle,
        AssuranceReportSingle,
    ]


class SubNetworkNcOSliceNrm(BaseModel):
    NetworkSlice: Optional[NetworkSliceMultiple] = None
    NetworkSliceSubnet: Optional[NetworkSliceSubnetMultiple] = None
    EP_Transport: Optional[EPTransportMultiple] = None
    NetworkSliceSubnetProviderCapabilities: Optional[
        NetworkSliceSubnetProviderCapabilitiesMultiple
    ] = None
    FeasibilityCheckAndReservationJob: Optional[
        FeasibilityCheckAndReservationJobMultiple
    ] = None
    NetworkSliceController: Optional[NetworkSliceControllerMultiple] = None
    NetworkSliceSubnetController: Optional[NetworkSliceSubnetControllerMultiple] = None
    IsolationProfile: Optional[IsolationProfileMultiple] = None


class MnS12(BaseModel):
    SubNetwork: Optional[List[SubNetworkNcOSliceNrm]] = None


class MnS11(BaseModel):
    __root__: MnS12


class NetworkSliceMultiple(BaseModel):
    __root__: List[NetworkSliceSingle]


class NetworkSliceSubnetMultiple(BaseModel):
    __root__: List[NetworkSliceSubnetSingle]


class EPTransportMultiple(BaseModel):
    __root__: List[EPTransportSingle]


class NetworkSliceSubnetProviderCapabilitiesMultiple(BaseModel):
    __root__: List[NetworkSliceSubnetProviderCapabilitiesSingle]


class FeasibilityCheckAndReservationJobMultiple(BaseModel):
    __root__: List[FeasibilityCheckAndReservationJobSingle]


class NetworkSliceControllerMultiple(BaseModel):
    __root__: List[NetworkSliceControllerSingle]


class NetworkSliceSubnetControllerMultiple(BaseModel):
    __root__: List[NetworkSliceSubnetControllerSingle]


class IsolationProfileMultiple(BaseModel):
    __root__: List[IsolationProfileSingle]


class ResourcesSliceNrm(BaseModel):
    __root__: Union[
        MnS11,
        NetworkSliceSingle,
        NetworkSliceSubnetSingle,
        EPTransportSingle,
        NetworkSliceSubnetProviderCapabilitiesSingle,
        FeasibilityCheckAndReservationJobSingle,
        NetworkSliceControllerSingle,
        NetworkSliceSubnetControllerSingle,
        IsolationProfileSingle,
    ]


class VsDataContainerMultiple(BaseModel):
    __root__: List[VsDataContainerSingle]


class ManagedNFServiceMultiple(BaseModel):
    __root__: List[ManagedNFServiceSingle]


class ManagementNodeMultiple(BaseModel):
    __root__: List[ManagementNodeSingle]


class MnsAgentMultiple(BaseModel):
    __root__: List[MnsAgentSingle]


class MeContextMultiple(BaseModel):
    __root__: List[MeContextSingle]


class PerfMetricJobMultiple(BaseModel):
    __root__: List[PerfMetricJobSingle]


class ThresholdMonitorMultiple(BaseModel):
    __root__: List[ThresholdMonitorSingle]


class ManagementDataCollectionMultiple(BaseModel):
    __root__: List[ManagementDataCollectionSingle]


class NtfSubscriptionControlMultiple(BaseModel):
    __root__: List[NtfSubscriptionControlSingle]


class FileDownloadJobMultiple(BaseModel):
    __root__: List[FileDownloadJobSingle]


class FileMultiple(BaseModel):
    __root__: List[FileSingle]


class MnsInfoMultiple(BaseModel):
    __root__: List[MnsInfoSingle]


class SchedulerMultiple(BaseModel):
    __root__: List[SchedulerSingle]


class ConditionMonitorMultiple(BaseModel):
    __root__: List[ConditionMonitorSingle]


class QMCJobMultiple(BaseModel):
    __root__: List[QMCJobSingle]


class SubNetworkMultiple(BaseModel):
    __root__: List[SubNetworkSingle]


class ManagedElementMultiple(BaseModel):
    __root__: List[ManagedElementSingle]


class ResourcesTraceControlNrm(BaseModel):
    __root__: TraceJobSingle


class TraceJobSingle(Top):
    attributes: Optional[TraceJobAttr] = None
    Files: Optional[FilesMultiple] = None


class ManagedNFServiceSingle(Top):
    attributes: Optional[Attributes1] = None


class ManagementNodeSingle(Top):
    attributes: Optional[Attributes2] = None
    MnsAgent: Optional[MnsAgentMultiple] = None


class MnsAgentSingle(Top):
    attributes: Optional[Attributes3] = None


class MeContextSingle(Top):
    attributes: Optional[Attributes4] = None


class PerfMetricJobSingle(Top):
    attributes: Optional[Attributes5] = None
    Files: Optional[FilesMultiple] = None


class ThresholdMonitorSingle(Top):
    attributes: Optional[Attributes6] = None


class NtfSubscriptionControlSingle(Top):
    attributes: Optional[Attributes7] = None
    HeartbeatControl: Optional[HeartbeatControlSingle] = None


class HeartbeatControlSingle(Top):
    attributes: Optional[Attributes8] = None


class ManagementDataCollectionSingle(Top):
    attributes: Optional[Attributes9] = None


class AlarmListSingle(Top):
    attributes: Optional[Attributes10] = None


class FileDownloadJobSingle(Top):
    attributes: Optional[Attributes11] = None


class FilesSingle(Top):
    attributes: Optional[Attributes12] = None


class FileSingle(Top):
    attributes: Optional[Attributes13] = None


class MnsRegistrySingle(Top):
    MnsInfo: Optional[MnsInfoMultiple] = None


class MnsInfoSingle(Top):
    mnsLabel: Optional[str] = None
    mnsType: Optional[MnsType] = None
    mnsVersion: Optional[str] = None
    mnsAddress: Optional[Uri] = Field(
        None,
        description='Resource URI as defined in the relevant Technical Specification',
    )
    mnsScope: Optional[List[Dn]] = Field(
        None,
        description='List of the managed object instances that can be accessed using the MnS. If a complete SubNetwork can be accessed using the MnS, this attribute may  contain the DN of the SubNetwork instead of the DNs of the individual managed  entities within the SubNetwork.',
    )


class SchedulerSingle(Top):
    attributes: Optional[Attributes14] = None


class ConditionMonitorSingle(Top):
    attributes: Optional[Attributes15] = None


class SupportedNotificationsSingle(Top):
    attributes: Optional[Attributes16] = None


class QMCJobSingle(Top):
    attributes: Optional[Attributes17] = None


class AmfSetSingle(Top):
    attributes: Optional[Attributes19] = None


class AmfRegionSingle(Top):
    attributes: Optional[Attributes20] = None


class UdrFunctionSingle(Top):
    attributes: Optional[Attributes27] = None


class UdsfFunctionSingle(Top):
    attributes: Optional[Attributes28] = None


class EcmConnectionInfoSingle(Top):
    attributes: Optional[Attributes41] = None


class EdgeDataNetworkSingle(Top):
    ednIdentifier: Optional[str] = None
    eDNConnectionInfo: Optional[EDNConnectionInfo] = None
    EASFunction: Optional[EASFunctionMultiple] = None
    EESFunction: Optional[EESFunctionMultiple] = None
    availableEdgeVirtualResources: Optional[str] = None


class EASProfileSingle(Top):
    aCID: Optional[str] = None
    eASProvider: Optional[str] = None
    eASdescription: Optional[str] = None
    eASSchedule: Optional[Duration] = None
    eASGeographicalServiceArea: Optional[GeoLoc] = None
    eASTopologicalServiceArea: Optional[TopologicalServiceArea] = None
    eASServicePermissionLevel: Optional[EASServicePermission] = None
    eASFeature: Optional[EASFeature] = None
    eASServiceContinuitySupport: Optional[bool] = None
    eASDNAI: Optional[str] = None
    eASAvailabilityReportingPeriod: Optional[int] = None
    eASStatus: Optional[EASStatus] = None


class EASRequirementsSingle(Top):
    requiredEASservingLocation: Optional[ServingLocation] = None
    affinityAntiAffinity: Optional[AffinityAntiAffinity] = None
    serviceContinuity: Optional[bool] = None
    virtualResource: Optional[VirtualResource] = None
    softwareImageInfo: Optional[SoftwareImageInfo] = None
    eASSchedule: Optional[Duration] = None
    eASFeature: Optional[EASFeature] = None
    relocationPolicy: Optional[EASFeature] = None
    federationID: Optional[str] = None
    reservationID: Optional[str] = None


class ResourceReservationJob(Top):
    reservationLocation: Optional[ServingLocation] = None
    resourceReservationRequirement: Optional[
        List[ResourceReservationRequirement]
    ] = None
    requestedReservationExpiration: Optional[str] = None
    resourceReservationStatus: Optional[List[ResourceReservationStatus]] = None


class EdgeFederationSingle(Top):
    participatingOPiD: Optional[str] = None
    originatingOPiD: Optional[str] = None


class OperatorEdgeFederationSingle(Top):
    federationID: Optional[str] = None
    FederationExpiry: Optional[DateTime] = None
    originatedOPiD: Optional[str] = None
    avaibleEDNList: Optional[AvailableEDNList] = None
    acceptedEDN: Optional[DnList] = None


class OperatorEdgeDataNetworkSingle(Top):
    availableVirtualResource: Optional[VirtualResource] = None
    availableEASResource: Optional[DnList] = None
    edgeDataNetworkRef: Optional[DnList] = None


class ExternalAmfFunctionSingle(Top):
    attributes: Optional[Attributes45] = None


class ExternalNrfFunctionSingle(Top):
    attributes: Optional[Attributes46] = None


class ExternalNssfFunctionSingle(Top):
    attributes: Optional[Attributes46] = None


class ExternalSeppFunctionSingle(Top):
    attributes: Optional[Attributes48] = None


class EPN2Single(Top):
    attributes: Optional[Attributes49] = None


class EPN3Single(Top):
    attributes: Optional[Attributes50] = None


class EPN4Single(Top):
    attributes: Optional[Attributes51] = None


class EPN5Single(Top):
    attributes: Optional[Attributes51] = None


class EPN6Single(Top):
    attributes: Optional[Attributes51] = None


class EPN7Single(Top):
    attributes: Optional[Attributes51] = None


class EPN8Single(Top):
    attributes: Optional[Attributes51] = None


class EPN9Single(Top):
    attributes: Optional[Attributes51] = None


class EPN10Single(Top):
    attributes: Optional[Attributes51] = None


class EPN11Single(Top):
    attributes: Optional[Attributes51] = None


class EPN12Single(Top):
    attributes: Optional[Attributes51] = None


class EPN13Single(Top):
    attributes: Optional[Attributes51] = None


class EPN14Single(Top):
    attributes: Optional[Attributes51] = None


class EPN15Single(Top):
    attributes: Optional[Attributes51] = None


class EPN16Single(Top):
    attributes: Optional[Attributes51] = None


class EPN17Single(Top):
    attributes: Optional[Attributes51] = None


class EPN20Single(Top):
    attributes: Optional[Attributes51] = None


class EPN21Single(Top):
    attributes: Optional[Attributes51] = None


class EPN22Single(Top):
    attributes: Optional[Attributes51] = None


class EPN26Single(Top):
    attributes: Optional[Attributes51] = None


class EPN27Single(Top):
    attributes: Optional[Attributes51] = None


class EPN31Single(Top):
    attributes: Optional[Attributes51] = None


class EPN32Single(Top):
    attributes: Optional[Attributes71] = None


class EPN33Single(Top):
    attributes: Optional[Attributes72] = None


class EPN34Single(Top):
    attributes: Optional[Attributes72] = None


class EPS5CSingle(Top):
    attributes: Optional[Attributes72] = None


class EPS5USingle(Top):
    attributes: Optional[Attributes72] = None


class EPRxSingle(Top):
    attributes: Optional[Attributes72] = None


class EPMAPSMSCSingle(Top):
    attributes: Optional[Attributes72] = None


class EPNLSSingle(Top):
    attributes: Optional[Attributes72] = None


class EPNL2Single(Top):
    attributes: Optional[Attributes72] = None


class EPNL3Single(Top):
    attributes: Optional[Attributes72] = None


class EPNL5Single(Top):
    attributes: Optional[Attributes72] = None


class EPNL6Single(Top):
    attributes: Optional[Attributes72] = None


class EPNL9Single(Top):
    attributes: Optional[Attributes72] = None


class EPN60Single(Top):
    attributes: Optional[Attributes72] = None


class EPNpc4Single(Top):
    attributes: Optional[Attributes72] = None


class EPNpc6Single(Top):
    attributes: Optional[Attributes72] = None


class EPNpc7Single(Top):
    attributes: Optional[Attributes72] = None


class EPNpc8Single(Top):
    attributes: Optional[Attributes72] = None


class EPN88Single(Top):
    attributes: Optional[Attributes72] = None


class FiveQiDscpMappingSetSingle(Top):
    attributes: Optional[Attributes90] = None


class FiveQICharacteristicsSingle(Top):
    fiveQIValue: Optional[int] = None
    resourceType: Optional[ResourceType1] = None
    priorityLevel: Optional[int] = None
    packetDelayBudget: Optional[int] = None
    packetErrorRate: Optional[PacketErrorRate] = None
    averagingWindow: Optional[int] = None
    maximumDataBurstVolume: Optional[int] = None


class Configurable5QISetSingle(Top):
    attributes: Optional[Attributes91] = None


class Dynamic5QISetSingle(Top):
    attributes: Optional[Attributes92] = None


class GtpUPathQoSMonitoringControlSingle(Top):
    attributes: Optional[Attributes93] = None


class QFQoSMonitoringControlSingle(Top):
    attributes: Optional[Attributes94] = None


class PredefinedPccRuleSetSingle(Top):
    attributes: Optional[Attributes95] = None


class EPN58Single(Top):
    attributes: Optional[Attributes98] = None


class EPN59Single(Top):
    attributes: Optional[Attributes98] = None


class EPN28Single(Top):
    attributes: Optional[Attributes98] = None


class EPN40Single(Top):
    attributes: Optional[Attributes98] = None


class EPN41Single(Top):
    attributes: Optional[Attributes98] = None


class EPN42Single(Top):
    attributes: Optional[Attributes98] = None


class EPN61Single(Top):
    attributes: Optional[Attributes98] = None


class EPN62Single(Top):
    attributes: Optional[Attributes98] = None


class EPN63Single(Top):
    attributes: Optional[Attributes98] = None


class EPN84Single(Top):
    attributes: Optional[Attributes98] = None


class EPN85Single(Top):
    attributes: Optional[Attributes98] = None


class EPN86Single(Top):
    attributes: Optional[Attributes98] = None


class EPN87Single(Top):
    attributes: Optional[Attributes98] = None


class EPN89Single(Top):
    attributes: Optional[Attributes98] = None


class EPN96Single(Top):
    attributes: Optional[Attributes98] = None


class EPN11mbSingle(Top):
    attributes: Optional[Attributes98] = None


class EPN16mbSingle(Top):
    attributes: Optional[Attributes98] = None


class EPNmb1Single(Top):
    attributes: Optional[Attributes98] = None


class EPN3mbSingle(Top):
    attributes: Optional[Attributes98] = None


class EPN4mbSingle(Top):
    attributes: Optional[Attributes98] = None


class EPN19mbSingle(Top):
    attributes: Optional[Attributes98] = None


class EPNmb9Single(Top):
    attributes: Optional[Attributes98] = None


class AnLFFunctionSingle(Top):
    attributes: Optional[Attributes130] = None


class EPSM12Single(Top):
    attributes: Optional[Attributes131] = None


class EPSM13Single(Top):
    attributes: Optional[Attributes131] = None


class EPSM14Single(Top):
    attributes: Optional[Attributes131] = None


class OperatorDuSingle(Top):
    gnbId: Optional[GnbId] = None
    gnbIdLength: Optional[GnbIdLength] = None
    EP_F1C: Optional[EPF1CSingle] = None
    EP_F1U: Optional[EPF1UMultiple] = None
    configurable5QISetRef: Optional[Dn] = Field(
        None,
        description='This attribute is condition optional. The condition is NG-RAN Multi-Operator Core Network (NG-RAN MOCN) network sharing with operator specific 5QI is supported.',
    )
    dynamic5QISetRef: Optional[Dn] = Field(
        None,
        description='This attribute is condition optional. The condition is NG-RAN Multi-Operator Core Network (NG-RAN MOCN) network sharing with operator specific 5QI is supported.',
    )
    NrOperatorCellDu: Optional[NrOperatorCellDuMultiple] = None


class BWPSetSingle(Top):
    bWPlist: Optional[List[Dn]] = Field(None, max_items=12)


class NrOperatorCellDuSingle(Top):
    cellLocalId: Optional[int] = None
    administrativeState: Optional[AdministrativeState] = None
    plmnInfoList: Optional[PlmnInfoList] = None
    nrTac: Optional[Tac] = None


class NRFrequencySingle(Top):
    attributes: Optional[Attributes139] = None


class EUtranFrequencySingle(Top):
    attributes: Optional[Attributes140] = None


class CommonBeamformingFunctionSingle(Top):
    attributes: Optional[Attributes143] = None
    Beam: Optional[BeamMultiple] = None


class BeamSingle(Top):
    attributes: Optional[Attributes144] = None


class RRMPolicyRatioSingle(Top):
    attributes: Optional[Attributes145] = None


class NRCellRelationSingle(Top):
    attributes: Optional[Attributes146] = None


class NRFreqRelationSingle(Top):
    attributes: Optional[Attributes148] = None


class EUtranFreqRelationSingle(Top):
    attributes: Optional[Attributes149] = None


class DANRManagementFunctionSingle(Top):
    attributes: Optional[Attributes150] = None


class DESManagementFunctionSingle(Top):
    attributes: Optional[Attributes151] = None


class DRACHOptimizationFunctionSingle(Top):
    attributes: Optional[Attributes152] = None


class DMROFunctionSingle(Top):
    attributes: Optional[Attributes153] = None


class DLBOFunctionSingle(Top):
    attributes: Optional[Attributes154] = None


class DPCIConfigurationFunctionSingle(Top):
    attributes: Optional[Attributes155] = None


class CPCIConfigurationFunctionSingle(Top):
    attributes: Optional[Attributes156] = None


class CESManagementFunctionSingle(Top):
    attributes: Optional[Attributes157] = None


class RimRSGlobalSingle(Top):
    attributes: Optional[Attributes158] = None
    RimRSSet: Optional[RimRSSetMultiple] = None


class RimRSSetSingle(Top):
    attributes: Optional[Attributes159] = None


class EPXnCSingle(Top):
    attributes: Optional[Attributes166] = None


class EPE1Single(Top):
    attributes: Optional[Attributes166] = None


class EPF1CSingle(Top):
    attributes: Optional[Attributes166] = None


class EPNgCSingle(Top):
    attributes: Optional[Attributes166] = None


class EPX2CSingle(Top):
    attributes: Optional[Attributes166] = None


class EPXnUSingle(Top):
    attributes: Optional[Attributes166] = None


class EPF1USingle(Top):
    attributes: Optional[Attributes172] = None


class EPNgUSingle(Top):
    attributes: Optional[Attributes172] = None


class EPX2USingle(Top):
    attributes: Optional[Attributes174] = None


class EPS1USingle(Top):
    attributes: Optional[Attributes174] = None


class CCOFunctionSingle(Top):
    attributes: Optional[Attributes176] = None


class CCOParametersAttr(Top):
    attributes: Optional[Attributes177] = None


class NTNFunctionSingle(Top):
    attributes: Optional[Attributes178] = None
    ephemerisInfoSet: Optional[EphemerisInfoSetMultiple] = None


class EphemerisInfoSetSingle(Top):
    attributes: Optional[Attributes179] = None


class MDAReport(Top):
    attributes: Optional[Attributes180] = None


class MDARequestSingle(Top):
    attributes: Optional[Attributes182] = None


class MLTrainingRequestSingle(Top):
    attributes: Optional[Attributes184] = None


class MLTrainingProcessSingle(Top):
    attributes: Optional[Attributes185] = None


class MLTrainingReportSingle(Top):
    attributes: Optional[Attributes186] = None


class MLEntitySingle(Top):
    attributes: Optional[Attributes187] = None


class MLEntityRepositorySingle(Top):
    attributes: Optional[Attributes188] = None
    MLEntity: Optional[MLEntityMultiple] = None


class IntentSingle(Top):
    userLabel: Optional[str] = None
    intentExpectations: Optional[
        List[
            Union[
                IntentExpectation,
                RadioNetworkExpectation,
                EdgeServiceSupportExpectation,
                Field5GCNetworkExpectation,
                RadioServiceExpectation,
            ]
        ]
    ] = None
    contextSelectivity: Optional[Selectivity] = None
    intentContexts: Optional[List[Context]] = Field(
        None,
        description='It describes the list of Context(s) which represents the constraints and conditions that should apply  for the entire intent even if there may be specific contexts defined for specific parts of the intent  ',
    )
    intentAdminState: Optional[IntentAdminState] = Field(
        None,
        description='It describes the intent administrative state.  This attribute is used when MnS consumer-suspension mechanism is supported',
    )
    intentPriority: Optional[conint(ge=1, le=100)] = Field(
        None,
        description='It expresses the priority of the stated intent within a MnS consumer.',
    )
    intentPreemptionCapability: Optional[IntentPreemptionCapability] = None
    observationPeriod: Optional[int] = Field(
        None,
        description='It represents the observation period of the fulfilmentInfo for corresponding  ExpectationTargets, IntentExpectations and Intent.',
    )
    intentReportReference: Optional[Dn] = None


class IntentReportSingle(Top):
    intentFulfilmentReport: Optional[IntentFulfilmentReport] = None
    intentConflictReports: Optional[List[IntentConflictReport]] = None
    intentFeasibilityCheckReport: Optional[IntentFeasibilityCheckReport] = None
    lastUpdatedTime: Optional[DateTime] = None
    intentReference: Optional[Dn] = None


class IntentHandlingFunctionSingle(Top):
    intentHandlingCapabilityList: Optional[List[IntentHandlingCapability]] = None
    Intent: Optional[IntentMultiple] = None
    IntentReport: Optional[IntentReportMultiple] = None


class ScMgmtProfileSingle(Top):
    nEInformation: Optional[List[NEInfomration]] = Field(
        None,
        description='This attribute defines the NE Type(s) or the NE instance(s) for which this  ScMgmtProfile instance is valid.',
    )
    configDataFileLocation: Optional[Uri] = None


class ScProcessSingle(Top):
    nEIdentification: Optional[NEIdentification] = None
    scProcessMonitor: Optional[ScProcessMonitor] = None
    cancelScProcess: Optional[CancelScProcess] = Field(
        None,
        description='Setting this attribute to "TRUE" cancels the self configuration process. ',
    )
    scMgmtProfileRef: Optional[Dn] = None


class AssuranceClosedControlLoopSingle(Top):
    attributes: Optional[Attributes189] = None
    AssuranceGoal: Optional[AssuranceGoalMultiple] = None


class AssuranceGoalSingle(Top):
    attributes: Optional[Attributes190] = None


class AssuranceReportSingle(Top):
    attributes: Optional[Attributes191] = None


class NetworkSliceSingle(Top):
    attributes: Optional[Attributes192]


class NetworkSliceSubnetSingle(Top):
    attributes: Optional[Attributes193] = None


class EPTransportSingle(Top):
    attributes: Optional[Attributes194] = None


class NetworkSliceSubnetProviderCapabilitiesSingle(Top):
    attributes: Optional[Attributes195] = None


class FeasibilityCheckAndReservationJobSingle(Top):
    attributes: Optional[Attributes196] = None


class NetworkSliceControllerSingle(Top):
    attributes: Optional[Attributes197] = None


class NetworkSliceSubnetControllerSingle(Top):
    attributes: Optional[Attributes198] = None


class IsolationProfileSingle(Top):
    attributes: Optional[Attributes199] = None


class AmfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes18] = None
    EP_N2: Optional[EPN2Multiple] = None
    EP_N8: Optional[EPN8Multiple] = None
    EP_N11: Optional[EPN11Multiple] = None
    EP_N12: Optional[EPN12Multiple] = None
    EP_N14: Optional[EPN14Multiple] = None
    EP_N15: Optional[EPN15Multiple] = None
    EP_N17: Optional[EPN17Multiple] = None
    EP_N20: Optional[EPN20Multiple] = None
    EP_N22: Optional[EPN22Multiple] = None
    EP_N26: Optional[EPN26Multiple] = None
    EP_NLS: Optional[EPNLSMultiple] = None
    EP_NL2: Optional[EPNL2Multiple] = None
    EP_N58: Optional[EPN58Multiple] = None
    EP_N41: Optional[EPN41Multiple] = None
    EP_N42: Optional[EPN42Multiple] = None
    EP_N89: Optional[EPN89Multiple] = None
    EP_N11mb: Optional[EPN11mbMultiple] = None


class SmfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes21] = None
    EP_N4: Optional[EPN4Multiple] = None
    EP_N7: Optional[EPN7Multiple] = None
    EP_N10: Optional[EPN10Multiple] = None
    EP_N11: Optional[EPN11Multiple] = None
    EP_N16: Optional[EPN16Multiple] = None
    EP_S5C: Optional[EPS5CMultiple] = None
    EP_N40: Optional[EPN40Multiple] = None
    EP_N88: Optional[EPN88Multiple] = None
    EP_N16mb: Optional[EPN16mbMultiple] = None
    FiveQiDscpMappingSet: Optional[FiveQiDscpMappingSetSingle] = None
    GtpUPathQoSMonitoringControl: Optional[GtpUPathQoSMonitoringControlSingle] = None
    QFQoSMonitoringControl: Optional[QFQoSMonitoringControlSingle] = None
    PredefinedPccRuleSet: Optional[PredefinedPccRuleSetSingle] = None


class UpfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes22] = None
    EP_N3: Optional[EPN3Multiple] = None
    EP_N4: Optional[EPN4Multiple] = None
    EP_N6: Optional[EPN6Multiple] = None
    EP_N9: Optional[EPN9Multiple] = None
    EP_S5U: Optional[EPS5UMultiple] = None


class N3iwfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes23] = None
    EP_N3: Optional[EPN3Multiple] = None
    EP_N4: Optional[EPN4Multiple] = None


class PcfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes24] = None
    EP_N5: Optional[EPN5Multiple] = None
    EP_N7: Optional[EPN7Multiple] = None
    EP_N15: Optional[EPN15Multiple] = None
    EP_N16: Optional[EPN16Multiple] = None
    EP_N28: Optional[EPN28Multiple] = None
    EP_Rx: Optional[EPRxMultiple] = None
    EP_N84: Optional[EPN84Multiple] = None
    PredefinedPccRuleSet: Optional[PredefinedPccRuleSetSingle] = None


class AusfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes25] = None
    EP_N12: Optional[EPN12Multiple] = None
    EP_N13: Optional[EPN13Multiple] = None
    EP_N61: Optional[EPN61Multiple] = None


class UdmFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes26] = None
    EP_N8: Optional[EPN8Multiple] = None
    EP_N10: Optional[EPN10Multiple] = None
    EP_N13: Optional[EPN13Multiple] = None
    EP_N59: Optional[EPN13Multiple] = None
    EP_NL6: Optional[EPNL6Multiple] = None
    EP_N87: Optional[EPN87Multiple] = None


class NrfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes29] = None
    EP_N27: Optional[EPN27Multiple] = None
    EP_N96: Optional[EPN96Multiple] = None
    EP_SM14: Optional[EPSM14Multiple] = None


class NssfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes30] = None
    EP_N22: Optional[EPN22Multiple] = None
    EP_N31: Optional[EPN31Multiple] = None
    EP_N34: Optional[EPN34Multiple] = None


class SmsfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes31] = None
    EP_N20: Optional[EPN20Multiple] = None
    EP_N21: Optional[EPN21Multiple] = None
    EP_MAP_SMSC: Optional[EPMAPSMSCMultiple] = None


class LmfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes32] = None
    EP_NLS: Optional[EPNLSMultiple] = None


class NgeirFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes33] = None
    EP_N17: Optional[EPN17Multiple] = None


class SeppFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes34] = None
    EP_N32: Optional[EPN32Multiple] = None


class NwdafFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes35] = None
    EP_NL3: Optional[EPNL3Multiple] = None
    EP_N34: Optional[EPN34Multiple] = None
    AnLFFunction: Optional[AnLFFunctionSingle] = None


class ScpFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes36] = None
    EP_SM13: Optional[EPSM13Multiple] = None


class NefFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes37] = None
    EP_N33: Optional[EPN33Multiple] = None
    EP_NL5: Optional[EPNL5Multiple] = None
    EP_N85: Optional[EPN85Multiple] = None
    EP_N62: Optional[EPN62Multiple] = None
    EP_N63: Optional[EPN63Multiple] = None


class NsacfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes38] = None
    EP_N60: Optional[EPN60Multiple] = None


class DDNMFFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes39] = None
    EP_Npc4: Optional[EPNpc4Multiple] = None
    EP_Npc6: Optional[EPNpc6Multiple] = None
    EP_Npc7: Optional[EPNpc7Multiple] = None
    EP_Npc8: Optional[EPNpc8Multiple] = None


class EASDFFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes40] = None
    EP_N88: Optional[EPN88Multiple] = None


class EASFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes42] = None


class EESFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes43] = None


class ECSFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes44] = None


class AfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes96] = None
    EP_N5: Optional[EPN5Multiple] = None
    EP_N86: Optional[EPN86Multiple] = None
    EP_N63: Optional[EPN63Multiple] = None
    EP_N62: Optional[EPN62Multiple] = None


class NssaafFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes97] = None


class DccfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes100] = None


class MfafFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes101] = None


class ChfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes102] = None
    EP_N28: Optional[EPN28Multiple] = None
    EP_N40: Optional[EPN40Multiple] = None
    EP_N41: Optional[EPN41Multiple] = None
    EP_N42: Optional[EPN42Multiple] = None


class AanfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes107] = None
    EP_N61: Optional[EPN61Multiple] = None
    EP_N62: Optional[EPN62Multiple] = None
    EP_N63: Optional[EPN63Multiple] = None


class GmlcFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes111] = None
    EP_NL2: Optional[EPNL2Multiple] = None
    EP_NL3: Optional[EPNL3Multiple] = None
    EP_NL5: Optional[EPNL5Multiple] = None
    EP_NL6: Optional[EPNL6Multiple] = None
    EP_NL9: Optional[EPNL9Multiple] = None


class TsctsfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes112] = None
    EP_N84: Optional[EPN84Multiple] = None
    EP_N85: Optional[EPN85Multiple] = None
    EP_N86: Optional[EPN86Multiple] = None
    EP_N87: Optional[EPN87Multiple] = None
    EP_N89: Optional[EPN89Multiple] = None
    EP_N96: Optional[EPN96Multiple] = None


class BsfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes119] = None


class MbSmfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes120] = None
    EP_N11mb: Optional[EPN11mbMultiple] = None
    EP_N16mb: Optional[EPN16mbMultiple] = None
    EP_Nmb1: Optional[EPNmb1Multiple] = None
    EP_N4mb: Optional[EPN4mbMultiple] = None


class MbUpfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes124] = None
    EP_N3mb: Optional[EPN3mbMultiple] = None
    EP_N4mb: Optional[EPN4mbMultiple] = None
    EP_N19mb: Optional[EPN19mbMultiple] = None
    EP_Nmb9: Optional[EPNmb9Multiple] = None


class MnpfFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes125] = None
    EP_SM12: Optional[EPSM12Multiple] = None
    EP_SM13: Optional[EPSM13Multiple] = None
    EP_SM14: Optional[EPSM14Multiple] = None


class GnbDuFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes134] = None
    RRMPolicyRatio: Optional[RRMPolicyRatioMultiple] = None
    NrCellDu: Optional[NrCellDuMultiple] = None
    Bwp_Multiple: Optional[BwpMultiple] = Field(None, alias='Bwp-Multiple')
    NrSectorCarrier_Multiple: Optional[NrSectorCarrierMultiple] = Field(
        None, alias='NrSectorCarrier-Multiple'
    )
    EP_F1C: Optional[EPF1CSingle] = None
    EP_F1U: Optional[EPF1UMultiple] = None
    DRACHOptimizationFunction: Optional[DRACHOptimizationFunctionSingle] = None
    OperatorDU: Optional[OperatorDuMultiple] = None
    BWPSet: Optional[BWPSetMultiple] = None
    Configurable5QISet: Optional[Configurable5QISetMultiple] = None
    Dynamic5QISet: Optional[Dynamic5QISetMultiple] = None


class GnbCuUpFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes135] = None
    RRMPolicyRatio: Optional[RRMPolicyRatioMultiple] = None
    EP_E1: Optional[EPE1Single] = None
    EP_XnU: Optional[EPXnUMultiple] = None
    EP_F1U: Optional[EPF1UMultiple] = None
    EP_NgU: Optional[EPNgUMultiple] = None
    EP_X2U: Optional[EPX2UMultiple] = None
    EP_S1U: Optional[EPS1UMultiple] = None
    Configurable5QISet: Optional[Configurable5QISetMultiple] = None
    Dynamic5QISet: Optional[Dynamic5QISetMultiple] = None


class GnbCuCpFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes136] = None
    RRMPolicyRatio: Optional[RRMPolicyRatioMultiple] = None
    NrCellCu: Optional[NrCellCuMultiple] = None
    EP_XnC: Optional[EPXnCMultiple] = None
    EP_E1: Optional[EPE1Multiple] = None
    EP_F1C: Optional[EPF1CMultiple] = None
    EP_NgC: Optional[EPNgCMultiple] = None
    EP_X2C: Optional[EPX2CMultiple] = None
    DANRManagementFunction: Optional[DANRManagementFunctionSingle] = None
    DESManagementFunction: Optional[DESManagementFunctionSingle] = None
    DMROFunction: Optional[DMROFunctionSingle] = None
    DLBOFunction: Optional[DLBOFunctionSingle] = None
    Configurable5QISet: Optional[Configurable5QISetMultiple] = None
    Dynamic5QISet: Optional[Dynamic5QISetMultiple] = None


class NrCellCuSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes137] = None
    RRMPolicyRatio: Optional[RRMPolicyRatioMultiple] = None
    NRCellRelation: Optional[NRCellRelationMultiple] = None
    EUtranCellRelation: Optional[EUtranCellRelationMultiple] = None
    NRFreqRelation: Optional[NRFreqRelationMultiple] = None
    EUtranFreqRelation: Optional[EUtranFreqRelationMultiple] = None
    DESManagementFunction: Optional[DESManagementFunctionSingle] = None
    DMROFunction: Optional[DMROFunctionSingle] = None
    DLBOFunction: Optional[DLBOFunctionSingle] = None
    CESManagementFunction: Optional[CESManagementFunctionSingle] = None
    DPCIConfigurationFunction: Optional[DPCIConfigurationFunctionSingle] = None


class NrCellDuSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes138] = None
    RRMPolicyRatio: Optional[RRMPolicyRatioMultiple] = None
    CPCIConfigurationFunction: Optional[CPCIConfigurationFunctionSingle] = None
    DRACHOptimizationFunction: Optional[DRACHOptimizationFunctionSingle] = None


class NrSectorCarrierSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes141] = None
    CommonBeamformingFunction: Optional[CommonBeamformingFunctionSingle] = None


class BwpSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes142] = None


class EUtranCellRelationSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes147] = None


class ExternalGnbDuFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes160] = None
    EP_F1C: Optional[EPF1CMultiple] = None
    EP_F1U: Optional[EPF1UMultiple] = None


class ExternalGnbCuUpFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes160] = None
    EP_E1: Optional[EPE1Multiple] = None
    EP_F1U: Optional[EPF1UMultiple] = None
    EP_XnU: Optional[EPXnUMultiple] = None


class ExternalGnbCuCpFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes162] = None
    ExternalNrCellCu: Optional[ExternalNrCellCuMultiple] = None
    EP_XnC: Optional[EPXnCMultiple] = None
    EP_E1: Optional[EPE1Multiple] = None
    EP_F1C: Optional[EPF1CMultiple] = None


class ExternalNrCellCuSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes163] = None


class ExternalENBFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes164] = None
    ExternalEUTranCell: Optional[ExternalEUTranCellMultiple] = None


class ExternalEUTranCellSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes165] = None


class MDAFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes181] = None
    MDARequest: Optional[MDARequestMultiple] = None


class MLTrainingFunctionSingle(Top, ManagedFunctionNcO):
    attributes: Optional[Attributes183] = None
    MLTrainingRequest: Optional[MLTrainingRequestMultiple] = None
    MLTrainingProcess: Optional[MLTrainingProcessMultiple] = None
    MLTrainingReport: Optional[MLTrainingReportMultiple] = None


class ManagedElementSingle(
    Top,
    ManagedElementAttr,
    ManagedElementNcO,
    ManagedElementNcOMdaNrm,
    ManagedElementNcOAiMlNrm,
    ManagedElementNcOCoslaNrm,
    ManagedElementNcONrNrm,
    ManagedElementNcO5GcNrm,
):
    pass


class SubNetworkSingle(
    Top,
    SubNetworkAttr,
    SubNetworkNcO,
    SubNetworkNcOMdaNrm,
    SubNetworkNcOAiMlNrm,
    SubNetworkNcOIntentNrm,
    SubNetworkNcORanScNrm,
    SubNetworkNcOCoslaNrm,
    SubNetworkNcOEdgeNrm,
    SubNetworkNcOSliceNrm,
    SubNetworkNcONrNrm,
    SubNetworkNcO5GcNrm,
):
    pass


class CCOWeakCoverageParametersSingle(CCOParametersAttr):
    pass


class CCOPilotPollutionParametersSingle(CCOParametersAttr):
    pass


class CCOOvershootCoverageParametersSingle(CCOParametersAttr):
    pass


Resource.update_forward_refs()
ResourcesGenericNrm.update_forward_refs()
TopAttr.update_forward_refs()
Top.update_forward_refs()
SubNetworkNcO.update_forward_refs()
TraceJobMultiple.update_forward_refs()
FilesMultiple.update_forward_refs()
ManagedElementNcO.update_forward_refs()
ManagedFunctionNcO.update_forward_refs()
VsDataContainerSingle.update_forward_refs()
Attributes12.update_forward_refs()
SubNetworkNcONrNrm.update_forward_refs()
Configurable5QISetMultiple.update_forward_refs()
SubNetworkNcO5GcNrm.update_forward_refs()
ManagedElementNcO5GcNrm.update_forward_refs()
SubNetworkNcOEdgeNrm.update_forward_refs()
EASFunctionMultiple.update_forward_refs()
ECSFunctionMultiple.update_forward_refs()
EESFunctionMultiple.update_forward_refs()
EdgeDataNetworkMultiple.update_forward_refs()
EASProfileMultiple.update_forward_refs()
EdgeFederationMultiple.update_forward_refs()
OperatorEdgeFederationMultiple.update_forward_refs()
OperatorEdgeDataNetworkMultiple.update_forward_refs()
ResourcesEdgeNrm.update_forward_refs()
FiveQICharacteristicsMultiple.update_forward_refs()
AmfFunctionMultiple.update_forward_refs()
SmfFunctionMultiple.update_forward_refs()
UpfFunctionMultiple.update_forward_refs()
N3iwfFunctionMultiple.update_forward_refs()
PcfFunctionMultiple.update_forward_refs()
AusfFunctionMultiple.update_forward_refs()
UdmFunctionMultiple.update_forward_refs()
UdrFunctionMultiple.update_forward_refs()
UdsfFunctionMultiple.update_forward_refs()
NrfFunctionMultiple.update_forward_refs()
NssfFunctionMultiple.update_forward_refs()
SmsfFunctionMultiple.update_forward_refs()
LmfFunctionMultiple.update_forward_refs()
NgeirFunctionMultiple.update_forward_refs()
SeppFunctionMultiple.update_forward_refs()
NwdafFunctionMultiple.update_forward_refs()
ScpFunctionMultiple.update_forward_refs()
NefFunctionMultiple.update_forward_refs()
NsacfFunctionMultiple.update_forward_refs()
ExternalAmfFunctionMultiple.update_forward_refs()
ExternalNrfFunctionMultiple.update_forward_refs()
ExternalNssfFunctionMultiple.update_forward_refs()
ExternalSeppFunctionNultiple.update_forward_refs()
AmfSetMultiple.update_forward_refs()
AmfRegionMultiple.update_forward_refs()
EASDFFunctionMultiple.update_forward_refs()
EPN2Multiple.update_forward_refs()
EPN3Multiple.update_forward_refs()
EPN4Multiple.update_forward_refs()
EPN5Multiple.update_forward_refs()
EPN6Multiple.update_forward_refs()
EPN7Multiple.update_forward_refs()
EPN8Multiple.update_forward_refs()
EPN9Multiple.update_forward_refs()
EPN10Multiple.update_forward_refs()
EPN11Multiple.update_forward_refs()
EPN12Multiple.update_forward_refs()
EPN13Multiple.update_forward_refs()
EPN14Multiple.update_forward_refs()
EPN15Multiple.update_forward_refs()
EPN16Multiple.update_forward_refs()
EPN17Multiple.update_forward_refs()
EPN20Multiple.update_forward_refs()
EPN21Multiple.update_forward_refs()
EPN22Multiple.update_forward_refs()
EPN26Multiple.update_forward_refs()
EPN27Multiple.update_forward_refs()
EPN28Multiple.update_forward_refs()
EPN31Multiple.update_forward_refs()
EPN32Multiple.update_forward_refs()
EPN33Multiple.update_forward_refs()
EPN34Multiple.update_forward_refs()
EPN40Multiple.update_forward_refs()
EPN41Multiple.update_forward_refs()
EPN42Multiple.update_forward_refs()
EPS5CMultiple.update_forward_refs()
EPS5UMultiple.update_forward_refs()
EPRxMultiple.update_forward_refs()
EPMAPSMSCMultiple.update_forward_refs()
EPNLSMultiple.update_forward_refs()
EPNL2Multiple.update_forward_refs()
EPNL3Multiple.update_forward_refs()
EPNL5Multiple.update_forward_refs()
EPNL6Multiple.update_forward_refs()
EPNL9Multiple.update_forward_refs()
EPN60Multiple.update_forward_refs()
EPN61Multiple.update_forward_refs()
EPN62Multiple.update_forward_refs()
EPN63Multiple.update_forward_refs()
EPNpc4Multiple.update_forward_refs()
EPNpc6Multiple.update_forward_refs()
EPNpc7Multiple.update_forward_refs()
EPNpc8Multiple.update_forward_refs()
EPN84Multiple.update_forward_refs()
EPN85Multiple.update_forward_refs()
EPN86Multiple.update_forward_refs()
EPN87Multiple.update_forward_refs()
EPN88Multiple.update_forward_refs()
EPN89Multiple.update_forward_refs()
EPN96Multiple.update_forward_refs()
EPN11mbMultiple.update_forward_refs()
EPN16mbMultiple.update_forward_refs()
EPNmb1Multiple.update_forward_refs()
EPN3mbMultiple.update_forward_refs()
EPN4mbMultiple.update_forward_refs()
EPN19mbMultiple.update_forward_refs()
EPNmb9Multiple.update_forward_refs()
EPSM12Multiple.update_forward_refs()
EPSM13Multiple.update_forward_refs()
EPSM14Multiple.update_forward_refs()
Dynamic5QISetMultiple.update_forward_refs()
EcmConnectionInfoMultiple.update_forward_refs()
NssaafFunctionMultiple.update_forward_refs()
EPN58Multiple.update_forward_refs()
EPN59Multiple.update_forward_refs()
AfFunctionMultiple.update_forward_refs()
DccfFunctionMultiple.update_forward_refs()
ChfFunctionMultiple.update_forward_refs()
MfafFunctionMultiple.update_forward_refs()
GmlcFunctionMultiple.update_forward_refs()
TsctsfFunctionMultiple.update_forward_refs()
AanfFunctionMultiple.update_forward_refs()
BsfFunctionMultiple.update_forward_refs()
MbSmfFunctionMultiple.update_forward_refs()
MbUpfFunctionMultiple.update_forward_refs()
MnpfFunctionMultiple.update_forward_refs()
Resources5gcNrm.update_forward_refs()
ManagedElementNcONrNrm.update_forward_refs()
Attributes176.update_forward_refs()
GnbDuFunctionMultiple.update_forward_refs()
OperatorDuMultiple.update_forward_refs()
GnbCuUpFunctionMultiple.update_forward_refs()
GnbCuCpFunctionMultiple.update_forward_refs()
BWPSetMultiple.update_forward_refs()
NrCellDuMultiple.update_forward_refs()
NrOperatorCellDuMultiple.update_forward_refs()
NrCellCuMultiple.update_forward_refs()
NRFrequencyMultiple.update_forward_refs()
EUtranFrequencyMultiple.update_forward_refs()
NrSectorCarrierMultiple.update_forward_refs()
BwpMultiple.update_forward_refs()
BeamMultiple.update_forward_refs()
RRMPolicyRatioMultiple.update_forward_refs()
NRCellRelationMultiple.update_forward_refs()
EUtranCellRelationMultiple.update_forward_refs()
NRFreqRelationMultiple.update_forward_refs()
EUtranFreqRelationMultiple.update_forward_refs()
RimRSSetMultiple.update_forward_refs()
ExternalGnbDuFunctionMultiple.update_forward_refs()
ExternalGnbCuUpFunctionMultiple.update_forward_refs()
ExternalGnbCuCpFunctionMultiple.update_forward_refs()
ExternalNrCellCuMultiple.update_forward_refs()
ExternalENBFunctionMultiple.update_forward_refs()
ExternalEUTranCellMultiple.update_forward_refs()
EPE1Multiple.update_forward_refs()
EPXnCMultiple.update_forward_refs()
EPF1CMultiple.update_forward_refs()
EPNgCMultiple.update_forward_refs()
EPX2CMultiple.update_forward_refs()
EPXnUMultiple.update_forward_refs()
EPF1UMultiple.update_forward_refs()
EPNgUMultiple.update_forward_refs()
EPX2UMultiple.update_forward_refs()
EPS1UMultiple.update_forward_refs()
EphemerisInfoSetMultiple.update_forward_refs()
ResourcesNrNrm.update_forward_refs()
SubNetworkNcOMdaNrm.update_forward_refs()
ManagedElementNcOMdaNrm.update_forward_refs()
MDAReportSingle.update_forward_refs()
MDAFunctionMultiple.update_forward_refs()
MDARequestMultiple.update_forward_refs()
ResourcesMdaNrm.update_forward_refs()
SubNetworkNcOAiMlNrm.update_forward_refs()
ManagedElementNcOAiMlNrm.update_forward_refs()
MLTrainingFunctionMultiple.update_forward_refs()
MLTrainingRequestMultiple.update_forward_refs()
MLTrainingProcessMultiple.update_forward_refs()
MLTrainingReportMultiple.update_forward_refs()
MLEntityMultiple.update_forward_refs()
MLEntityRepositoryMultiple.update_forward_refs()
ResourcesAiMlNrm.update_forward_refs()
SubNetworkNcOIntentNrm.update_forward_refs()
IntentMultiple.update_forward_refs()
IntentReportMultiple.update_forward_refs()
IntentHandlingFunctionMultiple.update_forward_refs()
ResourcesIntentNrm.update_forward_refs()
SubNetworkNcORanScNrm.update_forward_refs()
ScMgmtProfileMultiple.update_forward_refs()
ScProcessMultiple.update_forward_refs()
ResourcesRanScNrm.update_forward_refs()
SubNetworkNcOCoslaNrm.update_forward_refs()
ManagedElementNcOCoslaNrm.update_forward_refs()
AssuranceClosedControlLoopMultiple.update_forward_refs()
AssuranceGoalMultiple.update_forward_refs()
ResourcesCoslaNrm.update_forward_refs()
SubNetworkNcOSliceNrm.update_forward_refs()
NetworkSliceMultiple.update_forward_refs()
NetworkSliceSubnetMultiple.update_forward_refs()
EPTransportMultiple.update_forward_refs()
NetworkSliceSubnetProviderCapabilitiesMultiple.update_forward_refs()
FeasibilityCheckAndReservationJobMultiple.update_forward_refs()
NetworkSliceControllerMultiple.update_forward_refs()
NetworkSliceSubnetControllerMultiple.update_forward_refs()
IsolationProfileMultiple.update_forward_refs()
ResourcesSliceNrm.update_forward_refs()
ManagedNFServiceMultiple.update_forward_refs()
ManagementNodeMultiple.update_forward_refs()
MnsAgentMultiple.update_forward_refs()
MeContextMultiple.update_forward_refs()
PerfMetricJobMultiple.update_forward_refs()
ThresholdMonitorMultiple.update_forward_refs()
ManagementDataCollectionMultiple.update_forward_refs()
NtfSubscriptionControlMultiple.update_forward_refs()
FileDownloadJobMultiple.update_forward_refs()
FileMultiple.update_forward_refs()
MnsInfoMultiple.update_forward_refs()
SchedulerMultiple.update_forward_refs()
ConditionMonitorMultiple.update_forward_refs()
QMCJobMultiple.update_forward_refs()
SubNetworkMultiple.update_forward_refs()
ManagedElementMultiple.update_forward_refs()
ResourcesTraceControlNrm.update_forward_refs()
TraceJobSingle.update_forward_refs()
ManagedNFServiceSingle.update_forward_refs()
ManagementNodeSingle.update_forward_refs()
MnsAgentSingle.update_forward_refs()
MeContextSingle.update_forward_refs()
PerfMetricJobSingle.update_forward_refs()
ThresholdMonitorSingle.update_forward_refs()
NtfSubscriptionControlSingle.update_forward_refs()
HeartbeatControlSingle.update_forward_refs()
ManagementDataCollectionSingle.update_forward_refs()
AlarmListSingle.update_forward_refs()
FileDownloadJobSingle.update_forward_refs()
FilesSingle.update_forward_refs()
FileSingle.update_forward_refs()
MnsRegistrySingle.update_forward_refs()
MnsInfoSingle.update_forward_refs()
SchedulerSingle.update_forward_refs()
ConditionMonitorSingle.update_forward_refs()
SupportedNotificationsSingle.update_forward_refs()
QMCJobSingle.update_forward_refs()
AmfSetSingle.update_forward_refs()
AmfRegionSingle.update_forward_refs()
UdrFunctionSingle.update_forward_refs()
UdsfFunctionSingle.update_forward_refs()
EcmConnectionInfoSingle.update_forward_refs()
EdgeDataNetworkSingle.update_forward_refs()
EASProfileSingle.update_forward_refs()
EASRequirementsSingle.update_forward_refs()
ResourceReservationJob.update_forward_refs()
EdgeFederationSingle.update_forward_refs()
OperatorEdgeFederationSingle.update_forward_refs()
OperatorEdgeDataNetworkSingle.update_forward_refs()
ExternalAmfFunctionSingle.update_forward_refs()
ExternalNrfFunctionSingle.update_forward_refs()
ExternalNssfFunctionSingle.update_forward_refs()
ExternalSeppFunctionSingle.update_forward_refs()
EPN2Single.update_forward_refs()
EPN3Single.update_forward_refs()
EPN4Single.update_forward_refs()
EPN5Single.update_forward_refs()
EPN6Single.update_forward_refs()
EPN7Single.update_forward_refs()
EPN8Single.update_forward_refs()
EPN9Single.update_forward_refs()
EPN10Single.update_forward_refs()
EPN11Single.update_forward_refs()
EPN12Single.update_forward_refs()
EPN13Single.update_forward_refs()
EPN14Single.update_forward_refs()
EPN15Single.update_forward_refs()
EPN16Single.update_forward_refs()
EPN17Single.update_forward_refs()
EPN20Single.update_forward_refs()
EPN21Single.update_forward_refs()
EPN22Single.update_forward_refs()
EPN26Single.update_forward_refs()
EPN27Single.update_forward_refs()
EPN31Single.update_forward_refs()
EPN32Single.update_forward_refs()
EPN33Single.update_forward_refs()
EPN34Single.update_forward_refs()
EPS5CSingle.update_forward_refs()
EPS5USingle.update_forward_refs()
EPRxSingle.update_forward_refs()
EPMAPSMSCSingle.update_forward_refs()
EPNLSSingle.update_forward_refs()
EPNL2Single.update_forward_refs()
EPNL3Single.update_forward_refs()
EPNL5Single.update_forward_refs()
EPNL6Single.update_forward_refs()
EPNL9Single.update_forward_refs()
EPN60Single.update_forward_refs()
EPNpc4Single.update_forward_refs()
EPNpc6Single.update_forward_refs()
EPNpc7Single.update_forward_refs()
EPNpc8Single.update_forward_refs()
EPN88Single.update_forward_refs()
FiveQiDscpMappingSetSingle.update_forward_refs()
FiveQICharacteristicsSingle.update_forward_refs()
Configurable5QISetSingle.update_forward_refs()
Dynamic5QISetSingle.update_forward_refs()
GtpUPathQoSMonitoringControlSingle.update_forward_refs()
QFQoSMonitoringControlSingle.update_forward_refs()
PredefinedPccRuleSetSingle.update_forward_refs()
EPN58Single.update_forward_refs()
EPN59Single.update_forward_refs()
EPN28Single.update_forward_refs()
EPN40Single.update_forward_refs()
EPN41Single.update_forward_refs()
EPN42Single.update_forward_refs()
EPN61Single.update_forward_refs()
EPN62Single.update_forward_refs()
EPN63Single.update_forward_refs()
EPN84Single.update_forward_refs()
EPN85Single.update_forward_refs()
EPN86Single.update_forward_refs()
EPN87Single.update_forward_refs()
EPN89Single.update_forward_refs()
EPN96Single.update_forward_refs()
EPN11mbSingle.update_forward_refs()
EPN16mbSingle.update_forward_refs()
EPNmb1Single.update_forward_refs()
EPN3mbSingle.update_forward_refs()
EPN4mbSingle.update_forward_refs()
EPN19mbSingle.update_forward_refs()
EPNmb9Single.update_forward_refs()
AnLFFunctionSingle.update_forward_refs()
EPSM12Single.update_forward_refs()
EPSM13Single.update_forward_refs()
EPSM14Single.update_forward_refs()
OperatorDuSingle.update_forward_refs()
BWPSetSingle.update_forward_refs()
NrOperatorCellDuSingle.update_forward_refs()
NRFrequencySingle.update_forward_refs()
EUtranFrequencySingle.update_forward_refs()
CommonBeamformingFunctionSingle.update_forward_refs()
BeamSingle.update_forward_refs()
RRMPolicyRatioSingle.update_forward_refs()
NRCellRelationSingle.update_forward_refs()
NRFreqRelationSingle.update_forward_refs()
EUtranFreqRelationSingle.update_forward_refs()
DANRManagementFunctionSingle.update_forward_refs()
DESManagementFunctionSingle.update_forward_refs()
DRACHOptimizationFunctionSingle.update_forward_refs()
DMROFunctionSingle.update_forward_refs()
DLBOFunctionSingle.update_forward_refs()
DPCIConfigurationFunctionSingle.update_forward_refs()
CPCIConfigurationFunctionSingle.update_forward_refs()
CESManagementFunctionSingle.update_forward_refs()
RimRSGlobalSingle.update_forward_refs()
RimRSSetSingle.update_forward_refs()
EPXnCSingle.update_forward_refs()
EPE1Single.update_forward_refs()
EPF1CSingle.update_forward_refs()
EPNgCSingle.update_forward_refs()
EPX2CSingle.update_forward_refs()
EPXnUSingle.update_forward_refs()
EPF1USingle.update_forward_refs()
EPNgUSingle.update_forward_refs()
EPX2USingle.update_forward_refs()
EPS1USingle.update_forward_refs()
CCOFunctionSingle.update_forward_refs()
CCOParametersAttr.update_forward_refs()
NTNFunctionSingle.update_forward_refs()
EphemerisInfoSetSingle.update_forward_refs()
MDAReport.update_forward_refs()
MDARequestSingle.update_forward_refs()
MLTrainingRequestSingle.update_forward_refs()
MLTrainingProcessSingle.update_forward_refs()
MLTrainingReportSingle.update_forward_refs()
MLEntitySingle.update_forward_refs()
MLEntityRepositorySingle.update_forward_refs()
IntentSingle.update_forward_refs()
IntentReportSingle.update_forward_refs()
IntentHandlingFunctionSingle.update_forward_refs()
ScMgmtProfileSingle.update_forward_refs()
ScProcessSingle.update_forward_refs()
AssuranceClosedControlLoopSingle.update_forward_refs()
AssuranceGoalSingle.update_forward_refs()
AssuranceReportSingle.update_forward_refs()
NetworkSliceSingle.update_forward_refs()
NetworkSliceSubnetSingle.update_forward_refs()
EPTransportSingle.update_forward_refs()
NetworkSliceSubnetProviderCapabilitiesSingle.update_forward_refs()
FeasibilityCheckAndReservationJobSingle.update_forward_refs()
NetworkSliceControllerSingle.update_forward_refs()
NetworkSliceSubnetControllerSingle.update_forward_refs()
IsolationProfileSingle.update_forward_refs()
AmfFunctionSingle.update_forward_refs()
SmfFunctionSingle.update_forward_refs()
UpfFunctionSingle.update_forward_refs()
N3iwfFunctionSingle.update_forward_refs()
PcfFunctionSingle.update_forward_refs()
AusfFunctionSingle.update_forward_refs()
UdmFunctionSingle.update_forward_refs()
NrfFunctionSingle.update_forward_refs()
NssfFunctionSingle.update_forward_refs()
SmsfFunctionSingle.update_forward_refs()
LmfFunctionSingle.update_forward_refs()
NgeirFunctionSingle.update_forward_refs()
SeppFunctionSingle.update_forward_refs()
NwdafFunctionSingle.update_forward_refs()
ScpFunctionSingle.update_forward_refs()
NefFunctionSingle.update_forward_refs()
NsacfFunctionSingle.update_forward_refs()
DDNMFFunctionSingle.update_forward_refs()
EASDFFunctionSingle.update_forward_refs()
EASFunctionSingle.update_forward_refs()
EESFunctionSingle.update_forward_refs()
ECSFunctionSingle.update_forward_refs()
AfFunctionSingle.update_forward_refs()
NssaafFunctionSingle.update_forward_refs()
DccfFunctionSingle.update_forward_refs()
MfafFunctionSingle.update_forward_refs()
ChfFunctionSingle.update_forward_refs()
AanfFunctionSingle.update_forward_refs()
GmlcFunctionSingle.update_forward_refs()
TsctsfFunctionSingle.update_forward_refs()
BsfFunctionSingle.update_forward_refs()
MbSmfFunctionSingle.update_forward_refs()
MbUpfFunctionSingle.update_forward_refs()
MnpfFunctionSingle.update_forward_refs()
GnbDuFunctionSingle.update_forward_refs()
GnbCuUpFunctionSingle.update_forward_refs()
GnbCuCpFunctionSingle.update_forward_refs()
NrCellCuSingle.update_forward_refs()
NrCellDuSingle.update_forward_refs()
NrSectorCarrierSingle.update_forward_refs()
BwpSingle.update_forward_refs()
EUtranCellRelationSingle.update_forward_refs()
ExternalGnbDuFunctionSingle.update_forward_refs()
ExternalGnbCuUpFunctionSingle.update_forward_refs()
ExternalGnbCuCpFunctionSingle.update_forward_refs()
ExternalNrCellCuSingle.update_forward_refs()
ExternalENBFunctionSingle.update_forward_refs()
ExternalEUTranCellSingle.update_forward_refs()
MDAFunctionSingle.update_forward_refs()
MLTrainingFunctionSingle.update_forward_refs()
ManagedElementSingle.update_forward_refs()
SubNetworkSingle.update_forward_refs()
CCOWeakCoverageParametersSingle.update_forward_refs()
CCOPilotPollutionParametersSingle.update_forward_refs()
CCOOvershootCoverageParametersSingle.update_forward_refs()
